@page "/accountAuthManage"
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components.Authorization
@using Web_health_app.Web.Components.Layout
@using Web_health_app.Models.Models
@using Web_health_app.Web.ApiClients
@using Microsoft.AspNetCore.Components
@using System.Threading
@using static Web_health_app.Web.ApiClients.UserApiClient
@layout MainLayout
@attribute [Authorize(Roles = "ACCESS.MainViewAccount")]
@inject UserApiClient UserApi
@inject RoleApiClient RoleApi
@inject GroupApiClient GroupApi
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<link href="/css/AccountAuthManage/MainViewAccount.css" rel="stylesheet" />

<div class="account-auth-page">
    <div class="container-fluid mt-4">
        <div class="row mb-4">
            <div class="col-12">
                <h3 class="mb-4">Quản lý Phân quyền và Truy cập</h3>

                <!-- Advanced Filter and Search Bar -->
                <div class="card mb-4 shadow-sm">
                    <div class="card-header bg-light">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <h5 class="mb-0">
                                    <i class="fas fa-filter me-2 text-primary"></i>
                                    Bộ lọc và tìm kiếm nâng cao
                                    @if (HasActiveFilters())
                                    {
                                        <span class="badge bg-primary ms-2">@GetActiveFiltersCount()</span>
                                    }
                                </h5>
                            </div>
                            <div class="col-md-6 text-end">
                         
                                
                              
                                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="ToggleAdvancedFilter">
                                    <i class="fas @(showAdvancedFilter ? "fa-chevron-up" : "fa-chevron-down") me-1"></i>
                                    @(showAdvancedFilter ? "Ẩn" : "Hiện") bộ lọc nâng cao
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-sm me-2" @onclick="ResetFilters">
                                    <i class="fas fa-undo me-1"></i>Đặt lại
                                </button>
                            </div>
                        </div>
                        
                        <!-- Active Filter Tags -->
                        @if (HasActiveFilters())
                        {
                            <div class="mt-3">
                                <small class="text-muted">Bộ lọc đang áp dụng:</small>
                                <div class="d-flex flex-wrap mt-1">
                                    @foreach (var filter in GetActiveFilterTags())
                                    {
                                        <span class="badge bg-info me-2 mb-1 d-flex align-items-center">
                                            @filter.Label
                                            <button type="button" class="btn-close btn-close-white ms-2" style="font-size: 0.6em;" 
                                                    @onclick="() => RemoveFilterTag(filter)" title="Xóa bộ lọc này"></button>
                                        </span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="card-body">
                        <!-- Basic Search Row -->
                        <div class="row align-items-center mb-3">
                            <div class="col-md-3">
                                <label for="filterSelect" class="form-label">Loại dữ liệu:</label>
                                <select id="filterSelect" class="form-select" @bind="currentView" @bind:after="OnViewChanged">
                                    <option value="users">Người dùng</option>
                                    <option value="roles">Vai trò</option>
                                    <option value="usergroups">Nhóm người dùng</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="searchInput" class="form-label">Tìm kiếm nhanh:</label>
                                <input type="text" id="searchInput" class="form-control"
                                    placeholder="Nhập từ khóa tìm kiếm..." @bind="searchTerm"
                                    @oninput="OnSearchChanged">
                            </div>
                           
                            <div class="col-md-3">
                                <label class="form-label">&nbsp;</label>
                                @if (isLoading)
                                {
                                    <button class="btn btn-primary w-100 d-block" disabled>
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        Đang tải...
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-primary w-100 d-block" @onclick="NavigateToAddPage"
                                            title="@GetAddButtonTooltip()">
                                        <i class="fas fa-plus me-2"></i>@GetAddButtonText()
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- Advanced Filter Row (Collapsible) -->
                        @if (showAdvancedFilter)
                        {
                            <div class="advanced-filters">
                                <hr class="my-3">
                                @if (currentView == "users")
                                {
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label class="form-label">Từ khóa tìm kiếm:</label>
                                            <input type="text" class="form-control" @bind="userSearchDto.SearchTerm" 
                                                   placeholder="Tên người dùng, họ tên...">
                                        </div>
                                        <div class="col-md-4">
                                            <label class="form-label">Phòng ban:</label>
                                            <input type="text" class="form-control" @bind="userSearchDto.Department" 
                                                   placeholder="Nhập tên phòng ban">
                                        </div>
                                        <div class="col-md-4">
                                            <label class="form-label">Trạng thái:</label>
                                            <select class="form-select" @bind="userSearchDto.UserStatus">
                                                <option value="">Tất cả</option>
                                                <option value="0">Cần đổi MK</option>
                                                <option value="1">Hoạt động</option>
                                                <option value="2">Tạm khóa</option>
                                                <option value="3">Cần reset MK</option>
                                                <option value="-1">Khóa vĩnh viễn</option>
                                                <option value="-2">Đã xóa</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="row mt-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Từ ngày tạo:</label>
                                            <input type="date" class="form-control" @bind="userCreatedFromDate">
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Đến ngày tạo:</label>
                                            <input type="date" class="form-control" @bind="userCreatedToDate">
                                        </div>
                                    </div>
                                }
                                else if (currentView == "roles")
                                {
                                    <div class="row">
                                        <div class="col-md-6">
                                            <label class="form-label">Từ khóa tìm kiếm:</label>
                                            <input type="text" class="form-control" @bind="roleSearchDto.SearchTerm" 
                                                   placeholder="Tên vai trò...">
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Trạng thái:</label>
                                            <select class="form-select" @bind="roleIsActiveString">
                                                <option value="">Tất cả</option>
                                                <option value="true">Hoạt động</option>
                                                <option value="false">Không hoạt động</option>
                                            </select>
                                        </div>
                                    </div>
                                }
                                else if (currentView == "usergroups")
                                {
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label class="form-label">Từ khóa tìm kiếm:</label>
                                            <input type="text" class="form-control" @bind="groupSearchDto.SearchTerm" 
                                                   placeholder="Tên nhóm...">
                                        </div>
                                        <div class="col-md-4">
                                            <label class="form-label">Trạng thái:</label>
                                            <select class="form-select" @bind="groupIsActiveString">
                                                <option value="">Tất cả</option>
                                                <option value="true">Hoạt động</option>
                                                <option value="false">Không hoạt động</option>
                                            </select>
                                        </div>
                                        <div class="col-md-4">
                                            <label class="form-label">Time Active ID:</label>
                                            <input type="text" class="form-control" @bind="groupSearchDto.TimeActiveId" 
                                                   placeholder="Time Active ID">
                                        </div>
                                    </div>

                                    <div class="row mt-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Từ ngày tạo:</label>
                                            <input type="date" class="form-control" @bind="groupCreatedFromDate">
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Đến ngày tạo:</label>
                                            <input type="date" class="form-control" @bind="groupCreatedToDate">
                                        </div>
                                    </div>
                                }
                                
                                <!-- Filter Action Buttons -->
                                <div class="row mt-3">
                                    <div class="col-12">
                                        <div class="d-flex gap-2">
                                            <button type="button" class="btn btn-primary" @onclick="ApplyFilters">
                                                <i class="fas fa-search me-1"></i>Áp dụng
                                            </button>
                                            <button type="button" class="btn btn-outline-secondary" @onclick="ResetFilters">
                                                <i class="fas fa-undo me-1"></i>Đặt lại
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Content Cards -->
        <div class="row">
            <div class="col-12">
                <div class="row g-4" id="contentCards">
                    @if (isLoading)
                    {
                        <div class="col-12">
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p>Đang tải dữ liệu...</p>
                            </div>
                        </div>
                    }
                    else if (currentView == "users")
                    {
                        @if (users?.Any() == true)
                        {
                            @foreach (var user in users)
                            {
                                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                                    <div class="card h-100 shadow-sm">
                                        <div
                                            class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0">Người dùng</h6>
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-outline-light dropdown-toggle" type="button"
                                                    id="dropdownMenuButton@(user.UserId)" data-bs-toggle="dropdown"
                                                    aria-expanded="false">
                                                    <i class="fas fa-ellipsis-v"></i>
                                                </button>
                                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton@(user.UserId)">
                                                    <AuthorizeView Roles="UPDATE.USERS">
                                                    <li><a class="dropdown-item" href="#"
                                                            @onclick="() => EditUser(user.UserId)">Chỉnh sửa</a></li>
                                                    </AuthorizeView>
                                                    <li>
                                                        <hr class="dropdown-divider">
                                                    </li>
                                                    <AuthorizeView Roles="DELETE.USERS">
                                                    <li><a class="dropdown-item text-danger" href="#"
                                                            @onclick="() => DeleteUser(user.UserId)"
                                                            @onclick:preventDefault="true">Xóa</a></li>
                                                    </AuthorizeView>

                                                </ul>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="d-flex align-items-center mb-3">
                                                <div class="avatar-circle bg-info text-white me-3">
                                                    <i class="fas fa-user"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">@(user.FullName ?? user.UserName)</h6>
                                                    <small class="text-muted">@user.UserName</small>
                                                </div>
                                            </div>
                                            <div class="mb-2">
                                                <span
                                                    class="badge @GetStatusBadgeClass(user.UserStatus)">@user.UserStatusString</span>
                                                <span></span>

                                                @if (user.LevelSecurity > 0)
                                                {
                                                    <span class="badge bg-warning">Level @user.LevelSecurity</span>
                                                }
                                            </div>
                                            <p class="card-text text-muted small mb-2">
                                                @if (!string.IsNullOrEmpty(user.GroupName))
                                                {
                                                    <span>Nhóm: @user.GroupName</span>
                                                }
                                                else if (!string.IsNullOrEmpty(user.Department))
                                                {
                                                    <span>Phòng ban: @user.Department</span>
                                                }
                                            </p>
                                            @if (!string.IsNullOrEmpty(user.ManagerName))
                                            {
                                                <p class="card-text text-muted small">Quản lý bởi: <span
                                                        class="text-info">@user.ManagerName</span></p>
                                            }
                                            @if (!string.IsNullOrEmpty(user.PhoneNumber))
                                            {
                                                <p class="card-text text-muted small">SĐT: @user.PhoneNumber</p>
                                            }
                                        </div>
                                        <div class="card-footer bg-light">
                                            <small class="text-muted">
                                                @if (user.UpdateAt.HasValue)
                                                {
                                                    <span>Cập nhật: @user.UpdateAt.Value.ToString("dd/MM/yyyy")</span>
                                                }
                                                else
                                                {
                                                    <span>Tạo: @user.CreateAt.ToString("dd/MM/yyyy")</span>
                                                }
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col-12">
                                <div class="alert alert-info text-center">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Không tìm thấy người dùng nào.
                                </div>
                            </div>
                        }
                    }
                    else if (currentView == "roles")
                    {
                        @if (roles?.Any() == true)
                        {
                            @foreach (var role in roles)
                            {
                                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                                    <div class="card h-100 shadow-sm">
                                        <div
                                            class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0">Vai trò</h6>
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-outline-light dropdown-toggle" type="button"
                                                    id="dropdownMenuButton@(role.RoleId)" data-bs-toggle="dropdown"
                                                    aria-expanded="false">
                                                    <i class="fas fa-ellipsis-v"></i>
                                                </button>
                                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton@(role.RoleId)">
                                                    <AuthorizeView Roles="UPDATE.ROLES">
                                                    <li><a class="dropdown-item" href="#"
                                                            @onclick="() => EditRoleLink(role.RoleId)">Chỉnh sửa</a></li>
                                                    </AuthorizeView>
                                                    <AuthorizeView Roles="READ.ROLES">
                                                    <li><a class="dropdown-item" href="#"
                                                            @onclick="() => ViewUsersInRole(role.RoleId)">Xem thành viên</a></li>
                                                    </AuthorizeView>

                                                    <li>
                                                        <hr class="dropdown-divider">
                                                    </li>
                                                    <AuthorizeView Roles="DELETE.ROLES">
                                                    <li><a class="dropdown-item text-danger" href="#"
                                                            @onclick="() => DeleteRole(role.RoleId)"
                                                            @onclick:preventDefault="true">Xóa</a></li>
                                                    </AuthorizeView>

                                                </ul>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="d-flex align-items-center mb-3">
                                                <div class="avatar-circle bg-success text-white me-3">
                                                    <i class="fas fa-user-tag"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">@role.RoleName</h6>
                                                    <small class="text-muted">@role.RoleId</small>
                                                </div>
                                            </div>
                                            <div class="mb-2">
                                                <span class="badge @GetRoleStatusBadgeClass(role.IsActive)">
                                                    @(role.IsActive ? "Hoạt động" : "Không hoạt động")
                                                </span>
                                            </div>
                                            <div class="row text-center">
                                                <div class="col-6">
                                                    <div class="border-end">
                                                        <div class="h5 mb-0 text-primary">@role.UserCount</div>
                                                        <small class="text-muted">Thành viên</small>
                                                    </div>
                                                </div>
                                                <div class="col-6">
                                                    <div class="h5 mb-0 text-info">@role.PermissionCount</div>
                                                    <small class="text-muted">Quyền hạn</small>
                                                </div>
                                            </div>
                                            @if (role.Permissions?.Any() == true)
                                            {
                                                <div class="mt-3">
                                                    <small class="text-muted">Một số quyền hạn:</small>
                                                    <div class="mt-1">
                                                        @foreach (var permission in role.Permissions.Take(2))
                                                        {
                                                            <span class="badge bg-light text-dark me-1 mb-1">
                                                                @permission
                                                            </span>
                                                        }
                                                        @if (role.Permissions.Count > 2)
                                                        {
                                                            <span class="badge bg-secondary">+@(role.Permissions.Count - 2) khác</span>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <div class="card-footer bg-light">
                                            <small class="text-muted">
                                                <i class="fas fa-info-circle me-1"></i>
                                                ID: @role.RoleId
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col-12">
                                <div class="alert alert-info text-center">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Không tìm thấy vai trò nào.
                                </div>
                            </div>
                        }
                    }
                    else if (currentView == "usergroups")
                    {
                        @if (groups?.Any() == true)
                        {
                            @foreach (var group in groups)
                            {
                                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                                    <div class="card h-100 shadow-sm">
                                        <div
                                            class="card-header bg-warning text-dark d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0">Nhóm người dùng</h6>
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-outline-dark dropdown-toggle" type="button"
                                                    id="dropdownMenuButton@(group.GroupId)" data-bs-toggle="dropdown"
                                                    aria-expanded="false">
                                                    <i class="fas fa-ellipsis-v"></i>
                                                </button>
                                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton@(group.GroupId)">
                                                    <AuthorizeView Roles="UPDATE.GROUPS">
                                                    <li><a class="dropdown-item" href="#"
                                                            @onclick="() => EditGroup(group.GroupId)">Chỉnh sửa</a></li>
                                                    </AuthorizeView>
                                                  
                                                    <AuthorizeView Roles="READ.GROUPS,READ.USERS">
                                                    <li><a class="dropdown-item" href="#"
                                                            @onclick="() => ViewUsersInGroup(group.GroupId)">Xem thành viên</a></li>
                                                    </AuthorizeView>
                                                    <li>
                                                        <hr class="dropdown-divider">
                                                    </li>
                                                    <AuthorizeView Roles="DELETE.GROUPS">
                                                    <li><a class="dropdown-item text-danger" href="#"
                                                            @onclick="() => DeleteGroup(group.GroupId)"
                                                            @onclick:preventDefault="true">Xóa</a></li>
                                                    </AuthorizeView>
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="d-flex align-items-center mb-3">
                                                <div class="avatar-circle bg-warning text-dark me-3">
                                                    <i class="fas fa-users"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">@group.GroupName</h6>
                                                    <small class="text-muted">@group.GroupId</small>
                                                </div>
                                            </div>
                                            <div class="mb-2">
                                                <span class="badge @(group.IsActive ? "bg-success" : "bg-danger")">
                                                    @(group.IsActive ? "Hoạt động" : "Không hoạt động")
                                                </span>
                                            </div>
                                            <div class="row text-center">
                                                <div class="col-6">
                                                    <div class="border-end">
                                                        <div class="h5 mb-0 text-primary">@group.UserCount</div>
                                                        <small class="text-muted">Thành viên</small>
                                                    </div>
                                                </div>
                                                <div class="col-6">
                                                    <div class="h5 mb-0 text-info">@group.RoleCount</div>
                                                    <small class="text-muted">Vai trò</small>
                                                </div>
                                            </div>
                                            @if (!string.IsNullOrEmpty(group.TimeActiveId))
                                            {
                                                <div class="mt-3">
                                                    <small class="text-muted">
                                                        <i class="fas fa-clock me-1"></i>
                                                        Time Active: @group.TimeActiveId
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                        <div class="card-footer bg-light">
                                            <small class="text-muted">
                                                @if (group.UpdatedAt.HasValue)
                                                {
                                                    <span>Cập nhật: @group.UpdatedAt.Value.ToString("dd/MM/yyyy")</span>
                                                }
                                                else if (group.CreatedAt.HasValue)
                                                {
                                                    <span>Tạo: @group.CreatedAt.Value.ToString("dd/MM/yyyy")</span>
                                                }
                                                else
                                                {
                                                    <span>ID: @group.GroupId</span>
                                                }
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col-12">
                                <div class="alert alert-info text-center">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Không tìm thấy nhóm người dùng nào.
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <!-- Placeholder for other views -->
                        <div class="col-12">
                            <div class="alert alert-warning text-center">
                                <i class="fas fa-construction me-2"></i>
                                Chức năng này đang được phát triển.
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Pagination -->
        @if ((currentView == "users" || currentView == "roles" || currentView == "usergroups") && pagination != null && pagination.TotalPages > 1)
        {
            <div class="row mt-4">
                <div class="col-12">
                    <nav aria-label="Phân trang">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(pagination.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" href="#" @onclick="() => LoadPage(pagination.CurrentPage - 1)"
                                    @onclick:preventDefault="true" tabindex="-1">Trước</a>
                            </li>

                           @{
                                int startPage = Math.Max(1, pagination.CurrentPage - 2);
                                int endPage = Math.Min(pagination.TotalPages, pagination.CurrentPage + 2);
                            }
                            @for (int pageNum = startPage; pageNum <= endPage; pageNum++)
                            {
                                int currentPageNum = pageNum;
                                <li class="page-item @(currentPageNum == pagination.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="#" @onclick="() => LoadPage(currentPageNum)" @onclick:preventDefault="true">@currentPageNum</a>
                                </li>
                            }

                            <li class="page-item @(pagination.HasNextPage ? "" : "disabled")">
                                <a class="page-link" href="#" @onclick="() => LoadPage(pagination.CurrentPage + 1)"
                                    @onclick:preventDefault="true">Sau</a>
                            </li>
                        </ul>
                    </nav>
                    <div class="text-center mt-2">
                        <small class="text-muted">
                            Hiển thị @((pagination.CurrentPage - 1) * pagination.PageSize + 1) -
                            @(Math.Min(pagination.CurrentPage * pagination.PageSize, pagination.TotalCount))
                            trong tổng số @pagination.TotalCount kết quả
                        </small>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    // Data properties
    private List<UserInfoDto>? users = new();
    private List<RoleInfoDto>? roles = new();
    private List<GroupInfoDto>? groups = new();
    private List<GroupInfoDto>? availableGroups = new();
    private string currentView = "users";
    private string searchTerm = "";
    private bool isLoading = false;
    private UsersPaginationInfo? pagination;
    private RolesPaginationInfo? rolesPagination;
    private GroupsPaginationInfo? groupsPagination;
    private Timer? searchTimer;

    // Advanced filter properties
    private bool showAdvancedFilter = false;
    private UserSearchDto userSearchDto = new UserSearchDto
    {
        SortBy = "CreateAt",
        SortDirection = "desc"
    };
    private RoleSearchDto roleSearchDto = new RoleSearchDto
    {
        SortBy = "RoleId",
        SortDirection = "asc"
    };
    private GroupSearchDto groupSearchDto = new GroupSearchDto
    {
        SortBy = "GroupId",
        SortDirection = "asc"
    };

    // Date helpers for date inputs
    private DateTime? userCreatedFromDate;
    private DateTime? userCreatedToDate;
    private DateTime? groupCreatedFromDate;
    private DateTime? groupCreatedToDate;

    // Helper properties for string binding with select elements
    private string roleIsActiveString
    {
        get => roleSearchDto.IsActive?.ToString().ToLower() ?? "";
        set
        {
            if (string.IsNullOrEmpty(value))
                roleSearchDto.IsActive = null;
            else if (bool.TryParse(value, out bool result))
                roleSearchDto.IsActive = result;
        }
    }

    private string groupIsActiveString
    {
        get => groupSearchDto.IsActive?.ToString().ToLower() ?? "";
        set
        {
            if (string.IsNullOrEmpty(value))
                groupSearchDto.IsActive = null;
            else if (bool.TryParse(value, out bool result))
                groupSearchDto.IsActive = result;
        }
    }

    public class FilterTag
    {
        public string Label { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentView();
    }

    private async Task LoadCurrentView()
    {
        switch (currentView)
        {
            case "users":
                await LoadUsers();
                break;
            case "roles":
                await LoadRoles();
                break;
            case "usergroups":
                await LoadGroups();
                break;
        }
    }

    private async Task OnViewChanged()
    {
        await LoadCurrentView();
        StateHasChanged();
    }

    private async Task LoadUsers(int pageNumber = 1, string? searchTerm = null)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await UserApi.GetAllUsersAsync(pageNumber, 12, searchTerm);

            if (response.IsSuccess && response.Data != null)
            {
                users = response.Data.Users;
                pagination = response.Data.Pagination;
                rolesPagination = null; // Clear roles pagination when loading users
            }
            else
            {
                // Handle error - could show a toast notification
                Console.WriteLine($"Error loading users: {response.Message}");
                users = new List<UserInfoDto>();

                // Show error message to user if needed
                await JSRuntime.InvokeVoidAsync("console.error", $"Failed to load users: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            // Handle error - could show a toast notification
            Console.WriteLine($"Exception loading users: {ex.Message}");
            users = new List<UserInfoDto>();
            await JSRuntime.InvokeVoidAsync("console.error", $"Exception loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadRoles(int pageNumber = 1, string? searchTerm = null)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await RoleApi.GetRolesWithUserCountAsync(pageNumber, 12, searchTerm, true);

            if (response.IsSuccess && response.Data != null)
            {
                // Map RoleWithUserCountDto to RoleInfoDto
                roles = response.Data.Roles.Select(r => new RoleInfoDto
                {
                    RoleId = r.RoleId,
                    RoleName = r.RoleName,
                    IsActive = r.IsActive,
                    Permissions = r.Permissions,
                    UserCount = r.UserCount
                }).ToList();

                rolesPagination = response.Data.Pagination;
                pagination = new UsersPaginationInfo
                {
                    CurrentPage = rolesPagination.CurrentPage,
                    PageSize = rolesPagination.PageSize,
                    TotalCount = rolesPagination.TotalCount,
                    TotalPages = rolesPagination.TotalPages,
                    HasNextPage = rolesPagination.HasNextPage,
                    HasPreviousPage = rolesPagination.HasPreviousPage
                };
            }
            else
            {
                // Handle error
                Console.WriteLine($"Error loading roles: {response.Message}");
                roles = new List<RoleInfoDto>();
                await JSRuntime.InvokeVoidAsync("console.error", $"Failed to load roles: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Exception loading roles: {ex.Message}");
            roles = new List<RoleInfoDto>();
            await JSRuntime.InvokeVoidAsync("console.error", $"Exception loading roles: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadGroups(int pageNumber = 1, string? searchTerm = null)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await GroupApi.GetGroupsWithUserCountAsync(pageNumber, 12, searchTerm, true);

            if (response.IsSuccess && response.Data != null)
            {
                // Map GroupWithUserCountDto to GroupInfoDto
                groups = response.Data.Groups.Select(g => new GroupInfoDto
                {
                    GroupId = g.GroupId,
                    GroupName = g.GroupName,
                    TimeActiveId = g.TimeActiveId,
                    IsActive = g.IsActive,
                    UserCount = g.UserCount,
                    RoleCount = g.RoleCount,
                    CreatedAt = g.CreatedAt,
                    UpdatedAt = g.UpdatedAt
                }).ToList();

                groupsPagination = response.Data.Pagination;
                pagination = new UsersPaginationInfo
                {
                    CurrentPage = groupsPagination.CurrentPage,
                    PageSize = groupsPagination.PageSize,
                    TotalCount = groupsPagination.TotalCount,
                    TotalPages = groupsPagination.TotalPages,
                    HasNextPage = groupsPagination.HasNextPage,
                    HasPreviousPage = groupsPagination.HasPreviousPage
                };
            }
            else
            {
                // Handle error
                Console.WriteLine($"Error loading groups: {response.Message}");
                groups = new List<GroupInfoDto>();
                await JSRuntime.InvokeVoidAsync("console.error", $"Failed to load groups: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Exception loading groups: {ex.Message}");
            groups = new List<GroupInfoDto>();
            await JSRuntime.InvokeVoidAsync("console.error", $"Exception loading groups: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        currentView = e.Value?.ToString() ?? "users";

        if (currentView == "users")
        {
            await LoadUsers();
        }
        else if (currentView == "roles")
        {
            await LoadRoles();
        }
        else if (currentView == "usergroups")
        {
            await LoadGroups();
        }
        else
        {
            // Clear data when switching to other views
            users = new List<UserInfoDto>();
            roles = new List<RoleInfoDto>();
            groups = new List<GroupInfoDto>();
            pagination = null;
            rolesPagination = null;
            groupsPagination = null;
        }

        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";

        // Debounce search to avoid too many API calls
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            if (currentView == "users")
            {
                await InvokeAsync(async () => await LoadUsers(1, searchTerm));
            }
            else if (currentView == "roles")
            {
                await InvokeAsync(async () => await LoadRoles(1, searchTerm));
            }
            else if (currentView == "usergroups")
            {
                await InvokeAsync(async () => await LoadGroups(1, searchTerm));
            }
        }, null, 500, Timeout.Infinite);
    }

    private async Task LoadPage(int pageNumber)
    {
        if (pageNumber < 1 || (pagination != null && pageNumber > pagination.TotalPages))
            return;

        if (currentView == "users")
        {
            await LoadUsers(pageNumber, searchTerm);
        }
        else if (currentView == "roles")
        {
            await LoadRoles(pageNumber, searchTerm);
        }
        else if (currentView == "usergroups")
        {
            await LoadGroups(pageNumber, searchTerm);
        }
    }

    private string GetStatusBadgeClass(short userStatus)
    {
        return userStatus switch
        {
            0 => "bg-warning", // Cần đổi MK
            1 => "bg-success", // Active
            2 => "bg-secondary", // Tạm khóa
            3 => "bg-info", // Cần reset MK
            -1 => "bg-danger", // Khóa vĩnh viễn
            -2 => "bg-dark", // Đã xóa
            _ => "bg-light text-dark" // Không xác định
        };
    }

    private string GetRoleStatusBadgeClass(bool isActive)
    {
        return isActive ? "bg-success" : "bg-danger";
    }

    private string GetAddButtonTooltip()
    {
        return currentView.ToLower() switch
        {
            "users" => "Thêm người dùng mới",
            "roles" => "Thêm vai trò mới",
            "usergroups" => "Thêm nhóm người dùng mới",
            _ => "Thêm mới"
        };
    }

    private string GetAddButtonText()
    {
        return currentView.ToLower() switch
        {
            "users" => "Thêm User",
            "roles" => "Thêm Role",
            "usergroups" => "Thêm Group",
            _ => "Thêm mới"
        };
    }

    private void NavigateToAddPage()
    {
        switch (currentView.ToLower())
        {
            case "users":
                Navigation.NavigateTo("/accountAuthManage/AddUser");
                break;
            case "roles":
                Navigation.NavigateTo("/accountAuthManage/addrole");
                break;
            case "usergroups":
                Navigation.NavigateTo("/AccountAuthManage/AddGroup");
                break;
            default:
                // Default to users if unknown view
                Navigation.NavigateTo("/accountAuthManage/AddUser");
                break;
        }
    }

    // private async Task ViewUserDetail(Guid userId)
    // {
    //     Navigate to user detail page or open modal
    //     This can be implemented based on your routing structure
    //     await JSRuntime.InvokeVoidAsync("console.log", $"View user detail: {userId}");
    // }

    private void EditUser(Guid userId)
    {
        // Navigate to edit user page with userId parameter
        Navigation.NavigateTo($"/accountAuthManage/edituser?userId={userId}");
    }

    private async Task DeleteUser(Guid userId)
    {
        // Show confirmation dialog and delete user
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa người dùng này?");

        if (confirmed)
        {
            try
            {
                var response = await UserApi.DeleteUserAsync(userId);
                if (response.IsSuccess)
                {
                    // Reload current page
                    await LoadUsers(pagination?.CurrentPage ?? 1, searchTerm);
                    await JSRuntime.InvokeVoidAsync("alert", "Xóa người dùng thành công!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Có lỗi xảy ra khi xóa người dùng: {response.Message}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
            }
        }
    }

    // Role-related methods
    // private async Task ViewRoleDetail(string roleId)
    // {
    //     Navigate to role detail page or open modal
    //     await JSRuntime.InvokeVoidAsync("console.log", $"View role detail: {roleId}");
    // }

    private void EditRoleLink(string roleId)
    {
        // Navigate to edit role page or open modal
        Navigation.NavigateTo($"/accountAuthManage/editrole/{roleId}");

    }

    private void ViewUsersInRole(string roleId)
    {
        // Navigate to users in role page or open modal    /accountAuthManage/role/{RoleId}/users
        Navigation.NavigateTo($"/accountAuthManage/role/{roleId}/users");

    }

    private async Task DeleteRole(string roleId)
    {
        // Show confirmation dialog and delete role
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa vai trò này?");

        if (confirmed)
        {
            try
            {
                var response = await RoleApi.DeleteRoleAsync(roleId);
                if (response.IsSuccess)
                {
                    // Reload current page
                    await LoadRoles(rolesPagination?.CurrentPage ?? 1, searchTerm);
                    await JSRuntime.InvokeVoidAsync("alert", "Xóa vai trò thành công!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Có lỗi xảy ra khi xóa vai trò: {response.Message}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
            }
        }
    }

    // Group-related methods
    // private async Task ViewGroupDetail(string groupId)
    // {
    //     Navigate to group detail page or open modal
    //     await JSRuntime.InvokeVoidAsync("console.log", $"View group detail: {groupId}");
    // }

    private void EditGroup(string groupId)
    {
        // Navigate to edit group page
        Navigation.NavigateTo($"/accountAuthManage/editgroup/{groupId}");
    }

    private void ViewUsersInGroup(string groupId)
    {
        // Navigate to users in group page
        Navigation.NavigateTo($"/accountAuthManage/group/{groupId}/users");
    }

    private async Task DeleteGroup(string groupId)
    {
        // Show confirmation dialog and delete group
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa nhóm người dùng này?");

        if (confirmed)
        {
            try
            {
                var response = await GroupApi.DeleteGroupAsync(groupId);
                if (response.IsSuccess)
                {
                    // Reload current page
                    await LoadGroups(groupsPagination?.CurrentPage ?? 1, searchTerm);
                    await JSRuntime.InvokeVoidAsync("alert", "Xóa nhóm người dùng thành công!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Có lỗi xảy ra khi xóa nhóm người dùng: {response.Message}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
            }
        }
    }

    // Advanced filter methods
    private bool HasActiveFilters()
    {
        switch (currentView)
        {
            case "users":
                return !string.IsNullOrEmpty(userSearchDto.SearchTerm) ||
                       userSearchDto.UserStatus.HasValue ||
                       !string.IsNullOrEmpty(userSearchDto.Department) ||
                       !string.IsNullOrEmpty(userSearchDto.GroupId) ||
                       !string.IsNullOrEmpty(userSearchDto.CreatedFrom) ||
                       !string.IsNullOrEmpty(userSearchDto.CreatedTo);
            case "roles":
                return !string.IsNullOrEmpty(roleSearchDto.SearchTerm) ||
                       roleSearchDto.IsActive.HasValue ||
                       roleSearchDto.MinUserCount.HasValue ||
                       roleSearchDto.MaxUserCount.HasValue;
            case "usergroups":
                return !string.IsNullOrEmpty(groupSearchDto.SearchTerm) ||
                       groupSearchDto.IsActive.HasValue ||
                       !string.IsNullOrEmpty(groupSearchDto.TimeActiveId) ||
                       groupSearchDto.CreatedFrom.HasValue ||
                       groupSearchDto.CreatedTo.HasValue;
            default:
                return false;
        }
    }

    private int GetActiveFiltersCount()
    {
        switch (currentView)
        {
            case "users":
                return (string.IsNullOrEmpty(userSearchDto.SearchTerm) ? 0 : 1) +
                       (userSearchDto.UserStatus.HasValue ? 1 : 0) +
                       (string.IsNullOrEmpty(userSearchDto.Department) ? 0 : 1) +
                       (string.IsNullOrEmpty(userSearchDto.GroupId) ? 0 : 1) +
                       (string.IsNullOrEmpty(userSearchDto.CreatedFrom) ? 0 : 1) +
                       (string.IsNullOrEmpty(userSearchDto.CreatedTo) ? 0 : 1);
            case "roles":
                return (string.IsNullOrEmpty(roleSearchDto.SearchTerm) ? 0 : 1) +
                       (roleSearchDto.IsActive.HasValue ? 1 : 0) +
                       (roleSearchDto.MinUserCount.HasValue ? 1 : 0) +
                       (roleSearchDto.MaxUserCount.HasValue ? 1 : 0);
            case "usergroups":
                return (string.IsNullOrEmpty(groupSearchDto.SearchTerm) ? 0 : 1) +
                       (groupSearchDto.IsActive.HasValue ? 1 : 0) +
                       (string.IsNullOrEmpty(groupSearchDto.TimeActiveId) ? 0 : 1) +
                       (groupSearchDto.CreatedFrom.HasValue ? 1 : 0) +
                       (groupSearchDto.CreatedTo.HasValue ? 1 : 0);
            default:
                return 0;
        }
    }

    private List<FilterTag> GetActiveFilterTags()
    {
        var tags = new List<FilterTag>();
        
        switch (currentView)
        {
            case "users":
                if (!string.IsNullOrEmpty(userSearchDto.SearchTerm))
                    tags.Add(new FilterTag { Label = $"Từ khóa: {userSearchDto.SearchTerm}", Type = "searchterm" });
                if (userSearchDto.UserStatus.HasValue)
                    tags.Add(new FilterTag { Label = $"Trạng thái: {userSearchDto.UserStatus.Value}", Type = "status" });
                if (!string.IsNullOrEmpty(userSearchDto.Department))
                    tags.Add(new FilterTag { Label = $"Phòng ban: {userSearchDto.Department}", Type = "department" });
                if (!string.IsNullOrEmpty(userSearchDto.GroupId))
                    tags.Add(new FilterTag { Label = $"Nhóm: {userSearchDto.GroupId}", Type = "group" });
                if (!string.IsNullOrEmpty(userSearchDto.CreatedFrom))
                    tags.Add(new FilterTag { Label = $"Từ ngày: {userSearchDto.CreatedFrom}", Type = "datefrom" });
                if (!string.IsNullOrEmpty(userSearchDto.CreatedTo))
                    tags.Add(new FilterTag { Label = $"Đến ngày: {userSearchDto.CreatedTo}", Type = "dateto" });
                break;
            case "roles":
                if (!string.IsNullOrEmpty(roleSearchDto.SearchTerm))
                    tags.Add(new FilterTag { Label = $"Từ khóa: {roleSearchDto.SearchTerm}", Type = "searchterm" });
                if (roleSearchDto.IsActive.HasValue)
                    tags.Add(new FilterTag { Label = $"Trạng thái: {(roleSearchDto.IsActive.Value ? "Hoạt động" : "Không hoạt động")}", Type = "status" });
                if (roleSearchDto.MinUserCount.HasValue)
                    tags.Add(new FilterTag { Label = $"Tối thiểu user: {roleSearchDto.MinUserCount.Value}", Type = "minuser" });
                if (roleSearchDto.MaxUserCount.HasValue)
                    tags.Add(new FilterTag { Label = $"Tối đa user: {roleSearchDto.MaxUserCount.Value}", Type = "maxuser" });
                break;
            case "usergroups":
                if (!string.IsNullOrEmpty(groupSearchDto.SearchTerm))
                    tags.Add(new FilterTag { Label = $"Từ khóa: {groupSearchDto.SearchTerm}", Type = "searchterm" });
                if (groupSearchDto.IsActive.HasValue)
                    tags.Add(new FilterTag { Label = $"Trạng thái: {(groupSearchDto.IsActive.Value ? "Hoạt động" : "Không hoạt động")}", Type = "status" });
                if (!string.IsNullOrEmpty(groupSearchDto.TimeActiveId))
                    tags.Add(new FilterTag { Label = $"Thời gian hoạt động: {groupSearchDto.TimeActiveId}", Type = "timeactive" });
                if (groupSearchDto.CreatedFrom.HasValue)
                    tags.Add(new FilterTag { Label = $"Từ ngày: {groupSearchDto.CreatedFrom.Value:dd/MM/yyyy}", Type = "datefrom" });
                if (groupSearchDto.CreatedTo.HasValue)
                    tags.Add(new FilterTag { Label = $"Đến ngày: {groupSearchDto.CreatedTo.Value:dd/MM/yyyy}", Type = "dateto" });
                break;
        }

        return tags;
    }

    

    private async Task ResetFilters()
    {
        switch (currentView)
        {
            case "users":
                ResetUserFilters();
                break;
            case "roles":
                ResetRoleFilters();
                break;
            case "usergroups":
                ResetGroupFilters();
                break;
        }

        await ApplyFilters();
    }

    private void ResetUserFilters()
    {
        userSearchDto = new UserSearchDto
        {
            SortBy = "CreateAt",
            SortDirection = "desc"
        };
        userCreatedFromDate = null;
        userCreatedToDate = null;
    }

    private void ResetRoleFilters()
    {
        roleSearchDto = new RoleSearchDto
        {
            SortBy = "RoleId",
            SortDirection = "asc"
        };
    }

    private void ResetGroupFilters()
    {
        groupSearchDto = new GroupSearchDto
        {
            SortBy = "GroupId",
            SortDirection = "asc"
        };
        groupCreatedFromDate = null;
        groupCreatedToDate = null;
    }

    private void ToggleAdvancedFilter()
    {
        showAdvancedFilter = !showAdvancedFilter;
        StateHasChanged();
    }

    private async Task ApplyFilters()
    {
        switch (currentView)
        {
            case "users":
                // Nếu có filter nâng cao, dùng SearchUsersAsync, nếu không dùng GetAllUsersAsync với searchTerm
                if (HasActiveFilters())
                {
                    await LoadUsersWithAdvancedFilter();
                }
                else
                {
                    await LoadUsers(1, searchTerm);
                }
                break;
            case "roles":
                if (HasActiveFilters())
                {
                    await LoadRolesWithAdvancedFilter();
                }
                else
                {
                    await LoadRoles(1, searchTerm);
                }
                break;
            case "usergroups":
                if (HasActiveFilters())
                {
                    await LoadGroupsWithAdvancedFilter();
                }
                else
                {
                    await LoadGroups(1, searchTerm);
                }
                break;
        }
    }

    private async Task LoadUsersWithAdvancedFilter()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await UserApi.SearchUsersAsync(userSearchDto);

            if (response != null)
            {
                users = response.Data.Users;
                pagination = response.Data.Pagination;
            }
            else
            {
                users = new List<UserInfoDto>();
                await JSRuntime.InvokeVoidAsync("console.error", "Failed to load users: No response");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception loading users: {ex.Message}");
            users = new List<UserInfoDto>();
            await JSRuntime.InvokeVoidAsync("console.error", $"Exception loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadRolesWithAdvancedFilter()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await RoleApi.SearchRolesAsync(roleSearchDto);

            if (response != null)
            {
                roles = response.Data.Roles;
                rolesPagination = response.Data.Pagination;
                pagination = new UsersPaginationInfo
                {
                    CurrentPage = rolesPagination.CurrentPage,
                    PageSize = rolesPagination.PageSize,
                    TotalCount = rolesPagination.TotalCount,
                    TotalPages = rolesPagination.TotalPages,
                    HasNextPage = rolesPagination.HasNextPage,
                    HasPreviousPage = rolesPagination.HasPreviousPage
                };
            }
            else
            {
                roles = new List<RoleInfoDto>();
                await JSRuntime.InvokeVoidAsync("console.error", "Failed to load roles: No response");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception loading roles: {ex.Message}");
            roles = new List<RoleInfoDto>();
            await JSRuntime.InvokeVoidAsync("console.error", $"Exception loading roles: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadGroupsWithAdvancedFilter()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await GroupApi.SearchGroupsAsync(groupSearchDto);

            if (response.IsSuccess && response.Data != null)
            {
                groups = response.Data.Groups;
                groupsPagination = response.Data.Pagination;
                pagination = new UsersPaginationInfo
                {
                    CurrentPage = groupsPagination.CurrentPage,
                    PageSize = groupsPagination.PageSize,
                    TotalCount = groupsPagination.TotalCount,
                    TotalPages = groupsPagination.TotalPages,
                    HasNextPage = groupsPagination.HasNextPage,
                    HasPreviousPage = groupsPagination.HasPreviousPage
                };
            }
            else
            {
                groups = new List<GroupInfoDto>();
                await JSRuntime.InvokeVoidAsync("console.error", $"Failed to load groups: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception loading groups: {ex.Message}");
            groups = new List<GroupInfoDto>();
            await JSRuntime.InvokeVoidAsync("console.error", $"Exception loading groups: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Date change handlers
    private void OnUserCreatedFromDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            userCreatedFromDate = date;
            userSearchDto.CreatedFrom = date.ToString("yyyy-MM-dd");
        }
        else
        {
            userCreatedFromDate = null;
            userSearchDto.CreatedFrom = null;
        }
    }

    private void OnUserCreatedToDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            userCreatedToDate = date;
            userSearchDto.CreatedTo = date.ToString("yyyy-MM-dd");
        }
        else
        {
            userCreatedToDate = null;
            userSearchDto.CreatedTo = null;
        }
    }

    private void OnGroupCreatedFromDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            groupCreatedFromDate = date;
            groupSearchDto.CreatedFrom = date;
        }
        else
        {
            groupCreatedFromDate = null;
            groupSearchDto.CreatedFrom = null;
        }
    }

    private void OnGroupCreatedToDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            groupCreatedToDate = date;
            groupSearchDto.CreatedTo = date;
        }
        else
        {
            groupCreatedToDate = null;
            groupSearchDto.CreatedTo = null;
        }
    }

    private async Task RemoveFilterTag(FilterTag tag)
    {
        switch (currentView)
        {
            case "users":
                switch (tag.Type)
                {
                    case "searchterm":
                        userSearchDto.SearchTerm = null;
                        break;
                    case "status":
                        userSearchDto.UserStatus = null;
                        break;
                    case "department":
                        userSearchDto.Department = null;
                        break;
                    case "group":
                        userSearchDto.GroupId = null;
                        break;
                    case "datefrom":
                        userSearchDto.CreatedFrom = null;
                        userCreatedFromDate = null;
                        break;
                    case "dateto":
                        userSearchDto.CreatedTo = null;
                        userCreatedToDate = null;
                        break;
                }
                break;
            case "roles":
                switch (tag.Type)
                {
                    case "searchterm":
                        roleSearchDto.SearchTerm = null;
                        break;
                    case "status":
                        roleSearchDto.IsActive = null;
                        break;
                    case "minuser":
                        roleSearchDto.MinUserCount = null;
                        break;
                    case "maxuser":
                        roleSearchDto.MaxUserCount = null;
                        break;
                }
                break;
            case "usergroups":
                switch (tag.Type)
                {
                    case "searchterm":
                        groupSearchDto.SearchTerm = null;
                        break;
                    case "status":
                        groupSearchDto.IsActive = null;
                        break;
                    case "timeactive":
                        groupSearchDto.TimeActiveId = null;
                        break;
                    case "datefrom":
                        groupSearchDto.CreatedFrom = null;
                        groupCreatedFromDate = null;
                        break;
                    case "dateto":
                        groupSearchDto.CreatedTo = null;
                        groupCreatedToDate = null;
                        break;
                }
                break;
        }

        await ApplyFilters();
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}

<style>
  
</style>
}        