@page "/accountAuthManage/editgroup/{groupId}"
@using Microsoft.AspNetCore.Authorization
@using Web_health_app.Web.Components.Layout
@using Web_health_app.Web.ApiClients
@using Web_health_app.Models.Models
@inject GroupApiClient GroupApiClient
@inject RoleApiClient RoleApiClient
@inject UserApiClient UserApiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@layout EmptyLayout
@attribute [Authorize(Roles = "ACCESS.EditGroup")]

<link href="/css/AccountAuthManage/edit-group.css" rel="stylesheet" />

<div class="edit-group-container">
    <div class="edit-group-card">
        <!-- Header -->
        <div class="card-header">
            <div class="header-content">
                <div class="header-icon">
                    <i class="fas fa-users-cog"></i>
                </div>
                <div class="header-text">
                    <h2>Chỉnh Sửa Nhóm Người Dùng</h2>
                    <p>Cập nhật thông tin và cài đặt nhóm</p>
                </div>
            </div>
            <button type="button" class="btn-close" @onclick="@(() => Navigation.NavigateTo("/accountauthmanage"))">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <!-- Form Content -->
        <div class="card-body">
            @if (isLoading)
            {
                <div class="loading-spinner">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                    <p class="loading-text">Đang tải thông tin nhóm...</p>
                </div>
            }
            else if (groupDetail == null)
            {
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>Không tìm thấy thông tin nhóm</p>
                    <button type="button" class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/account-auth-manage"))">
                        Quay lại
                    </button>
                </div>
            }
            else
            {
                <form class="edit-group-form" @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                    <!-- Current Group Info Display -->
                    <div class="form-section">
                        <h4 class="section-title">
                            <i class="fas fa-info-circle"></i>
                            Thông tin hiện tại
                        </h4>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-clock"></i>
                                    Ngày tạo
                                </label>
                                <div class="info-display">
                                    <i class="fas fa-calendar-plus"></i>
                                    @(groupDetail.CreatedAt?.ToString("dd/MM/yyyy - HH:mm") ?? "Không có thông tin")
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-sync-alt"></i>
                                    Lần cập nhật cuối
                                </label>
                                <div class="info-display">
                                    <i class="fas fa-calendar-edit"></i>
                                    @(groupDetail.UpdatedAt?.ToString("dd/MM/yyyy - HH:mm") ?? "Chưa cập nhật")
                                </div>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-toggle-on"></i>
                                    Trạng thái hiện tại
                                </label>
                                <div class="status-badge @(groupDetail.IsActive ? "active" : "inactive")">
                                    <i class="fas @(groupDetail.IsActive ? "fa-check-circle" : "fa-times-circle")"></i>
                                    @(groupDetail.IsActive ? "Đang hoạt động" : "Không hoạt động")
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-users"></i>
                                    Số thành viên
                                </label>
                                <div class="info-display">
                                    <i class="fas fa-user-friends"></i>
                                    @groupDetail.Users.Count người dùng
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Group Information Section -->
                    <div class="form-section">
                        <h4 class="section-title">
                            <i class="fas fa-edit"></i>
                            Thông Tin Nhóm
                        </h4>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-hashtag"></i>
                                    Mã Nhóm
                                </label>
                                <input type="text" class="form-control" value="@groupDetail.GroupId" readonly />
                                <small class="form-text">Mã nhóm không thể thay đổi</small>
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-tag"></i>
                                    Tên Nhóm <span class="required">*</span>
                                </label>
                                <input type="text" class="form-control @(validationErrors.ContainsKey("GroupName") ? "is-invalid" : "")" 
                                       @bind="updateGroupDto.GroupName" 
                                       placeholder="Nhập tên nhóm (tối đa 200 ký tự)" maxlength="200" required />
                                @if (validationErrors.ContainsKey("GroupName"))
                                {
                                    <div class="invalid-feedback">@validationErrors["GroupName"]</div>
                                }
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-clock"></i>
                                    Thời Gian Hoạt Động
                                </label>
                                <input type="text" class="form-control" @bind="updateGroupDto.TimeActiveId"
                                       placeholder="VD: 08:00-18:00, 24/7, Theo ca..." maxlength="50" />
                                <small class="form-text">Mô tả thời gian nhóm có thể hoạt động</small>
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-toggle-on"></i>
                                    Trạng Thái
                                </label>
                                <div class="status-toggle">
                                    <input type="checkbox" id="isActive" @bind="updateGroupDto.IsActive" class="toggle-input" />
                                    <label for="isActive" class="toggle-label">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">@(updateGroupDto.IsActive ? "Hoạt động" : "Không hoạt động")</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Group Roles Section -->
                    <div class="form-section">
                        <div class="section-header">
                            <h4 class="section-title">
                                <i class="fas fa-user-tag"></i>
                                Quyền của Nhóm
                            </h4>
                            <small class="text-muted">Quản lý các quyền được gán cho nhóm này</small>
                        </div>

                        <!-- Current Roles -->
                        <div class="current-roles-section">
                            <h5 class="subsection-title">
                                <i class="fas fa-list"></i>
                                Quyền hiện tại (@currentGroupRoles.Count)
                            </h5>
                            
                            @if (currentGroupRoles.Any())
                            {
                                <div class="current-roles-grid">
                                    @foreach (var role in currentGroupRoles)
                                    {
                                        <div class="current-role-item">
                                            <div class="role-info">
                                                <div class="role-avatar">
                                                    <i class="fas fa-user-tag"></i>
                                                </div>
                                                <div class="role-details">
                                                    <h6 class="role-name">@role.RoleName</h6>
                                                    @if (!string.IsNullOrEmpty(role.RoleName))
                                                    {
                                                        <small class="role-description">@role.RoleName</small>
                                                    }
                                                    <div class="role-meta">
                                                        @if (role.IsActive)
                                                        {
                                                            <span class="badge bg-success">Hoạt động</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary">Không hoạt động</span>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                            <button type="button" class="btn-remove-role" @onclick="@(() => RemoveRoleFromGroup(role.RoleId))"
                                                    disabled="@isSubmitting">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="no-data">
                                    <i class="fas fa-user-tag"></i>
                                    <p>Nhóm này chưa có quyền nào</p>
                                </div>
                            }
                        </div>

                        <!-- Add New Roles -->
                        <div class="add-roles-section">
                            <h5 class="subsection-title">
                                <i class="fas fa-plus"></i>
                                Thêm quyền mới
                            </h5>

                            <!-- Search Available Roles -->
                            <div class="search-box">
                                <div class="search-input-wrapper">
                                    <i class="fas fa-search search-icon"></i>
                                    <input type="text" class="form-control search-input" 
                                           placeholder="Tìm kiếm quyền để thêm..." 
                                           @bind="roleSearchTerm" 
                                           @oninput="@(() => FilterAvailableRoles())" />
                                    @if (!string.IsNullOrEmpty(roleSearchTerm))
                                    {
                                        <button type="button" class="clear-search" @onclick="@(() => { roleSearchTerm = string.Empty; FilterAvailableRoles(); })">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    }
                                </div>
                            </div>

                            @if (filteredAvailableRoles.Any())
                            {
                                <div class="available-roles-grid">
                                    @foreach (var role in filteredAvailableRoles.Take(10))
                                    {
                                        <div class="available-role-item @(selectedNewRoleIds.Contains(role.RoleId) ? "selected" : "")">
                                            <label class="role-checkbox">
                                                <input type="checkbox" 
                                                       @onchange="@((e) => ToggleNewRoleSelection(role.RoleId, (bool)e.Value!))"
                                                       checked="@selectedNewRoleIds.Contains(role.RoleId)" />
                                                <span class="checkmark"></span>
                                                <div class="role-info">
                                                    <div class="role-avatar">
                                                        <i class="fas fa-user-tag"></i>
                                                    </div>
                                                    <div class="role-details">
                                                        <h6 class="role-name">@role.RoleName</h6>
                                                        @if (!string.IsNullOrEmpty(role.RoleName))
                                                        {
                                                            <small class="role-description">@role.RoleName</small>
                                                        }
                                                        <div class="role-meta">
                                                            @if (role.IsActive)
                                                            {
                                                                <span class="badge bg-success">Hoạt động</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-secondary">Không hoạt động</span>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </label>
                                        </div>
                                    }
                                </div>

                                @if (selectedNewRoleIds.Any())
                                {
                                    <div class="selected-info">
                                        <i class="fas fa-check-circle text-success"></i>
                                        Đã chọn <strong>@selectedNewRoleIds.Count</strong> quyền để thêm
                                        <button type="button" class="btn btn-sm btn-success ms-2" @onclick="AddSelectedRolesToGroup"
                                                disabled="@isSubmitting">
                                            <i class="fas fa-plus"></i>
                                            Thêm quyền đã chọn
                                        </button>
                                    </div>
                                }
                            }
                            else if (!string.IsNullOrEmpty(roleSearchTerm))
                            {
                                <div class="no-data">
                                    <i class="fas fa-search"></i>
                                    <p>Không tìm thấy quyền nào phù hợp</p>
                                </div>
                            }
                            else
                            {
                                <div class="no-data">
                                    <i class="fas fa-user-tag"></i>
                                    <p>Tất cả quyền đã được gán cho nhóm này</p>
                                </div>
                            }
                        </div>
                    </div>
                </form>
            }
        </div>

        <!-- Footer Actions -->
        <div class="card-footer">
            <div class="action-buttons">
                <button type="button" class="btn btn-cancel" @onclick="@(() => Navigation.NavigateTo("/accountauthmanage"))" disabled="@isSubmitting">
                    <i class="fas fa-times"></i>
                    Hủy bỏ
                </button>
                <button type="button" class="btn btn-reset" @onclick="ResetForm" disabled="@isSubmitting">
                    <i class="fas fa-undo"></i>
                    Khôi phục
                </button>
                <button type="submit" class="btn btn-primary" @onclick="HandleSubmit" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Đang cập nhật...</span>
                    }
                    else
                    {
                        <i class="fas fa-save"></i>
                        <span>Cập nhật nhóm</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>
                




@code {
    [Parameter] public string GroupId { get; set; } = string.Empty;

    private GroupDetailDto? groupDetail;
    private UpdateGroupDto updateGroupDto = new();
    private List<RoleInfoDto> allRoles = new();
    private List<RoleInfoDto> currentGroupRoles = new();
    private List<RoleInfoDto> availableRoles = new();
    private List<RoleInfoDto> filteredAvailableRoles = new();
    private HashSet<string> selectedNewRoleIds = new();

    private string roleSearchTerm = string.Empty;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private Dictionary<string, string> validationErrors = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadGroupData();
        await LoadAllRoles();
        FilterAvailableRoles();
    }

    private async Task LoadGroupData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var result = await GroupApiClient.GetGroupDetailAsync(GroupId);
            if (result.IsSuccess && result.Data != null)
            {
                groupDetail = result.Data;
                currentGroupRoles = groupDetail.Roles.ToList();
                
                // Initialize UpdateGroupDto with current values
                updateGroupDto = new UpdateGroupDto
                {
                    GroupName = groupDetail.GroupName,
                    TimeActiveId = groupDetail.TimeActiveId,
                    IsActive = groupDetail.IsActive
                };
            }
            else
            {
                await ShowToast($"Lỗi khi tải thông tin nhóm: {result.Message}", "error");
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Lỗi không mong muốn: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAllRoles()
    {
        try
        {
            var result = await RoleApiClient.GetAllRolesAsync(1, 1000);
            if (result.IsSuccess && result.Data != null)
            {
                allRoles = result.Data.Roles.ToList();
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Lỗi khi tải danh sách quyền: {ex.Message}", "error");
        }
    }

    private void FilterAvailableRoles()
    {
        var currentRoleIds = currentGroupRoles.Select(r => r.RoleId).ToHashSet();
        availableRoles = allRoles.Where(r => !currentRoleIds.Contains(r.RoleId) && r.IsActive).ToList();

        if (string.IsNullOrWhiteSpace(roleSearchTerm))
        {
            filteredAvailableRoles = availableRoles.ToList();
        }
        else
        {
            var searchTerm = roleSearchTerm.ToLower();
            filteredAvailableRoles = availableRoles
                .Where(r => r.RoleName.ToLower().Contains(searchTerm) ||
                           (!string.IsNullOrEmpty(r.RoleName) && r.RoleName.ToLower().Contains(searchTerm)))
                .ToList();
        }
        StateHasChanged();
    }

    private void ToggleNewRoleSelection(string roleId, bool isSelected)
    {
        if (isSelected)
        {
            selectedNewRoleIds.Add(roleId);
        }
        else
        {
            selectedNewRoleIds.Remove(roleId);
        }
        StateHasChanged();
    }

    private async Task AddSelectedRolesToGroup()
    {
        if (!selectedNewRoleIds.Any()) return;

        try
        {
            isSubmitting = true;
            StateHasChanged();

            var result = await GroupApiClient.AddRolesToGroupAsync(GroupId, selectedNewRoleIds.ToList());
            if (result.IsSuccess)
            {
                await ShowToast($"Đã thêm {selectedNewRoleIds.Count} quyền vào nhóm", "success");
                
                // Refresh current roles
                var rolesToAdd = allRoles.Where(r => selectedNewRoleIds.Contains(r.RoleId)).ToList();
                currentGroupRoles.AddRange(rolesToAdd);
                selectedNewRoleIds.Clear();
                FilterAvailableRoles();
            }
            else
            {
                await ShowToast($"Lỗi khi thêm quyền: {result.Message}", "error");
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Lỗi không mong muốn: {ex.Message}", "error");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task RemoveRoleFromGroup(string roleId)
    {
        try
        {
            isSubmitting = true;
            StateHasChanged();

            var result = await GroupApiClient.RemoveRolesFromGroupAsync(GroupId, new List<string> { roleId });
            if (result.IsSuccess)
            {
                await ShowToast("Đã xóa quyền khỏi nhóm", "success");
                
                // Remove from current roles
                currentGroupRoles.RemoveAll(r => r.RoleId == roleId);
                FilterAvailableRoles();
            }
            else
            {
                await ShowToast($"Lỗi khi xóa quyền: {result.Message}", "error");
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Lỗi không mong muốn: {ex.Message}", "error");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private string GetRoleTypeBadgeClass(short roleType)
    {
        return roleType switch
        {
            1 => "bg-primary",      // System
            2 => "bg-info",         // Admin
            3 => "bg-success",      // User
            4 => "bg-warning",      // Custom
            _ => "bg-secondary"
        };
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            validationErrors.Clear();
            StateHasChanged();

            // Validate form
            if (!ValidateForm())
            {
                await ShowToast("Vui lòng kiểm tra lại thông tin đã nhập", "error");
                return;
            }

            // Update group
            var result = await GroupApiClient.UpdateGroupAsync(GroupId, updateGroupDto);
            if (result.IsSuccess)
            {
                await ShowToast("Cập nhật nhóm thành công!", "success");
                
                // Refresh group data
                await LoadGroupData();
            }
            else
            {
                await ShowToast($"Lỗi khi cập nhật nhóm: {result.Message}", "error");
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Lỗi không mong muốn: {ex.Message}", "error");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private bool ValidateForm()
    {
        validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(updateGroupDto.GroupName))
        {
            validationErrors["GroupName"] = "Tên nhóm không được để trống";
        }
        else if (updateGroupDto.GroupName.Length < 3)
        {
            validationErrors["GroupName"] = "Tên nhóm phải có ít nhất 3 ký tự";
        }

        return !validationErrors.Any();
    }

    private async Task ResetForm()
    {
        if (groupDetail != null)
        {
            updateGroupDto = new UpdateGroupDto
            {
                GroupName = groupDetail.GroupName,
                TimeActiveId = groupDetail.TimeActiveId,
                IsActive = groupDetail.IsActive
            };
        }

        selectedNewRoleIds.Clear();
        roleSearchTerm = string.Empty;
        validationErrors.Clear();
        FilterAvailableRoles();
        
        await ShowToast("Đã khôi phục form", "info");
    }

    private async Task ShowToast(string message, string type)
    {
        var toastClass = type switch
        {
            "success" => "alert-success",
            "error" => "alert-danger",
            "warning" => "alert-warning",
            "info" => "alert-info",
            _ => "alert-info"
        };

        // Simple toast implementation - you can enhance this with a proper toast service
        await Task.Delay(100);
        // For now, we'll use browser alert or console log
        // In production, integrate with a toast notification service
    }
}
                               