@page "/AccountAuthManage/AddGroup"
@using Microsoft.AspNetCore.Authorization
@using Web_health_app.Web.Components.Layout
@using Web_health_app.Web.ApiClients
@using Web_health_app.Models.Models
@inject GroupApiClient GroupApiClient
@inject RoleApiClient RoleApiClient
@inject UserApiClient UserApiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@layout EmptyLayout
@attribute [Authorize(Roles = "ACCESS.AddGroup")]

<link href="/css/AccountAuthManage/add-group.css" rel="stylesheet" />

<div class="add-group-container">
    <div class="add-group-card">
        <!-- Header -->
        <div class="card-header">
            <div class="header-content">
                <div class="header-icon">
                    <i class="fas fa-users"></i>
                </div>
                <div class="header-text">
                    <h2>Thêm Nhóm Người Dùng</h2>
                    <p>Tạo nhóm mới để quản lý quyền truy cập hệ thống</p>
                </div>
            </div>
            <button type="button" class="btn-close" onclick="window.history.back()">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <!-- Form Body -->
        <div class="card-body">
            @if (isLoading)
            {
                <div class="loading-spinner">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                    <p class="loading-text">Đang tải dữ liệu...</p>
                </div>
            }
            else
            {
                <form class="add-group-form" @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                    <!-- Group Information Section -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-info-circle"></i>
                            Thông Tin Nhóm
                        </h3>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-tag"></i>
                                    Tên Nhóm <span class="required">*</span>
                                </label>
                                <input type="text" class="form-control @(validationErrors.ContainsKey("GroupName") ? "is-invalid" : "")"
                                       @bind="createGroupDto.GroupName" 
                                       placeholder="Nhập tên nhóm (tối đa 200 ký tự)" 
                                       maxlength="200" required />
                                @if (validationErrors.ContainsKey("GroupName"))
                                {
                                    <div class="invalid-feedback">@validationErrors["GroupName"]</div>
                                }
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-clock"></i>
                                    Thời Gian Hoạt Động
                                </label>
                                <input type="text" class="form-control @(validationErrors.ContainsKey("TimeActiveId") ? "is-invalid" : "")"
                                       @bind="createGroupDto.TimeActiveId" 
                                       placeholder="VD: 08:00-18:00, 24/7, Theo ca..." 
                                       maxlength="50" />
                                @if (validationErrors.ContainsKey("TimeActiveId"))
                                {
                                    <div class="invalid-feedback">@validationErrors["TimeActiveId"]</div>
                                }
                                <small class="form-text">Mô tả thời gian nhóm có thể hoạt động</small>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-toggle-on"></i>
                                    Trạng Thái
                                </label>
                                <div class="status-toggle">
                                    <input type="checkbox" id="isActive" @bind="createGroupDto.IsActive" class="toggle-input" />
                                    <label for="isActive" class="toggle-label">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">@(createGroupDto.IsActive ? "Hoạt động" : "Không hoạt động")</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Users Selection Section -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-users"></i>
                            Thêm Người Dùng Vào Nhóm
                        </h3>
                        
                        <div class="users-selection">
                            <div class="search-box mb-3">
                                <input type="text" class="form-control" placeholder="Tìm kiếm người dùng..."
                                       @bind="userSearchTerm" @oninput="FilterUsers" />
                                <i class="fas fa-search search-icon"></i>
                            </div>

                            @if (availableUsers.Any())
                            {
                                <div class="users-grid">
                                    @foreach (var user in filteredUsers)
                                    {
                                        <div class="user-item @(selectedUserIds.Contains(user.UserId) ? "selected" : "")">
                                            <label class="user-checkbox">
                                                <input type="checkbox" 
                                                       @onchange="@((e) => ToggleUserSelection(user.UserId, (bool)e.Value!))"
                                                       checked="@selectedUserIds.Contains(user.UserId)" />
                                                <span class="checkmark"></span>
                                                <div class="user-info">
                                                    <div class="user-avatar">
                                                        <i class="fas fa-user"></i>
                                                    </div>
                                                    <div class="user-details">
                                                        <h6 class="user-name">@user.UserName</h6>
                                                        @if (!string.IsNullOrEmpty(user.FullName))
                                                        {
                                                            <small class="user-fullname">@user.FullName</small>
                                                        }
                                                        <div class="user-meta">
                                                            <span class="badge @GetStatusBadgeClass(user.UserStatus)">
                                                                @user.UserStatusString
                                                            </span>
                                                            @if (!string.IsNullOrEmpty(user.Department))
                                                            {
                                                                <small class="user-dept">@user.Department</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </label>
                                        </div>
                                    }
                                </div>
                                
                                @if (selectedUserIds.Any())
                                {
                                    <div class="selected-info">
                                        <i class="fas fa-check-circle text-success"></i>
                                        Đã chọn <strong>@selectedUserIds.Count</strong> người dùng
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="no-data">
                                    <i class="fas fa-users"></i>
                                    <p>Không có người dùng nào để chọn</p>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Roles Selection Section -->
                    <div class="form-section">
                        <div class="section-header">
                            <h5>
                                <i class="fas fa-user-tag"></i>
                                Thêm Quyền cho Nhóm
                            </h5>
                            <small class="text-muted">Chọn các quyền sẽ được gán cho nhóm này</small>
                        </div>

                        <div class="selection-area">
                            <!-- Search Roles -->
                            <div class="search-box mb-3">
                                <div class="search-input-wrapper">
                                    
                                    <input type="text" class="form-control" 
                                           placeholder="Tìm kiếm quyền..." 
                                           @bind="roleSearchTerm" @oninput="@(() => FilterRoles())" />
                                    <i class="fas fa-search search-icon"></i>

                                  
                                </div>
                              
                            </div>
                            <div>

                                @if (availableRoles.Any())
                                {
                                    <div class="search-stats">
                                        Hiển thị <strong>@filteredRoles.Count</strong> / <strong>@availableRoles.Count</strong> quyền
                                    </div>
                                }
                            </div>
                            @if (availableRoles.Any())
                            {
                                <div class="roles-grid">
                                    @foreach (var role in filteredRoles)
                                    {
                                        <div class="role-item @(selectedRoleIds.Contains(role.RoleId) ? "selected" : "")">
                                            <label class="role-checkbox">
                                                <input type="checkbox" 
                                                       @onchange="@((e) => ToggleRoleSelection(role.RoleId, (bool)e.Value!))"
                                                       checked="@selectedRoleIds.Contains(role.RoleId)" />
                                                <span class="checkmark"></span>
                                                <div class="role-info">
                                                    <div class="role-avatar">
                                                        <i class="fas fa-user-tag"></i>
                                                    </div>
                                                    <div class="role-details">
                                                        <h6 class="role-name">@role.RoleName</h6>
                                                        
                                                        <div class="role-meta">
                                                           
                                                            @if (role.IsActive)
                                                            {
                                                                <span class="badge bg-success">Hoạt động</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-secondary">Không hoạt động</span>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </label>
                                        </div>
                                    }
                                </div>
                                
                                @if (selectedRoleIds.Any())
                                {
                                    <div class="selected-info">
                                        <i class="fas fa-check-circle text-success"></i>
                                        Đã chọn <strong>@selectedRoleIds.Count</strong> quyền
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="no-data">
                                    <i class="fas fa-user-tag"></i>
                                    <p>Không có quyền nào để chọn</p>
                                </div>
                            }
                        </div>
                    </div>
                </form>
            }
        </div>

        <!-- Footer Actions -->
        <div class="card-footer">
            <div class="action-buttons">
                <button type="button" class="btn btn-reset" @onclick="ResetForm" disabled="@isSubmitting">
                    <i class="fas fa-redo"></i>
                    Làm Mới
                </button>
                <button type="button" class="btn btn-cancel" @onclick="@(() => Navigation.NavigateTo("/account-auth-manage"))" disabled="@isSubmitting">
                    <i class="fas fa-times"></i>
                    Hủy Bỏ
                </button>
                <button type="submit" class="btn btn-primary" @onclick="HandleSubmit" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Đang lưu...</span>
                    }
                    else
                    {
                        <i class="fas fa-save"></i>
                        <span>Lưu Nhóm</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateGroupDto createGroupDto = new();
    private List<UserInfoDto> availableUsers = new();
    private List<UserInfoDto> filteredUsers = new();
    private List<RoleInfoDto> availableRoles = new();
    private List<RoleInfoDto> filteredRoles = new();
    
    private HashSet<Guid> selectedUserIds = new();
    private HashSet<string> selectedRoleIds = new();
    
    private string userSearchTerm = string.Empty;
    private string roleSearchTerm = string.Empty;
    
    private bool isLoading = true;
    private bool isSubmitting = false;
    private Dictionary<string, string> validationErrors = new();
    
    private string? createdGroupId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Load all users - we'll filter to show only users not in groups in the UI
            var usersResult = await UserApiClient.GetAllUsersAsync(1, 1000);
            if (usersResult.IsSuccess && usersResult.Data != null)
            {
                availableUsers = usersResult.Data.Users.ToList();
                filteredUsers = availableUsers.ToList();
            }

            // Load all roles
            var rolesResult = await RoleApiClient.GetAllRolesAsync(1, 1000);
            if (rolesResult.IsSuccess && rolesResult.Data != null)
            {
                availableRoles = rolesResult.Data.Roles.ToList();
                filteredRoles = availableRoles.ToList();
            }

            // Initialize DTO with default values
            createGroupDto.IsActive = true;
        }
        catch (Exception ex)
        {
            await ShowToast($"Lỗi khi tải dữ liệu: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterUsers()
   {
      if (string.IsNullOrWhiteSpace(userSearchTerm))
        {
            filteredUsers = availableUsers.ToList();
        }
        else
        {
            var searchTerm = userSearchTerm.ToLower();
            filteredUsers = availableUsers
                .Where(u => u.UserName.ToLower().Contains(searchTerm) || 
                           (!string.IsNullOrEmpty(u.FullName) && u.FullName.ToLower().Contains(searchTerm)) ||
                           (!string.IsNullOrEmpty(u.Department) && u.Department.ToLower().Contains(searchTerm)))
                .ToList();
        }
        StateHasChanged();
    }

    private void FilterRoles()
    {
        if (string.IsNullOrWhiteSpace(roleSearchTerm))
        {
            filteredRoles = availableRoles.ToList();
        }
        else
        {
            var searchTerm = roleSearchTerm.ToLower();
            filteredRoles = availableRoles
                .Where(r => r.RoleName.ToLower().Contains(searchTerm) || 
                           (!string.IsNullOrEmpty(r.RoleName) && r.RoleName.ToLower().Contains(searchTerm))
                || r.RoleId.ToLower().Contains(searchTerm))
                .ToList();
        }
        StateHasChanged();
    }

    private void ToggleUserSelection(Guid userId, bool isSelected)
    {
        if (isSelected)
        {
            selectedUserIds.Add(userId);
        }
        else
        {
            selectedUserIds.Remove(userId);
        }
        StateHasChanged();
    }

    private void ToggleRoleSelection(string roleId, bool isSelected)
    {
        if (isSelected)
        {
            selectedRoleIds.Add(roleId);
        }
        else
        {
            selectedRoleIds.Remove(roleId);
        }
        StateHasChanged();
    }

    private string GetStatusBadgeClass(short userStatus)
    {
        return userStatus switch
        {
            1 => "bg-success",      // Active
            0 => "bg-danger",       // Inactive
            2 => "bg-warning",      // Pending
            3 => "bg-secondary",    // Suspended
            _ => "bg-light"
        };
    }

    private string GetRoleTypeBadgeClass(bool isActive)
    {
        return isActive switch
        {
            false => "bg-warning",      // System
            true  => "bg-success"         // Admin

           
        };
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            validationErrors.Clear();
            StateHasChanged();

            // Validate form
            if (!ValidateForm())
            {
                await ShowToast("Vui lòng kiểm tra lại thông tin đã nhập", "error");
                return;
            }

            // Create group
            var result = await GroupApiClient.CreateGroupAsync(createGroupDto);
            if (!result.IsSuccess)
            {
                await ShowToast($"Lỗi khi tạo nhóm: {result.Message}", "error");
                return;
            }

            createdGroupId = result.Data?.GroupId;
            if (string.IsNullOrEmpty(createdGroupId))
            {
                await ShowToast("Lỗi: Không thể lấy ID nhóm sau khi tạo", "error");
                return;
            }

            await ShowToast("Tạo nhóm thành công!", "success");

            // Add users to group if any selected
            if (selectedUserIds.Any())
            {
                var addUsersResult = await GroupApiClient.AddUsersToGroupAsync(createdGroupId, selectedUserIds.ToList());
                if (addUsersResult.IsSuccess)
                {
                    await ShowToast($"Đã thêm {selectedUserIds.Count} người dùng vào nhóm", "success");
                }
                else
                {
                    await ShowToast($"Cảnh báo: Tạo nhóm thành công nhưng lỗi khi thêm người dùng: {addUsersResult.Message}", "warning");
                }
            }

            // Add roles to group if any selected
            if (selectedRoleIds.Any())
            {
                var addRolesResult = await GroupApiClient.AddRolesToGroupAsync(createdGroupId, selectedRoleIds.ToList());
                if (addRolesResult.IsSuccess)
                {
                    await ShowToast($"Đã thêm {selectedRoleIds.Count} quyền vào nhóm", "success");
                }
                else
                {
                    await ShowToast($"Cảnh báo: Tạo nhóm thành công nhưng lỗi khi thêm quyền: {addRolesResult.Message}", "warning");
                }
            }

            // Navigate back to group management
            await Task.Delay(1500); // Show success message
            Navigation.NavigateTo("/accountAuthManage");
        }
        catch (Exception ex)
        {
            await ShowToast($"Lỗi không mong muốn: {ex.Message}", "error");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private bool ValidateForm()
    {
        validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(createGroupDto.GroupName))
        {
            validationErrors["GroupName"] = "Tên nhóm không được để trống";
        }
        else if (createGroupDto.GroupName.Length < 3)
        {
            validationErrors["GroupName"] = "Tên nhóm phải có ít nhất 3 ký tự";
        }

        return !validationErrors.Any();
    }

    private async Task ResetForm()
    {
        createGroupDto = new CreateGroupDto { IsActive = true };
        selectedUserIds.Clear();
        selectedRoleIds.Clear();
        userSearchTerm = string.Empty;
        roleSearchTerm = string.Empty;
        validationErrors.Clear();
        createdGroupId = null;
        
        FilterUsers();
        FilterRoles();
        
        await ShowToast("Đã làm mới form", "info");
    }

    private async Task ShowToast(string message, string type)
    {
        var toastClass = type switch
        {
            "success" => "alert-success",
            "error" => "alert-danger",
            "warning" => "alert-warning",
            "info" => "alert-info",
            _ => "alert-info"
        };

        // Simple toast implementation - you can enhance this with a proper toast service
        await Task.Delay(100);
        // For now, we'll use browser alert or console log
        // In production, integrate with a toast notification service
    }
}
