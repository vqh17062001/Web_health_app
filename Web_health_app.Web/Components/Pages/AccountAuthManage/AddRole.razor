@page "/accountAuthManage/addrole"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Web_health_app.Web.Components.Layout
@using Web_health_app.Web.ApiClients
@using Models.Models
@inject RoleApiClient RoleApiClient
@inject PermissionApiClient PermissionApiClient
@inject ActionEntityApiClient ActionEntityApiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@layout EmptyLayout
@attribute [Authorize(Roles = "ACCESS.AddRole")]

<link href="/css/AccountAuthManage/add-role.css" rel="stylesheet" />

<div class="add-role-container">
    <div class="add-role-card">
        <!-- Header -->
        <div class="card-header">
            <div class="header-content">
                <div class="header-icon">
                    <i class="fas fa-shield-alt"></i>
                </div>
                <div class="header-text">
                    <h2>Thêm Vai Trò Mới</h2>
                    <p>Tạo vai trò và phân quyền trong hệ thống</p>
                </div>
            </div>
            <button type="button" class="btn-close" aria-label="Đóng"
                @onclick="@(() => Navigation.NavigateTo("/accountAuthManage"))">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <!-- Form Content -->
        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                </div>
            }
            else
            {
                <EditForm Model="@createRoleDto" OnValidSubmit="HandleSubmit" class="add-role-form">
                    <DataAnnotationsValidator />

                    <!-- Basic Role Information -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-info-circle"></i>
                            Thông tin cơ bản
                        </h3>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-signature"></i>
                                    Tên vai trò <span class="required">*</span>
                                </label>
                                <InputText @bind-Value="createRoleDto.RoleName" class="form-control"
                                    placeholder="Nhập tên vai trò" maxlength="100" />
                                <ValidationMessage For="@(() => createRoleDto.RoleName)" class="text-danger" />
                                <small class="form-text text-muted">
                                    <i class="fas fa-info-circle"></i>
                                    Mã vai trò sẽ được tạo tự động từ tên vai trò
                                </small>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-toggle-on"></i>
                                    Trạng thái
                                </label>
                                <InputSelect @bind-Value="createRoleDto.IsActive" class="form-select">
                                    <option value="true">Hoạt động</option>
                                    <option value="false">Tạm khóa</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>

                    <!-- Permissions Section -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-key"></i>
                            Phân quyền truy cập
                        </h3>

                        @if (actions != null && actions.Any() && entities != null && entities.Any())
                        {
                            <div class="permissions-container">
                                <!-- Matrix 1: Access to Pages -->
                                <div class="permission-matrix-section">
                                    <h4 class="matrix-title">
                                        <i class="fas fa-desktop"></i>
                                        Quyền truy cập trang (ACCESS - PAGE)
                                    </h4>
                                    
                                    @if (accessActions.Any() && pageEntities.Any())
                                    {
                                        <div class="permission-table">
                                            <div class="table-header">
                                                <div class="module-col">Trang / Quyền truy cập</div>
                                                @foreach (var action in accessActions)
                                                {
                                                    <div class="action-col">@action.ActionName</div>
                                                }
                                            </div>

                                            @foreach (var entity in pageEntities)
                                            {
                                                <div class="table-row">
                                                    <div class="module-name">
                                                        <i class="fas fa-file-alt"></i>
                                                        @entity.NameEntity
                                                    </div>
                                                    @foreach (var action in accessActions)
                                                    {
                                                        <div class="action-checkbox">
                                                            <input type="checkbox" 
                                                                   id="@($"access_{action.ActionId}_{entity.EntityId}")"
                                                                   class="permission-checkbox"
                                                                   checked="@IsPermissionSelected(action.ActionId, entity.EntityId)"
                                                                   @onchange="@((e) => TogglePermission(action.ActionId, entity.EntityId, (bool)(e.Value ?? false)))" />
                                                            <label for="@($"access_{action.ActionId}_{entity.EntityId}")" class="checkbox-label"></label>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>

                                        <div class="permission-actions">
                                            <button type="button" class="btn-action btn-select-all" @onclick="SelectAllAccessPermissions">
                                                <i class="fas fa-check-square"></i>
                                                Chọn tất cả trang
                                            </button>
                                            <button type="button" class="btn-action btn-deselect-all" @onclick="DeselectAllAccessPermissions">
                                                <i class="fas fa-square"></i>
                                                Bỏ chọn tất cả trang
                                            </button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning">
                                            <i class="fas fa-exclamation-triangle"></i>
                                            Không tìm thấy dữ liệu ACCESS action hoặc page entities
                                        </div>
                                    }
                                </div>

                                <!-- Matrix 2: Actions on Tables -->
                                <div class="permission-matrix-section mt-4">
                                    <h4 class="matrix-title">
                                        <i class="fas fa-table"></i>
                                        Quyền thao tác dữ liệu (ACTIONS - TABLE)
                                    </h4>
                                    
                                    @if (dataActions.Any() && tableEntities.Any())
                                    {
                                        <div class="data-permission-container">
                                            @foreach (var entity in tableEntities)
                                            {
                                                <div class="entity-permission-group">
                                                    <div class="entity-header">
                                                        <i class="fas fa-database"></i>
                                                        <strong>@entity.NameEntity</strong>
                                                    </div>
                                                    
                                                    <div class="action-grid">
                                                        @foreach (var action in dataActions)
                                                        {
                                                            <div class="action-item">
                                                                <label class="action-label">@action.ActionName</label>
                                                                <div class="action-checkbox">
                                                                    <input type="checkbox" 
                                                                           id="@($"data_{action.ActionId}_{entity.EntityId}")"
                                                                           class="permission-checkbox"
                                                                           checked="@IsPermissionSelected(action.ActionId, entity.EntityId)"
                                                                           @onchange="@((e) => TogglePermission(action.ActionId, entity.EntityId, (bool)(e.Value ?? false)))" />
                                                                    <label for="@($"data_{action.ActionId}_{entity.EntityId}")" class="checkbox-label"></label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>

                                        <div class="permission-actions">
                                            <button type="button" class="btn-action btn-select-all" @onclick="SelectAllDataPermissions">
                                                <i class="fas fa-check-square"></i>
                                                Chọn tất cả dữ liệu
                                            </button>
                                            <button type="button" class="btn-action btn-deselect-all" @onclick="DeselectAllDataPermissions">
                                                <i class="fas fa-square"></i>
                                                Bỏ chọn tất cả dữ liệu
                                            </button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning">
                                            <i class="fas fa-exclamation-triangle"></i>
                                            Không tìm thấy dữ liệu action hoặc table entities
                                        </div>
                                    }
                                </div>

                                <!-- Global Quick Actions -->
                                <div class="permission-actions mt-3">
                                    <button type="button" class="btn-action btn-select-all" @onclick="SelectAllPermissions">
                                        <i class="fas fa-check-double"></i>
                                        Chọn tất cả quyền
                                    </button>
                                    <button type="button" class="btn-action btn-deselect-all" @onclick="DeselectAllPermissions">
                                        <i class="fas fa-times-circle"></i>
                                        Bỏ chọn tất cả quyền
                                    </button>
                                </div>

                                <!-- Selected Permissions Summary -->
                                @if (selectedPermissions.Any())
                                {
                                    <div class="selected-permissions-summary">
                                        <h6>Quyền đã chọn (@selectedPermissions.Count)</h6>
                                        <div class="permissions-badges">
                                            @foreach (var permission in selectedPermissions)
                                            {
                                                var action = actions?.FirstOrDefault(a => a.ActionId == permission.ActionId);
                                                var entity = entities?.FirstOrDefault(e => e.EntityId == permission.EntityId);
                                                <span class="badge bg-secondary me-1 mb-1">
                                                    @action?.ActionName - @entity?.NameEntity
                                                    <button type="button" class="btn-close btn-close-white ms-1" aria-label="Remove"
                                                            @onclick="@(() => TogglePermission(permission.ActionId, permission.EntityId, false))"></button>
                                                </span>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle"></i> Đang tải dữ liệu phân quyền...
                            </div>
                        }
                    </div>
                </EditForm>
            }
        </div>

        <!-- Footer Actions -->
        <div class="card-footer">
            <div class="action-buttons">
                <button type="button" class="btn btn-cancel"
                    @onclick="@(() => Navigation.NavigateTo("/accountAuthManage/roles"))">
                    <i class="fas fa-times"></i>
                    Hủy
                </button>
                <button type="button" class="btn btn-reset" @onclick="ResetForm">
                    <i class="fas fa-undo"></i>
                    Đặt lại
                </button>
                <button type="button" class="btn btn-primary" @onclick="HandleSubmit" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    <i class="fas fa-save"></i>
                    Lưu vai trò
                </button>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger position-fixed top-0 end-0 m-3" style="z-index: 1050;">
        <i class="fas fa-exclamation-triangle"></i> @errorMessage
        <button type="button" class="btn-close" @onclick="@(() => errorMessage = string.Empty)"></button>
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success position-fixed top-0 end-0 m-3" style="z-index: 1050;">
        <i class="fas fa-check-circle"></i> @successMessage
        <button type="button" class="btn-close" @onclick="@(() => successMessage = string.Empty)"></button>
    </div>
}

@code {
    private CreateRoleDto createRoleDto = new();
    private List<ActionInfoDto> actions = new();
    private List<EntityInfoDto> entities = new();
    private List<PermissionSelection> selectedPermissions = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // Filtered data for the two matrices
    private List<ActionInfoDto> accessActions => actions.Where(a => a.ActionId == "ACCESS").ToList();
    private List<ActionInfoDto> dataActions => actions.Where(a => a.ActionId != "ACCESS").OrderBy(a => a.ActionId.Length).ToList();
    private List<EntityInfoDto> pageEntities => entities.Where(e => e.Type == "page").ToList();
    private List<EntityInfoDto> tableEntities => entities.Where(e => e.Type == "table").ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            // Load actions and entities in parallel
            var actionsTask = ActionEntityApiClient.GetActiveActionsAsync();
            var entitiesTask = ActionEntityApiClient.GetEntitiesBySecurityLevelAsync(5); // Load entities with minimum security
           
            await Task.WhenAll(actionsTask, entitiesTask);

            var actionsResponse = await actionsTask;
            var entitiesResponse = await entitiesTask;

            actions = actionsResponse?.Data ?? new List<ActionInfoDto>();
            entities = entitiesResponse?.Data ?? new List<EntityInfoDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi tải dữ liệu: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool IsPermissionSelected(string actionId, string entityId)
    {
        return selectedPermissions.Any(p => p.ActionId == actionId && p.EntityId == entityId);
    }

    private void TogglePermission(string actionId, string entityId, bool isSelected)
    {
        var existing = selectedPermissions.FirstOrDefault(p => p.ActionId == actionId && p.EntityId == entityId);

        if (isSelected && existing == null)
        {
            selectedPermissions.Add(new PermissionSelection { ActionId = actionId, EntityId = entityId });
        }
        else if (!isSelected && existing != null)
        {
            selectedPermissions.Remove(existing);
        }
    }

    // Global permission methods
    private void SelectAllPermissions()
    {
        selectedPermissions.Clear();
        foreach (var action in actions)
        {
            foreach (var entity in entities)
            {
                selectedPermissions.Add(new PermissionSelection { ActionId = action.ActionId, EntityId = entity.EntityId });
            }
        }
    }

    private void DeselectAllPermissions()
    {
        selectedPermissions.Clear();
    }

    // Access permissions methods
    private void SelectAllAccessPermissions()
    {
        // Remove existing access permissions first
        selectedPermissions.RemoveAll(p => accessActions.Any(a => a.ActionId == p.ActionId) && 
                                          pageEntities.Any(e => e.EntityId == p.EntityId));
        
        // Add all access permissions
        foreach (var action in accessActions)
        {
            foreach (var entity in pageEntities)
            {
                selectedPermissions.Add(new PermissionSelection { ActionId = action.ActionId, EntityId = entity.EntityId });
            }
        }
    }

    private void DeselectAllAccessPermissions()
    {
        selectedPermissions.RemoveAll(p => accessActions.Any(a => a.ActionId == p.ActionId) && 
                                          pageEntities.Any(e => e.EntityId == p.EntityId));
    }

    // Data permissions methods
    private void SelectAllDataPermissions()
    {
        // Remove existing data permissions first
        selectedPermissions.RemoveAll(p => dataActions.Any(a => a.ActionId == p.ActionId) && 
                                          tableEntities.Any(e => e.EntityId == p.EntityId));
        
        // Add all data permissions
        foreach (var action in dataActions)
        {
            foreach (var entity in tableEntities)
            {
                selectedPermissions.Add(new PermissionSelection { ActionId = action.ActionId, EntityId = entity.EntityId });
            }
        }
    }

    private void DeselectAllDataPermissions()
    {
        selectedPermissions.RemoveAll(p => dataActions.Any(a => a.ActionId == p.ActionId) && 
                                          tableEntities.Any(e => e.EntityId == p.EntityId));
    }

    private void ResetForm()
    {
        createRoleDto = new CreateRoleDto();
        selectedPermissions.Clear();
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;

            // Validate form
            if (string.IsNullOrWhiteSpace(createRoleDto.RoleName))
            {
                errorMessage = "Vui lòng nhập tên vai trò";
                return;
            }

            // Create role first
            var roleResponse = await RoleApiClient.CreateRoleAsync(createRoleDto);
            if (roleResponse?.Data == null)
            {
                errorMessage = "Không thể tạo vai trò";
                return;
            }

            var createdRole = roleResponse.Data;

            // Create permissions if any selected
            if (selectedPermissions.Any())
            {
                foreach (var permission in selectedPermissions)
                {
                    var createPermissionDto = new CreatePermissionDto
                    {
                        RoleId = createdRole.RoleId,
                        ActionId = permission.ActionId,
                        EntityId = permission.EntityId,
                        IsActive = true
                    };

                    await PermissionApiClient.CreatePermissionAsync(createPermissionDto);
                }
            }

            successMessage = "Tạo vai trò thành công!";

            // Navigate after a short delay to show success message
            await Task.Delay(1500);
            Navigation.NavigateTo("/accountAuthManage");
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi tạo vai trò: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class PermissionSelection
    {
        public string ActionId { get; set; } = string.Empty;
        public string EntityId { get; set; } = string.Empty;
    }
}