@page "/accountAuthManage/edituser"
@using Microsoft.AspNetCore.Authorization
@using Web_health_app.Web.Components.Layout
@using Web_health_app.Models.Models
@using Web_health_app.Web.ApiClients
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

@layout EmptyLayout
@attribute [Authorize(Roles = "ACCESS.EditUser")]
@inject UserApiClient UserApi
@inject RoleApiClient RoleApi
@inject RoleUserApiClient RoleUserApi
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<link href="/css/AccountAuthManage/edit-user.css" rel="stylesheet" />

<div class="edit-user-container">
    <div class="edit-user-card">
        <!-- Header -->
        <div class="card-header">
            <div class="header-content">
                <div class="header-icon">
                    <i class="fas fa-user-edit"></i>
                </div>
                <div class="header-text">
                    <h2>Chỉnh Sửa Người Dùng</h2>
                    <p>Cập nhật thông tin tài khoản người dùng</p>
                </div>
            </div>
            <button type="button" class="btn-close" aria-label="Đóng" @onclick="NavigateBack">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <!-- Loading State -->
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                    <p class="mt-3">Đang tải thông tin người dùng...</p>
                </div>
            </div>
        }
        else if (currentUser == null)
        {
            <div class="error-container">
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    Không thể tải thông tin người dùng. Vui lòng thử lại.
                </div>
                <button class="btn btn-secondary" @onclick="NavigateBack">
                    <i class="fas fa-arrow-left"></i>
                    Quay lại
                </button>
            </div>
        }
        else
        {
            <!-- Form Content -->
            <div class="card-body">
                <form class="edit-user-form">
                    <!-- Current User Info Display -->
                    <div class="form-section">
                        <h4 class="section-title">
                            <i class="fas fa-info-circle"></i>
                            Thông tin hiện tại
                        </h4>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-clock"></i>
                                    Ngày tạo
                                </label>
                                <div class="info-display">
                                    <i class="fas fa-calendar-plus"></i>
                                    @currentUser.CreateAt.ToString("dd/MM/yyyy - HH:mm")
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-sync-alt"></i>
                                    Lần cập nhật cuối
                                </label>
                                <div class="info-display">
                                    <i class="fas fa-calendar-edit"></i>
                                    @(currentUser.UpdateAt?.ToString("dd/MM/yyyy - HH:mm") ?? "Chưa cập nhật")
                                </div>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-toggle-on"></i>
                                    Trạng thái hiện tại
                                </label>
                                <div class="status-badge @GetStatusClass(currentUser.UserStatus)">
                                    <i class="fas @GetStatusIcon(currentUser.UserStatus)"></i>
                                    @currentUser.UserStatusString
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-id-card"></i>
                                    Mã người dùng
                                </label>
                                <div class="info-display">
                                    <i class="fas fa-hashtag"></i>
                                    @currentUser.UserId.ToString().Substring(0, 8)...
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Basic Information -->
                    <div class="form-section">
                        <h4 class="section-title">
                            <i class="fas fa-user"></i>
                            Thông tin cơ bản
                        </h4>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="userName" class="form-label">
                                    <i class="fas fa-user"></i>
                                    Tên người dùng
                                </label>
                                <input type="text" id="userName" class="form-control" value="@currentUser.UserName" disabled />
                                <small class="form-text text-muted">Tên người dùng không thể thay đổi</small>
                            </div>
                            <div class="form-group">
                                <label for="fullName" class="form-label">
                                    <i class="fas fa-address-card"></i>
                                    Họ và tên đầy đủ <span class="required">*</span>
                                </label>
                                <input type="text" id="fullName" class="form-control" @bind="updateUserDto.FullName" 
                                       placeholder="Nhập họ và tên đầy đủ" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="phoneNumber" class="form-label">
                                    <i class="fas fa-phone"></i>
                                    Số điện thoại
                                </label>
                                <input type="tel" id="phoneNumber" class="form-control" @bind="updateUserDto.PhoneNumber" 
                                       placeholder="Nhập số điện thoại" />
                            </div>
                            <div class="form-group">
                                <label for="department" class="form-label">
                                    <i class="fas fa-building"></i>
                                    Phòng ban
                                </label>
                                <select id="department" class="form-select" @bind="updateUserDto.Department">
                                    <option value="">Chọn phòng ban</option>
                                    <option value="it">Công nghệ thông tin</option>
                                    <option value="hr">Nhân sự</option>
                                    <option value="finance">Tài chính</option>
                                    <option value="marketing">Marketing</option>
                                    <option value="operations">Vận hành</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Organization Information -->
                    <div class="form-section">
                        <h4 class="section-title">
                            <i class="fas fa-building"></i>
                            Thông tin tổ chức
                        </h4>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="userStatus" class="form-label">
                                    <i class="fas fa-toggle-on"></i>
                                    Trạng thái
                                </label>
                                <select id="userStatus" class="form-select" @bind="updateUserDto.UserStatus">
                                    <option value="0">Tạo mới cần đổi MK</option>
                                    <option value="1">Hoạt động</option>
                                    <option value="2">Tạm khóa</option>
                                    <option value="3">Cần reset MK</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="levelSecurity" class="form-label">
                                    <i class="fas fa-shield-check"></i>
                                    Cấp độ bảo mật
                                </label>
                                <select id="levelSecurity" class="form-select" @bind="updateUserDto.LevelSecurity" @bind:after="LoadAvailableManagers">
                                    <option value="1">Tối mật</option>
                                    <option value="2">Mật</option>
                                    <option value="3">Cao</option>
                                    <option value="4">Trung bình</option>
                                    <option value="5">Thấp</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="manageBy" class="form-label">
                                    <i class="fas fa-user-crown"></i>
                                    Được quản lý bởi
                                </label>
                                <select id="manageBy" class="form-select" @bind="updateUserDto.ManageBy" disabled=@isLoadingManagers>
                                    <option value="">@(isLoadingManagers ? "Đang tải danh sách quản lý..." : "Chọn người quản lý (Tùy chọn)")</option>
                                    @if (!isLoadingManagers && availableManagers != null)
                                    {
                                        @foreach (var manager in availableManagers)
                                        {
                                            <option value="@manager.UserId">@(manager.FullName ?? manager.UserName) - Level @manager.LevelSecurity</option>
                                        }
                                    }
                                    else if (isLoadingManagers)
                                    {
                                        <option value="" disabled>Đang tải danh sách quản lý...</option>
                                    }
                                    else if (updateUserDto.LevelSecurity > 0)
                                    {
                                        <option value="" disabled>Không có quản lý khả dụng cho cấp độ này</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="groupId" class="form-label">
                                    <i class="fas fa-users"></i>
                                    Nhóm người dùng
                                </label>
                                <select id="groupId" class="form-select" @bind="updateUserDto.GroupId">
                                    <option value="">Chọn nhóm người dùng</option>
                                    <option value="1">IT Department</option>
                                    <option value="2">HR Department</option>
                                    <option value="3">Finance Team</option>
                                    <option value="4">Management</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- User Roles Section -->
                    <div class="form-section">
                        <h4 class="section-title">
                            <i class="fas fa-user-shield"></i>
                            Phân quyền người dùng
                        </h4>

                        @if (isLoadingRoles)
                        {
                            <div class="text-center py-3">
                                <div class="spinner-border spinner-border-sm text-primary" role="status">
                                    <span class="visually-hidden">Đang tải...</span>
                                </div>
                                <span class="ms-2">Đang tải danh sách vai trò...</span>
                            </div>
                        }
                        else if (availableRoles?.Any() == true)
                        {
                            <div class="roles-grid">
                                @foreach (var role in availableRoles)
                                {
                                    <div class="role-item">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" 
                                                   id="role_@role.RoleId" 
                                                   @bind="selectedRoles[role.RoleId]" />
                                            <label class="form-check-label" for="role_@role.RoleId">
                                                <strong>@role.RoleName</strong>
                                                <small class="d-block text-muted">
                                                    @role.PermissionCount quyền | @role.UserCount người dùng
                                                </small>
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle"></i>
                                Không có vai trò nào để hiển thị.
                            </div>
                        }
                    </div>

                    <!-- Form Actions -->
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" @onclick="NavigateBack" disabled="@isSaving">
                            <i class="fas fa-times"></i>
                            Hủy bỏ
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="HandleUpdateUser" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="ms-2">Đang cập nhật...</span>
                            }
                            else
                            {
                                <i class="fas fa-save"></i>
                                <span class="ms-2">Cập nhật</span>
                            }
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(validationMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            <i class="fas fa-exclamation-triangle"></i>
                            @validationMessage
                        </div>
                    }
                </form>
            </div>
        }
    </div>
</div>

@code {
    [Parameter, SupplyParameterFromQuery] public string? UserId { get; set; }

    // Data models
    private UserInfoDto? currentUser;
    private UpdateUserDto updateUserDto = new UpdateUserDto();
    
    // Role management
    private List<RoleInfoDto> availableRoles = new List<RoleInfoDto>();
    private Dictionary<string, bool> selectedRoles = new Dictionary<string, bool>();
    private List<string> currentUserRoles = new List<string>();
    
    // Manager management
    private List<UserInfoDto> availableManagers = new List<UserInfoDto>();

    // Loading states
    private bool isLoading = true;
    private bool isLoadingRoles = false;
    private bool isLoadingManagers = false;
    private bool isSaving = false;

    // Form validation
    private string validationMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(UserId) || !Guid.TryParse(UserId, out var userGuid))
        {
            await JSRuntime.InvokeVoidAsync("alert", "ID người dùng không hợp lệ!");
            NavigateBack();
            return;
        }

        await LoadUserData(userGuid);
        await LoadAvailableRoles();
        await LoadCurrentUserRoles(userGuid);
    }

    private async Task LoadUserData(Guid userId)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await UserApi.GetUserByIdAsync(userId);
            if (response.IsSuccess && response.Data != null)
            {
                currentUser = response.Data;
                
                // Populate updateUserDto with current values
                updateUserDto.FullName = currentUser.FullName;
                updateUserDto.PhoneNumber = currentUser.PhoneNumber;
                updateUserDto.Department = currentUser.Department;
                updateUserDto.UserStatus = currentUser.UserStatus;
                updateUserDto.ManageBy = currentUser.ManageBy;
                updateUserDto.LevelSecurity = currentUser.LevelSecurity;
                updateUserDto.GroupId = currentUser.GroupId;

                // Load managers based on security level
                if (currentUser.LevelSecurity > 0)
                {
                    await LoadAvailableManagers((int)currentUser.LevelSecurity);
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Lỗi tải thông tin người dùng: {response.Message}");
                currentUser = null;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Lỗi không xác định: {ex.Message}");
            currentUser = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableRoles()
    {
        try
        {
            isLoadingRoles = true;
            StateHasChanged();

            var response = await RoleApi.GetRolesWithUserCountAsync(1, 100, null, false);
            if (response.IsSuccess && response.Data != null)
            {
                availableRoles = response.Data.Roles.Select(r => new RoleInfoDto
                {
                    RoleId = r.RoleId,
                    RoleName = r.RoleName,
                    IsActive = r.IsActive,
                    Permissions = r.Permissions,
                    UserCount = r.UserCount
                }).ToList();

                // Initialize selectedRoles dictionary
                selectedRoles = availableRoles.ToDictionary(r => r.RoleId, r => false);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Failed to load roles: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading roles: {ex.Message}");
        }
        finally
        {
            isLoadingRoles = false;
            StateHasChanged();
        }
    }

    private async Task LoadCurrentUserRoles(Guid userId)
    {
        try
        {
            var response = await RoleUserApi.GetUserRolesAsync(userId);
            if (response.IsSuccess && response.Data != null)
            {


              
                
                // Update selectedRoles based on current user roles
                foreach (var role in response.Data.Roles)
                {
                    if (selectedRoles.ContainsKey(role.RoleId))
                    {
                        selectedRoles[role.RoleId] = true;
                    }
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading user roles: {ex.Message}");
        }
    }

    private async Task LoadAvailableManagers(int levelSecurity)
    {
        try
        {
            isLoadingManagers = true;
            StateHasChanged();

            var response = await UserApi.GetUsersByCompareSecurityLevelAsync(levelSecurity);
            
            if (response.IsSuccess && response.Data != null)
            {
                // Filter users who have higher or equal security level (can manage this user)
                // and exclude the current user from being their own manager
                availableManagers = response.Data
                    .ToList();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Failed to load managers: {response.Message}");
                availableManagers = new List<UserInfoDto>();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading managers: {ex.Message}");
            availableManagers = new List<UserInfoDto>();
        }
        finally
        {
            isLoadingManagers = false;
            StateHasChanged();
        }
    }

    // Overload method for compatibility with the existing call
    private async Task LoadAvailableManagers()
    {
        if (updateUserDto.LevelSecurity > 0)
        {
            await LoadAvailableManagers((int)updateUserDto.LevelSecurity);
        }
    }

    private async Task HandleUpdateUser()
    {
        if (isSaving || currentUser == null) return;

        try
        {
            isSaving = true;
            validationMessage = string.Empty;
            StateHasChanged();

            // Validate form
            if (!ValidateForm())
            {
                return;
            }

            // Step 1: Update user information
            var userResponse = await UserApi.UpdateUserAsync(currentUser.UserId, updateUserDto);
            if (!userResponse.IsSuccess)
            {
                validationMessage = $"Lỗi cập nhật thông tin người dùng: {userResponse.Message}";
                return;
            }

            // Step 2: Update user roles
            var selectedRolesList = selectedRoles.Where(sr => sr.Value).Select(sr => sr.Key).ToList();
            var roleUpdateResponse = await RoleUserApi.ReplaceUserRolesAsync(currentUser.UserId, selectedRolesList);
            
            if (!roleUpdateResponse.IsSuccess)
            {
                // User updated but role assignment failed - show warning
                await JSRuntime.InvokeVoidAsync("alert",
                    $"Thông tin người dùng đã được cập nhật nhưng có lỗi khi cập nhật quyền: {roleUpdateResponse.Message}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Cập nhật người dùng thành công!");
            }

            // Navigate back
            NavigateBack();
        }
        catch (Exception ex)
        {
            validationMessage = $"Lỗi không xác định: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private bool ValidateForm()
    {
        validationMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(updateUserDto.FullName))
        {
            validationMessage = "Họ và tên không được để trống";
            return false;
        }

        return true;
    }

    private string GetStatusClass(short userStatus)
    {
        return userStatus switch
        {
            0 => "warning", // Cần đổi MK
            1 => "active", // Active
            2 => "inactive", // Tạm khóa
            3 => "warning", // Cần reset MK
            -1 => "danger", // Khóa vĩnh viễn
            -2 => "dark", // Đã xóa
            _ => "secondary" // Không xác định
        };
    }

    private string GetStatusIcon(short userStatus)
    {
        return userStatus switch
        {
            0 => "fa-exclamation-triangle", // Cần đổi MK
            1 => "fa-check-circle", // Active
            2 => "fa-pause-circle", // Tạm khóa
            3 => "fa-key", // Cần reset MK
            -1 => "fa-ban", // Khóa vĩnh viễn
            -2 => "fa-trash", // Đã xóa
            _ => "fa-question-circle" // Không xác định
        };
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/accountAuthManage");
    }

    public void Dispose()
    {
        // Clean up if needed
    }
}
