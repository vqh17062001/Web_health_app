@page "/accountAuthManage/AddUser"
@using Microsoft.AspNetCore.Authorization
@using Web_health_app.Web.Components.Layout

@layout EmptyLayout
@attribute [Authorize(Roles = "ACCESS.AddUser")]

<link href="\css\AccountAuthManage\add-user.css" rel="stylesheet" />

<div class="add-user-container">
    <div class="add-user-card">
        <!-- Header -->
        <div class="card-header">
            <div class="header-content">
                <div class="header-icon">
                    <i class="fas fa-user-plus"></i>
                </div>
                <div class="header-text">
                    <h2>Thêm Người Dùng Mới</h2>
                    <p>Tạo tài khoản người dùng trong hệ thống</p>
                </div>
            </div>
            <button type="button" class="btn-close" @onclick="CancelAndGoBack" aria-label="Đóng">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <!-- Form Content -->
        <div class="card-body">
            <form class="add-user-form" @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                <div class="form-row">
                    <div class="form-group">
                        <label for="userId" class="form-label">
                            <i class="fas fa-id-card"></i>
                            Mã người dùng
                        </label>
                        <input type="text" id="userId" class="form-control" placeholder="Tự động sinh" disabled />
                        <small class="form-text text-muted">Mã người dùng sẽ được tự động sinh</small>
                    </div>
                    <div class="form-group">
                        <label for="userName" class="form-label">
                            <i class="fas fa-user"></i>
                            Tên người dùng <span class="required">*</span>
                        </label>
                        <input type="text" id="userName" class="form-control" placeholder="Nhập tên người dùng"
                            @bind="createUserDto.UserName" required />
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="password" class="form-label">
                            <i class="fas fa-lock"></i>
                            Mật khẩu <span class="required">*</span>
                        </label>
                        <div class="password-input-group">
                            <input type="password" id="password" class="form-control" placeholder="Nhập mật khẩu"
                                @bind="createUserDto.Password" required />
                            <button type="button" class="password-toggle">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="passwordHash" class="form-label">
                            <i class="fas fa-shield-alt"></i>
                            Xác nhận mật khẩu <span class="required">*</span>
                        </label>
                        <div class="password-input-group">
                            <input type="password" id="passwordHash" class="form-control"
                                placeholder="Xác nhận mật khẩu" @bind="confirmPassword" required />
                            <button type="button" class="password-toggle">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group full-width">
                        <label for="fullName" class="form-label">
                            <i class="fas fa-address-card"></i>
                            Họ và tên đầy đủ <span class="required">*</span>
                        </label>
                        <input type="text" id="fullName" class="form-control" placeholder="Nhập họ và tên đầy đủ"
                            @bind="createUserDto.FullName" required />
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="phoneNumber" class="form-label">
                            <i class="fas fa-phone"></i>
                            Số điện thoại
                        </label>
                        <input type="tel" id="phoneNumber" class="form-control" placeholder="Nhập số điện thoại"
                            @bind="createUserDto.PhoneNumber" />
                    </div>
                    <div class="form-group">
                        <label for="department" class="form-label">
                            <i class="fas fa-building"></i>
                            Phòng ban
                        </label>
                        @if (isLoadingDepartments)
                        {
                            <div class="loading">Đang tải phòng ban...</div>
                        }
                        else
                        {
                            <select id="department" class="form-select" @bind="createUserDto.Department">
                                <option value="">Chọn phòng ban (tùy chọn)</option>
                                @foreach (var dept in availableDepartments)
                                {
                                    <option value="@dept.DepartmentCode">@dept.DisplayName</option>
                                }
                            </select>
                        }
                        <small class="form-text text-muted">Chọn phòng ban trực thuộc (không bắt buộc)</small>
                    </div>
                    <div class="form-group">
                        <label for="groupId" class="form-label">
                            <i class="fas fa-users"></i>
                            Nhóm người dùng
                        </label>
                        <select id="groupId" class="form-select" @bind="selectedGroupId" disabled="@isLoadingGroups">
                            <option value="">Chọn nhóm (tùy chọn)</option>
                            @if (isLoadingGroups)
                            {
                                <option value="">Đang tải nhóm...</option>
                            }
                            else
                            {
                                @foreach (var group in availableGroups)
                                {
                                    <option value="@group.GroupId">@group.GroupName (@group.UserCount thành viên)</option>
                                }
                            }
                        </select>
                        @if (isLoadingGroups)
                        {
                            <small class="form-text text-muted">
                                <i class="fas fa-spinner fa-spin"></i> Đang tải danh sách nhóm...
                            </small>
                        }
                        else if (!availableGroups.Any())
                        {
                            <small class="form-text text-warning">
                                <i class="fas fa-exclamation-triangle"></i> Không có nhóm nào khả dụng
                            </small>
                        }
                        else
                        {
                            <small class="form-text text-muted">Chọn nhóm để gán người dùng vào (không bắt buộc)</small>
                        }
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="userStatus" class="form-label">
                            <i class="fas fa-toggle-on"></i>
                            Trạng thái
                        </label>
                        <select id="userStatus" class="form-select" @bind="createUserDto.UserStatus">
                            <option value="0">Tạo mới cần đổi MK</option>
                            <option value="1">Hoạt động</option>
                            <option value="2">Tạm khóa</option>
                        </select>
                    </div>
                </div>

                <!-- Management Information -->
                <div class="form-section">
                    <h4 class="section-title">
                        <i class="fas fa-user-tie"></i>
                        Thông tin quản lý
                    </h4>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="manageBy" class="form-label">
                                <i class="fas fa-user-crown"></i>
                                Được quản lý bởi
                            </label>
                            <select id="manageBy" class="form-select" @bind="createUserDto.ManageBy">
                                <option value="">Chọn người quản lý</option>
                                @if (availableManagers?.Any() == true)
                                {
                                    @foreach (var manager in availableManagers)
                                    {
                                        <option value="@manager.UserId">
                                            @(manager.FullName ?? manager.UserName) - Level @manager.LevelSecurity
                                        </option>
                                    }
                                }
                                else if (isLoadingManagers)
                                {
                                    <option value="" disabled>Đang tải danh sách quản lý...</option>
                                }
                                else if (createUserDto.LevelSecurity > 0)
                                {
                                    <option value="" disabled>Không có quản lý khả dụng cho cấp độ này</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="levelSecurity" class="form-label">
                                <i class="fas fa-shield-check"></i>
                                Cấp độ bảo mật
                            </label>
                            <select id="levelSecurity" class="form-select" @bind="createUserDto.LevelSecurity"
                                @bind:after="LoadAvailableManagers">
                                <option value="1">Tối mật</option>
                                <option value="2">Mật</option>
                                <option value="3">Cao</option>
                                <option value="4">Trung bình</option>
                                <option value="5">Thấp</option>

                            </select>
                        </div>
                    </div>
                </div>

                <!-- System Information -->
                <div class="form-section">
                    <h4 class="section-title">
                        <i class="fas fa-cog"></i>
                        Thông tin hệ thống
                    </h4>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="createAt" class="form-label">
                                <i class="fas fa-calendar-plus"></i>
                                Ngày tạo
                            </label>
                            <input type="datetime-local" id="createAt" class="form-control" disabled
                                value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                        </div>
                        <div class="form-group">
                            <label for="updateAt" class="form-label">
                                <i class="fas fa-calendar-edit"></i>
                                Ngày cập nhật
                            </label>
                            <input type="datetime-local" id="updateAt" class="form-control" disabled
                                value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                        </div>
                    </div>
                </div>

                <!-- Role Assignment Section -->
                <div class="form-section">
                    <div class="section-header">
                        <h4 class="section-title">
                            <i class="fas fa-user-shield"></i>
                            Phân quyền
                        </h4>
                        <p class="section-description">
                            Chọn các vai trò để gán cho người dùng này
                        </p>
                    </div>

                    <div class="roles-container">
                        @if (isLoadingRoles)
                        {
                            <div class="loading-state">
                                <div class="spinner-wrapper">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Đang tải...</span>
                                    </div>
                                </div>
                                <p class="loading-text">Đang tải danh sách vai trò...</p>
                            </div>
                        }
                        else if (availableRoles?.Any() == true)
                        {
                            <div class="roles-summary">
                                <div class="summary-item">
                                    <i class="fas fa-list"></i>
                                    <span>Tổng số: <strong>@availableRoles.Count</strong> vai trò</span>
                                </div>
                                <div class="summary-item">
                                    <i class="fas fa-check-circle"></i>
                                    <span>Đã chọn: <strong>@selectedRoles.Count(r => r.Value)</strong> vai trò</span>
                                </div>
                            </div>

                            <div class="roles-grid">
                                @foreach (var role in availableRoles)
                                {
                                    <div class="role-card @(selectedRoles[role.RoleId] ? "selected" : "")">
                                        <div class="role-card-header">
                                            <div class="role-selection">
                                                <input class="role-checkbox" type="checkbox" id="role_@role.RoleId"
                                                    checked="@selectedRoles[role.RoleId]"
                                                    @onchange="@(() => OnRoleSelectionChanged(role.RoleId))" />
                                                <label class="checkbox-label" for="role_@role.RoleId">
                                                    <div class="checkbox-custom">
                                                        <i class="fas fa-check"></i>
                                                    </div>
                                                </label>
                                            </div>
                                            <div class="role-status-indicator @(role.IsActive ? "active" : "inactive")">
                                                <i class="fas @(role.IsActive ? "fa-check-circle" : "fa-pause-circle")"></i>
                                            </div>
                                        </div>

                                        <div class="role-card-body">
                                            <div class="role-icon-wrapper">
                                                <i class="fas fa-user-shield role-icon"></i>
                                            </div>
                                            <div class="role-details">
                                                <h5 class="role-name">@role.RoleName</h5>
                                                <div class="role-status-text">
                                                    @(role.IsActive ? "Đang hoạt động" : "Tạm dừng")
                                                </div>
                                            </div>
                                        </div>

                                        <div class="role-card-footer">
                                            <div class="role-stats-grid">
                                                <div class="stat-box">
                                                    <div class="stat-icon">
                                                        <i class="fas fa-key"></i>
                                                    </div>
                                                    <div class="stat-content">
                                                        <div class="stat-number">@role.PermissionCount</div>
                                                        <div class="stat-label">Quyền hạn</div>
                                                    </div>
                                                </div>
                                                <div class="stat-box">
                                                    <div class="stat-icon">
                                                        <i class="fas fa-users"></i>
                                                    </div>
                                                    <div class="stat-content">
                                                        <div class="stat-number">@role.UserCount</div>
                                                        <div class="stat-label">Người dùng</div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        @if (selectedRoles[role.RoleId])
                                        {
                                            <div class="selected-overlay">
                                                <div class="selected-badge">
                                                    <i class="fas fa-check-circle"></i>
                                                    <span>Đã chọn</span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            @if (selectedRoles.Any(r => r.Value))
                            {
                                <div class="selected-roles-summary">
                                    <div class="summary-header">
                                        <div class="summary-title">
                                            <i class="fas fa-clipboard-check"></i>
                                            <h6>Vai trò đã chọn (@selectedRoles.Count(r => r.Value))</h6>
                                        </div>
                                        <button type="button" class="btn-clear-all" @onclick="ClearAllRoles">
                                            <i class="fas fa-trash-alt"></i>
                                            Xóa tất cả
                                        </button>
                                    </div>
                                    <div class="selected-roles-list">
                                        @foreach (var role in availableRoles.Where(r => selectedRoles[r.RoleId]))
                                        {
                                            <div class="selected-role-item">
                                                <div class="role-tag">
                                                    <div class="role-tag-icon">
                                                        <i class="fas fa-user-shield"></i>
                                                    </div>
                                                    <div class="role-tag-content">
                                                        <span class="role-tag-name">@role.RoleName</span>
                                                        <span class="role-tag-info">@role.PermissionCount quyền</span>
                                                    </div>
                                                </div>
                                                <button type="button" class="btn-remove-role"
                                                    @onclick="@(() => RemoveRole(role.RoleId))" title="Bỏ chọn vai trò này">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-state">
                                <div class="empty-icon">
                                    <i class="fas fa-user-shield"></i>
                                </div>
                                <h5 class="empty-title">Không có vai trò nào</h5>
                                <p class="empty-description">
                                    Hiện tại chưa có vai trò nào để gán cho người dùng.
                                    Vui lòng tạo vai trò trước khi thêm người dùng.
                                </p>
                                <button type="button" class="btn btn-outline-primary"
                                    @onclick="@(() => Navigation.NavigateTo("/accountAuthManage/addRole"))">
                                    <i class="fas fa-plus"></i>
                                    Tạo vai trò mới
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </form>
        </div>

        <!-- Footer Actions -->
        <div class="card-footer">
            <div class="action-buttons">
                <button type="button" class="btn btn-cancel" @onclick="CancelAndGoBack" disabled="@isSaving">
                    <i class="fas fa-times"></i>
                    Hủy bỏ
                </button>
                <button type="button" class="btn btn-reset" @onclick="ResetForm" disabled="@isSaving">
                    <i class="fas fa-redo"></i>
                    Đặt lại
                </button>
                <button type="submit" class="btn btn-primary" @onclick="HandleSubmit" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Đang lưu...</span>
                    }
                    else
                    {
                        <i class="fas fa-save"></i>
                        <span class="ms-1">Lưu người dùng</span>
                    }
                </button>
            </div>

            @if (!string.IsNullOrEmpty(validationMessage))
            {
                <div class="alert alert-danger mt-3">
                    <i class="fas fa-exclamation-triangle"></i>
                    @validationMessage
                </div>
            }
        </div>
    </div>
</div>


@using Web_health_app.Models.Models
@using Web_health_app.Web.ApiClients
@using Microsoft.AspNetCore.Components
@inject UserApiClient UserApi
@inject RoleApiClient RoleApi
@inject RoleUserApiClient RoleUserApi
@inject GroupApiClient GroupApi
@inject DepartmentApiClient DepartmentApi
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@code {
    // User form data
    private CreateUserDto createUserDto = new CreateUserDto();
    private string confirmPassword = string.Empty;

    // Role management
    private List<RoleInfoDto> availableRoles = new List<RoleInfoDto>();
    private Dictionary<string, bool> selectedRoles = new Dictionary<string, bool>();
    private List<string> selectedRolesList => selectedRoles.Where(sr => sr.Value).Select(sr => sr.Key).ToList();

    // Group management
    private List<GroupInfoDto> availableGroups = new List<GroupInfoDto>();
    private string selectedGroupId = string.Empty;

    // Manager management
    private List<UserInfoDto> availableManagers = new List<UserInfoDto>();

    // Loading states
    private bool isLoading = false;
    private bool isLoadingRoles = false;
    private bool isLoadingGroups = false;
    private bool isLoadingManagers = false;
    private bool isLoadingDepartments = false;
    private bool isSaving = false;

    // Form validation
    private bool showPasswordValidation = false;
    private string validationMessage = string.Empty;
    private bool isFormValid = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableRoles();
        await LoadAvailableGroups();
        await LoadDepartments();
    }

    private async Task LoadAvailableRoles()
    {
        try
        {
            isLoadingRoles = true;
            StateHasChanged();

            var response = await RoleApi.GetActiveRolesAsync();
            if (response.IsSuccess && response.Data != null)
            {
                availableRoles = response.Data;

                // Initialize selected roles dictionary
                selectedRoles.Clear();
                foreach (var role in availableRoles)
                {
                    selectedRoles[role.RoleId] = false;
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Failed to load roles: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Exception loading roles: {ex.Message}");
        }
        finally
        {
            isLoadingRoles = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableGroups()
    {
        try
        {
            isLoadingGroups = true;
            StateHasChanged();

            // Get all active groups with a larger page size to get all available groups
            var response = await GroupApi.GetAllGroupsAsync(pageNumber: 1, pageSize: 100, includeInactive: false);
            if (response.IsSuccess && response.Data != null && response.Data.Groups != null)
            {
                availableGroups = response.Data.Groups;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Failed to load groups: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Exception loading groups: {ex.Message}");
        }
        finally
        {
            isLoadingGroups = false;
            StateHasChanged();
        }
    }

    private List<DepartmentInfoDto> availableDepartments = new();
    private async Task LoadDepartments()
    {
        try
        {
            isLoadingDepartments = true;
            StateHasChanged();

            var response = await DepartmentApi.GetAllDepartmentsSimpleAsync();
            if (response.IsSuccess && response.Data != null)
            {
                availableDepartments = response.Data;
            }
            else
            {
                availableDepartments = new();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Exception loading departments: {ex.Message}");
            availableDepartments = new();
        }
        finally
        {
            isLoadingDepartments = false;
            StateHasChanged();
        }
    }

    private void OnRoleSelectionChanged(string roleId)
    {
        if (selectedRoles.ContainsKey(roleId))
        {
            selectedRoles[roleId] = !selectedRoles[roleId];
        }
        StateHasChanged();
    }

    private void RemoveRole(string roleId)
    {
        if (selectedRoles.ContainsKey(roleId))
        {
            selectedRoles[roleId] = false;
        }
        StateHasChanged();
    }

    private bool ValidateForm()
    {
        validationMessage = string.Empty;

        // Basic validation
        if (string.IsNullOrWhiteSpace(createUserDto.UserName))
        {
            validationMessage = "Tên người dùng không được để trống";
            return false;
        }

        if (string.IsNullOrWhiteSpace(createUserDto.Password))
        {
            validationMessage = "Mật khẩu không được để trống";
            return false;
        }

        if (createUserDto.Password != confirmPassword)
        {
            validationMessage = "Mật khẩu xác nhận không khớp";
            return false;
        }

        if (string.IsNullOrWhiteSpace(createUserDto.FullName))
        {
            validationMessage = "Họ và tên không được để trống";
            return false;
        }

        // Password strength validation
        if (createUserDto.Password.Length < 6)
        {
            validationMessage = "Mật khẩu phải có ít nhất 6 ký tự";
            return false;
        }

        return true;
    }

    private async Task HandleSubmit()
    {
        if (isSaving) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            // Validate form
            if (!ValidateForm())
            {
                await JSRuntime.InvokeVoidAsync("alert", validationMessage);
                return;
            }

            // Step 1: Create user
            var userResponse = await UserApi.CreateUserAsync(createUserDto);
            if (!userResponse.IsSuccess || userResponse.Data == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Lỗi tạo người dùng: {userResponse.Message}");
                return;
            }

            var createdUser = userResponse.Data;

            // Step 2: Assign roles if any selected
            if (selectedRolesList.Any())
            {
                var roleAssignResponse = await RoleUserApi.AssignRolesToUserAsync(createdUser.UserId, selectedRolesList);
                if (!roleAssignResponse.IsSuccess)
                {
                    // User created but role assignment failed - show warning
                    await JSRuntime.InvokeVoidAsync("alert",
                    $"Người dùng đã được tạo thành công nhưng có lỗi khi gán quyền: {roleAssignResponse.Message}");
                }
            }

            // Step 3: Assign group if selected
            if (!string.IsNullOrEmpty(selectedGroupId))
            {
                var groupAssignResponse = await GroupApi.AddUsersToGroupAsync(selectedGroupId, new List<Guid> { createdUser.UserId });
                if (!groupAssignResponse.IsSuccess)
                {
                    // User created but group assignment failed - show warning
                    await JSRuntime.InvokeVoidAsync("alert",
                    $"Người dùng đã được tạo thành công nhưng có lỗi khi gán nhóm: {groupAssignResponse.Message}");
                }
            }

            // Success
            await JSRuntime.InvokeVoidAsync("alert", "Thêm người dùng thành công!");

            // Navigate back or reset form
            Navigation.NavigateTo("/accountAuthManage");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Lỗi không xác định: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        createUserDto = new CreateUserDto();
        confirmPassword = string.Empty;
        selectedGroupId = string.Empty;

        // Reset role selections
        foreach (var key in selectedRoles.Keys.ToList())
        {
            selectedRoles[key] = false;
        }

        validationMessage = string.Empty;
        StateHasChanged();
    }

    private void CancelAndGoBack()
    {
        Navigation.NavigateTo("/accountAuthManage");
    }
    private async Task LoadAvailableManagers()
    {
        // Default behavior if no level is specified
        if (createUserDto.LevelSecurity > 0)
        {
            await LoadAvailableManagers((int)createUserDto.LevelSecurity);
        }
    }

    private async Task LoadAvailableManagers(int levelSecurity)
    {
        try
        {
            isLoadingManagers = true;
            StateHasChanged();

            var response = await UserApi.GetUsersByCompareSecurityLevelAsync(levelSecurity);

            if (response.IsSuccess && response.Data != null)
            {
                // Filter users who have higher or equal security level (can manage this user)
                availableManagers = response.Data
                .Where(u => u.LevelSecurity <= levelSecurity && u.UserStatus == 1) // Only active users
                .OrderBy(u => u.FullName ?? u.UserName)
                .ToList();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Failed to load managers: {response.Message}");
                availableManagers = new List<UserInfoDto>();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading managers: {ex.Message}");
            availableManagers = new List<UserInfoDto>();
        }
        finally
        {
            isLoadingManagers = false;
            StateHasChanged();
        }
    }
    private void ClearAllRoles()
    {
        selectedRolesList.Clear();
    }

    // Helper methods for role statistics
    private int GetRolePermissionCount(RoleInfoDto role)
    {
        return role.PermissionCount;
    }

    private int GetRoleUserCount(RoleInfoDto role)
    {
        return role.UserCount;
    }

    private string GetRoleStatusClass(RoleInfoDto role)
    {
        return role.IsActive ? "status-active" : "status-inactive";
    }

    private string GetRoleStatusText(RoleInfoDto role)
    {
        return role.IsActive ? "Hoạt động" : "Không hoạt động";
    }
}