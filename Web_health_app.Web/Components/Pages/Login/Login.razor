@page "/login"  
@using Web_health_app.Models.Models  
@using Web_health_app.Web.Components.Layout  
@using Microsoft.AspNetCore.Components.Forms  
@using Web_health_app.Web.ApiClients  
@inject NavigationManager NavigationManager  
@inject IConfiguration Configuration  
@inject LoginApiClient LoginClient  
@layout EmptyLayout  
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container">  
    <div class="row justify-content-center mt-5">  
        <div class="col-md-6 col-lg-4">  
            <div class="card shadow">  
                <div class="card-header bg-primary text-white text-center py-3">  
                    <h3 class="mb-0">Đăng nhập</h3>  
                </div>  
                <div class="card-body p-4">  
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">  
                    
                        <ValidationSummary class="text-danger mb-3" />  

                        <div class="form-group mb-3">  
                            <label for="username" class="form-label">Tên đăng nhập</label>  
                            <InputText @bind-Value="loginModel.Username" class="form-control"  
                                placeholder="Nhập tên đăng nhập hoặc email" />  
                            <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />  
                        </div>  

                        <div class="form-group mb-3">  
                            <label for="password" class="form-label">Mật khẩu</label>  
                            <InputText @bind-Value="loginModel.Password" type="password"  
                                class="form-control" placeholder="Nhập mật khẩu" />  
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />  
                        </div>  

                        @if (!string.IsNullOrEmpty(errorMessage))  
                        {  
                            <div class="alert alert-danger mb-3">@errorMessage</div>  
                        }  

                        <div class="d-grid">  
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">  
                                @if (isLoading)  
                                {  
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>  
                                    <span class="ms-1">Đang đăng nhập...</span>  
                                }  
                                else  
                                {  
                                    <span>Đăng nhập</span>  
                                }  
                            </button>  
                        </div>  
                    </EditForm>  
                </div>  
            </div>  
        </div>  
    </div>  
</div>  

@code {
    [SupplyParameterFromForm]
    private LoginModel? loginModel { get; set; }

    private bool isLoading = false;
    private string? errorMessage;

    private bool shouldNavigate = false;
    private bool hasRendered = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Debug check to ensure values are not null before proceeding
            if (string.IsNullOrEmpty(loginModel.Username) || string.IsNullOrEmpty(loginModel.Password))
            {
                errorMessage = "Tên đăng nhập và mật khẩu không được để trống.";
                return;
            }

            Console.WriteLine($"Attempting login with Username: {loginModel.Username}, Password length: {loginModel.Password?.Length ?? 0}");

            var response = await LoginClient.LoginAsync(loginModel);

            if (response.IsSuccess && response.Data != null)
            {
                // Đợi một chút để đảm bảo token đã được store
                await Task.Delay(200);

                try
                {
                    NavigationManager.NavigateTo("/weather", forceLoad: true);
                }
                catch (NavigationException)
                {
                    // Nếu vẫn lỗi, set flag để navigate trong OnAfterRenderAsync
                    shouldNavigate = true;
                    StateHasChanged();
                }
            }
            else
            {
                // Login failed - display error message
                errorMessage = response.Message ?? "Đăng nhập thất bại. Vui lòng kiểm tra tên đăng nhập và mật khẩu.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Đăng nhập thất bại: " + ex.Message;
            Console.WriteLine($"Exception during login: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Đảm bảo UI được cập nhật
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
        }

        if (shouldNavigate && hasRendered)
        {
            shouldNavigate = false;
            try
            {
                await JSRuntime.InvokeVoidAsync("window.location.href", "/weather");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JavaScript navigation failed: {ex}");
                // Fallback: thử navigation trực tiếp lần nữa
                try
                {
                    NavigationManager.NavigateTo("/weather", forceLoad: true);
                }
                catch (Exception navEx)
                {
                    Console.WriteLine($"Final navigation attempt failed: {navEx}");
                    errorMessage = "Không thể chuyển trang. Vui lòng thử lại.";
                    isLoading = false;
                    StateHasChanged();
                }
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Ensure the model is properly initialized
        if (loginModel == null)
        {
            loginModel = new LoginModel { Username = string.Empty, Password = string.Empty };
        }
    }
}