@page "/login"  
@using Web_health_app.Models.Models  
@using Web_health_app.Web.Components.Layout  
@using Microsoft.AspNetCore.Components.Forms  
@using Web_health_app.Web.ApiClients  
@inject NavigationManager NavigationManager  
@inject IConfiguration Configuration  
@inject LoginApiClient LoginClient  
@layout EmptyLayout  
@inject IJSRuntime JSRuntime


<link href="/css/login/login.css" rel="stylesheet" />
<script src="/js/login/login.js"></script>

<div class="login-container">
    <div class="login-card">
        <!-- Left Panel - Login Form -->
        <div class="login-left-panel">
            <div class="login-form-container">
                <div class="form-header">
                    <h1 class="login-title">Login</h1>
                    <p class="login-subtitle">Enter your account details</p>
                </div>
                
                <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
                    <div class="form-fields">
                        <div class="form-group">
                            <label class="form-label">Username</label>
                            <InputText @bind-Value="loginModel.Username" 
                                      class="form-input" 
                                      id="username"
                                      placeholder="Enter your username or email" />
                            <ValidationMessage For="@(() => loginModel.Username)" class="validation-message" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">Password</label>
                            <div class="password-field">
                                <InputText @bind-Value="loginModel.Password" 
                                          type="@(showPassword ? "text" : "password")"
                                          class="form-input" 
                                          id="password"
                                          placeholder="Enter your password" />
                                <button type="button" 
                                        class="password-toggle" 
                                        @onclick="TogglePasswordVisibility"
                                        id="passwordToggle">
                                    @if (showPassword)
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                            <path d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 1-4.243-4.243m4.242 4.242L9.88 9.88" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                            <path d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                            <path d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                    }
                                </button>
                            </div>
                            <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
                        </div>
                        
                        <a  class="forgot-password">Forgot Password?</a>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message">@errorMessage</div>
                    }

                    <button type="submit" class="login-button" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <div class="spinner"></div>
                            <span>Đang đăng nhập...</span>
                        }
                        else
                        {
                            <span>Login</span>
                        }
                    </button>
                </EditForm>
            </div>
        </div>

        <!-- Right Panel - Welcome Message -->
        <div class="login-right-panel">
            <div>
                <h1 class="welcome-text">Welcome to<br>student portal</h1>
                <p class="welcome-subtitle">Login to access your account</p>
            </div>
        </div>
    </div>
</div>  

@code {
    [SupplyParameterFromForm]
    private LoginModel? loginModel { get; set; }

    private bool isLoading = false;
    private string? errorMessage;
    private bool showPassword = false;

    private bool shouldNavigate = false;
    private bool hasRendered = false;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Debug check to ensure values are not null before proceeding
            if (string.IsNullOrEmpty(loginModel.Username) || string.IsNullOrEmpty(loginModel.Password))
            {
                errorMessage = "Username and password cannot be empty.";
                return;
            }

            Console.WriteLine($"Attempting login with Username: {loginModel.Username}, Password length: {loginModel.Password?.Length ?? 0}");

            var response = await LoginClient.LoginAsync(loginModel);

            if (response.IsSuccess && response.Data != null)
            {
                // Wait a bit to ensure token has been stored
                await Task.Delay(200);

                try
                {
                    NavigationManager.NavigateTo("/weather", forceLoad: true);
                }
                catch (NavigationException)
                {
                    // If still fails, set flag to navigate in OnAfterRenderAsync
                    shouldNavigate = true;
                    StateHasChanged();
                }
            }
            else
            {
                // Login failed - display error message
                errorMessage = response.Message ?? "Login failed. Please check your username and password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Login failed: " + ex.Message;
            Console.WriteLine($"Exception during login: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Ensure UI is updated
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
        }

        if (shouldNavigate && hasRendered)
        {
            shouldNavigate = false;
            try
            {
                await JSRuntime.InvokeVoidAsync("window.location.href", "/weather");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JavaScript navigation failed: {ex}");
                // Fallback: try navigation directly again
                try
                {
                    NavigationManager.NavigateTo("/weather", forceLoad: true);
                }
                catch (Exception navEx)
                {
                    Console.WriteLine($"Final navigation attempt failed: {navEx}");
                    errorMessage = "Unable to navigate. Please try again.";
                    isLoading = false;
                    StateHasChanged();
                }
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Ensure the model is properly initialized
        if (loginModel == null)
        {
            loginModel = new LoginModel { Username = string.Empty, Password = string.Empty };
        }
    }
}