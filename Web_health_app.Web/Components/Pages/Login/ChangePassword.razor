@page "/changepassword"
@using Web_health_app.Models.Models
@using Web_health_app.Web.Components.Layout
@using Microsoft.AspNetCore.Components.Forms
@using Web_health_app.Web.ApiClients
@* @using Microsoft.AspNetCore.Components.Authorization *@
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@* @inject AuthenticationStateProvider AuthStateProvider *@
@inject UserApiClient UserApi

@layout EmptyLayout

<link href="/css/login/change-password.css" rel="stylesheet" />

<div class="change-password-container">
    <div class="change-password-card">
        <!-- Header Section -->
        <div class="header-section">
            <div class="back-button-container">
                <button type="button" class="back-button" @onclick="NavigateBack">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none">
                        <path d="M19 12H5m0 0l7 7m-7-7l7-7" stroke="currentColor" stroke-width="2"
                            stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                    Back
                </button>
            </div>
            <div class="header-content">
                <h1 class="page-title">Change Password</h1>
                <p class="page-subtitle">Update your account password</p>
            </div>
        </div>

        <!-- Content Section -->
        <div class="content-section">
            @if (isLoadingUser)
            {
                <div class="loading-container">
                    <div class="loading-spinner"></div>
                    <p class="loading-text">Loading user information...</p>
                </div>
            }
            else if (currentUser != null)
            {
                <!-- User Information Card -->
                <div class="user-info-card">
                    <div class="user-avatar">
                        <div class="avatar-circle">
                            @if (!string.IsNullOrEmpty(currentUser.FullName))
                            {
                                <span class="avatar-text">@GetUserInitials(currentUser.FullName)</span>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none">
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" stroke="currentColor" stroke-width="2"
                                        stroke-linecap="round" stroke-linejoin="round" />
                                    <circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="2" />
                                </svg>
                            }
                        </div>
                    </div>
                    <div class="user-details">
                        <h3 class="user-name">@(currentUser.FullName ?? "Unknown User")</h3>
                        <p class="user-email">@(currentUser.UserName ?? "No email")</p>
                        <div class="user-meta">
                            <span class="meta-item">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
                                    fill="none">
                                    <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" stroke="currentColor"
                                        stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="2" />
                                </svg>
                                @(currentUser.Department ?? "No department")
                            </span>
                            <span class="meta-item">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
                                    fill="none">
                                    <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2" />
                                    <path d="M12 1v6m0 6v6" stroke="currentColor" stroke-width="2" />
                                </svg>
                                Security Level @currentUser.LevelSecurity
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Change Password Form -->
                <div class="form-card">
                    <div class="form-header">
                        <h2 class="form-title">Password Settings</h2>
                        <p class="form-description">Choose a strong password to keep your account secure</p>
                    </div>

                    <EditForm Model="changePasswordModel" OnValidSubmit="HandleChangePassword"
                        FormName="ChangePasswordForm">
                        <div class="form-fields">
                            <!-- Current Password -->
                            <div class="form-group">
                                <label class="form-label">Current Password</label>
                                <div class="password-field">
                                    <InputText @bind-Value="changePasswordModel.CurrentPassword"
                                        type="@(showCurrentPassword ? "text" : "password")" class="form-input"
                                        placeholder="Enter your current password" />
                                    <button type="button" class="password-toggle"
                                        @onclick="() => showCurrentPassword = !showCurrentPassword">
                                        @if (showCurrentPassword)
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"
                                                fill="none">
                                                <path
                                                    d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 1-4.243-4.243m4.242 4.242L9.88 9.88"
                                                    stroke="currentColor" stroke-width="1.5" stroke-linecap="round"
                                                    stroke-linejoin="round" />
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"
                                                fill="none">
                                                <path
                                                    d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z"
                                                    stroke="currentColor" stroke-width="1.5" stroke-linecap="round"
                                                    stroke-linejoin="round" />
                                                <path d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" stroke="currentColor"
                                                    stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                            </svg>
                                        }
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => changePasswordModel.CurrentPassword)"
                                    class="validation-message" />
                            </div>

                            <!-- New Password -->
                            <div class="form-group">
                                <label class="form-label">New Password</label>
                                <div class="password-field">
                                    <InputText @bind-Value="changePasswordModel.NewPassword"
                                        type="@(showNewPassword ? "text" : "password")" class="form-input"
                                        placeholder="Enter your new password" />
                                    <button type="button" class="password-toggle"
                                        @onclick="() => showNewPassword = !showNewPassword">
                                        @if (showNewPassword)
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"
                                                fill="none">
                                                <path
                                                    d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 1-4.243-4.243m4.242 4.242L9.88 9.88"
                                                    stroke="currentColor" stroke-width="1.5" stroke-linecap="round"
                                                    stroke-linejoin="round" />
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"
                                                fill="none">
                                                <path
                                                    d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z"
                                                    stroke="currentColor" stroke-width="1.5" stroke-linecap="round"
                                                    stroke-linejoin="round" />
                                                <path d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" stroke="currentColor"
                                                    stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                            </svg>
                                        }
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => changePasswordModel.NewPassword)"
                                    class="validation-message" />
                                <!-- Password Strength Indicator -->
                                @if (!string.IsNullOrEmpty(changePasswordModel.NewPassword))
                                {
                                    <div class="password-strength">
                                        <div class="strength-bar">
                                            <div class="strength-fill @GetPasswordStrengthClass()"></div>
                                        </div>
                                        <span class="strength-text">@GetPasswordStrengthText()</span>
                                    </div>
                                }
                            </div>

                            <!-- Confirm New Password -->
                            <div class="form-group">
                                <label class="form-label">Confirm New Password</label>
                                <div class="password-field">
                                    <InputText @bind-Value="changePasswordModel.ConfirmPassword"
                                        type="@(showConfirmPassword ? "text" : "password")" class="form-input"
                                        placeholder="Confirm your new password" />
                                    <button type="button" class="password-toggle"
                                        @onclick="() => showConfirmPassword = !showConfirmPassword">
                                        @if (showConfirmPassword)
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"
                                                fill="none">
                                                <path
                                                    d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 1-4.243-4.243m4.242 4.242L9.88 9.88"
                                                    stroke="currentColor" stroke-width="1.5" stroke-linecap="round"
                                                    stroke-linejoin="round" />
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"
                                                fill="none">
                                                <path
                                                    d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z"
                                                    stroke="currentColor" stroke-width="1.5" stroke-linecap="round"
                                                    stroke-linejoin="round" />
                                                <path d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" stroke="currentColor"
                                                    stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                            </svg>
                                        }
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => changePasswordModel.ConfirmPassword)"
                                    class="validation-message" />
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="error-message">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none">
                                    <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" />
                                    <line x1="15" y1="9" x2="9" y2="15" stroke="currentColor" stroke-width="2" />
                                    <line x1="9" y1="9" x2="15" y2="15" stroke="currentColor" stroke-width="2" />
                                </svg>
                                @errorMessage
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="success-message">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none">
                                    <path d="M9 12l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                        stroke-linejoin="round" />
                                    <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" />
                                </svg>
                                @successMessage
                            </div>
                        }

                        <div class="form-actions">
                            <button type="button" class="cancel-button" @onclick="NavigateBack">
                                Cancel
                            </button>
                            <button type="submit" class="submit-button" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <div class="spinner"></div>
                                    <span>Updating...</span>
                                }
                                else
                                {
                                    <span>Update Password</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    </div>
</div>

@inject IJSRuntime JS

@code {

    [Parameter, SupplyParameterFromQuery] public string? UserName { get; set; }

    private UserInfoDto? currentUser;
    private bool isLoadingUser = true;
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;

    // Password visibility toggles
    private bool showCurrentPassword = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    [SupplyParameterFromForm]
    private FirstChangePasswordModel changePasswordModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(UserName))
        {
            await LoadCurrentUser();
        }
        else
        {
            errorMessage = "Username parameter is required";
            isLoadingUser = false;
        }
    }
    private bool _notified;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_notified)
        {
            _notified = true;
            await JS.InvokeVoidAsync("alert", "Bạn cần phải đổi mật khẩu lần đầu!");
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            isLoadingUser = true;

            // Sử dụng UserApiClient để lấy thông tin người dùng từ username
            var response = await UserApi.GetUserByUsernameAsync(UserName);

            if (response.IsSuccess && response.Data != null)
            {
                currentUser = response.Data;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load user information";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load user information: " + ex.Message;
        }
        finally
        {
            isLoadingUser = false;
        }
    }

    private async Task HandleChangePassword()
    {
        errorMessage = null;
        successMessage = null;
        isLoading = true;

        try
        {
            if (changePasswordModel.NewPassword != changePasswordModel.ConfirmPassword)
            {
                errorMessage = "New password and confirm password do not match.";
                return;
            }
            changePasswordModel.Username = currentUser.UserName;

            // Note: Implement change password logic here
            // This would typically call an API endpoint
            var result =  await UserApi.ChangePassword(changePasswordModel); // Simulate API call

            successMessage = "Password updated successfully!";

           

            // Thay thế MessageBox bằng JavaScript alert
            await JSRuntime.InvokeVoidAsync("alert", "Đổi mật khẩu thành công, vui lòng đăng nhập lại!");

            NavigateBack();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to update password: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private string GetUserInitials(string fullName)
    {
        if (string.IsNullOrEmpty(fullName))
            return "U";

        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[^1][0]}".ToUpper();
        }

        return fullName[0].ToString().ToUpper();
    }

    private string GetPasswordStrengthClass()
    {
        var strength = CalculatePasswordStrength(changePasswordModel.NewPassword);
        return strength switch
        {
            1 => "weak",
            2 => "fair",
            3 => "good",
            4 => "strong",
            _ => "very-weak"
        };
    }

    private string GetPasswordStrengthText()
    {
        var strength = CalculatePasswordStrength(changePasswordModel.NewPassword);
        return strength switch
        {
            1 => "Weak",
            2 => "Fair",
            3 => "Good",
            4 => "Strong",
            _ => "Very Weak"
        };
    }

    private int CalculatePasswordStrength(string password)
    {
        if (string.IsNullOrEmpty(password))
            return 0;

        int score = 0;

        if (password.Length >= 8) score++;
        if (password.Any(char.IsUpper)) score++;
        if (password.Any(char.IsLower)) score++;
        if (password.Any(char.IsDigit)) score++;
        if (password.Any(c => !char.IsLetterOrDigit(c))) score++;

        return Math.Min(score, 4);
    }

    
}
