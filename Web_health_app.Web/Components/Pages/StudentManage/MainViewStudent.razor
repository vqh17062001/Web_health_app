@page "/studentmanage/mainviewstudent"
@using Microsoft.AspNetCore.Authorization
@using Web_health_app.Web.Components.Layout
@using Web_health_app.Models.Models
@using Web_health_app.Web.ApiClients
@inject StudentApiClient StudentApiClient
@inject IJSRuntime JSRuntime
@layout MainLayout
@attribute [Authorize(Roles = "ACCESS.MainViewStudent")]

<link href="/css/StudentManage/MainViewStudent.css" rel="stylesheet" />

<div class="student-manage-page">
    <div class="container-fluid mt-4">
        <div class="row mb-4">
            <div class="col-12">
                <h3 class="mb-4">Quản lý Sinh viên</h3>

                <!-- Filter and Search Bar -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <label for="filterSelect" class="form-label">Lọc theo:</label>
                                <select id="filterSelect" class="form-select" @bind="filterType"
                                    @bind:after="OnFilterChanged">
                                    <option value="all">Tất cả sinh viên</option>
                                    <option value="active">Đang học</option>
                                    <option value="inactive">Tạm nghỉ</option>
                                    <option value="graduated">Đã tốt nghiệp</option>
                                    <option value="department">Theo khoa</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="searchInput" class="form-label">Tìm kiếm:</label>
                                <input type="text" id="searchInput" class="form-control"
                                    placeholder="Nhập mã sinh viên, tên hoặc email..." @bind="searchTerm"
                                    @bind:after="OnSearchChanged">
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">&nbsp;</label>
                                @if (isLoading)
                                {
                                    <div class="d-flex align-items-center">
                                        <div class="spinner-border spinner-border-sm me-2" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <span>Đang tải...</span>
                                    </div>
                                }
                                else
                                {
                                    <a href="/studentmanage/add" class="btn btn-primary w-100 d-block">
                                        <i class="fas fa-plus me-2"></i>Thêm sinh viên
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content Cards -->
        <div class="row">
            <div class="col-12">
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Đang tải...</span>
                        </div>
                        <p class="mt-2">Đang tải danh sách sinh viên...</p>
                    </div>
                }
                else if (students == null || !students.Any())
                {
                    <div class="text-center py-5">
                        <div class="text-muted">
                            <i class="fas fa-users fa-3x mb-3"></i>
                            <p>Không có sinh viên nào được tìm thấy</p>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row g-4" id="contentCards">
                        @foreach (var student in students)
                        {
                            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                                <div class="card h-100 shadow-sm">
                                    <div class="card-header @GetStatusCardClass(student.Status) text-white d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">Sinh viên</h6>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-light dropdown-toggle" type="button"
                                                id="dropdownMenuButton_@student.StudentId" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="fas fa-ellipsis-v"></i>
                                            </button>
                                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton_@student.StudentId">
                                                <li><a class="dropdown-item" href="/studentmanage/detail/@student.StudentId"><i class="fas fa-eye me-2"></i>Xem chi tiết</a></li>
                                                <li><a class="dropdown-item" href="/studentmanage/edit/@student.StudentId"><i class="fas fa-edit me-2"></i>Chỉnh sửa</a></li>
                                                <li>
                                                    <hr class="dropdown-divider">
                                                </li>
                                                <li><a class="dropdown-item text-danger" href="#" @onclick="() => DeleteStudent(student.StudentId)" @onclick:preventDefault="true"><i class="fas fa-trash me-2"></i>Xóa</a></li>
                                            </ul>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div class="d-flex align-items-center mb-3">
                                            <div class="avatar-circle @GetAvatarClass(student.Gender) text-white me-3">
                                                <i class="fas fa-user-graduate"></i>
                                            </div>
                                            <div>
                                                <h6 class="mb-1">@student.Name</h6>
                                                <small class="text-muted">@student.StudentId</small>
                                            </div>
                                        </div>
                                        <div class="mb-2">
                                            <span class="badge @GetStatusBadgeClass(student.Status) me-1">@student.StatusString</span>
                                            @if (!string.IsNullOrEmpty(student.Department))
                                            {
                                                <span class="badge bg-secondary">@student.Department</span>
                                            }
                                        </div>
                                        @if (!string.IsNullOrEmpty(student.Department))
                                        {
                                            <p class="card-text text-muted small mb-2">Đơn vị: @student.Department</p>
                                        }
                                        @if (!string.IsNullOrEmpty(student.Email))
                                        {
                                            <p class="card-text text-muted small mb-2">Email: @student.Email</p>
                                        }
                                        @if (!string.IsNullOrEmpty(student.Phone))
                                        {
                                            <p class="card-text text-muted small mb-2">SĐT: @student.Phone</p>
                                        }
                                        @if (!string.IsNullOrEmpty(student.ManageByName))
                                        {
                                            <p class="card-text text-muted small">Quản lý: @student.ManageByName</p>
                                        }
                                    </div>
                                    <div class="card-footer bg-light">
                                        <small class="text-muted">
                                            @if (student.UpdateAt.HasValue)
                                            {
                                                <span>Cập nhật: @student.UpdateAt.Value.ToString("dd/MM/yyyy")</span>
                                            }
                                            else
                                            {
                                                <span>Tạo: @student.CreatedAt.ToString("dd/MM/yyyy")</span>
                                            }
                                        </small>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Statistics Summary -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Thống kê tổng quan</h5>
                        @if (statistics != null)
                        {
                            <div class="row text-center">
                                <div class="col-md-2 col-6">
                                    <div class="stat-item">
                                        <div class="stat-number text-primary">@statistics.TotalStudents.ToString("N0")</div>
                                        <div class="stat-label">Tổng sinh viên</div>
                                    </div>
                                </div>
                                <div class="col-md-2 col-6">
                                    <div class="stat-item">
                                        <div class="stat-number text-success">@statistics.ActiveStudents.ToString("N0")</div>
                                        <div class="stat-label">Đang học</div>
                                    </div>
                                </div>
                                <div class="col-md-2 col-6">
                                    <div class="stat-item">
                                        <div class="stat-number text-warning">@statistics.InactiveStudents.ToString("N0")</div>
                                        <div class="stat-label">Tạm nghỉ</div>
                                    </div>
                                </div>
                                <div class="col-md-2 col-6">
                                    <div class="stat-item">
                                        <div class="stat-number text-info">@statistics.StudentsWithSyncData.ToString("N0")</div>
                                        <div class="stat-label">Có dữ liệu đồng bộ</div>
                                    </div>
                                </div>
                                <div class="col-md-2 col-6">
                                    <div class="stat-item">
                                        <div class="stat-number text-info">@statistics.StudentsOnline.ToString("N0")</div>
                                        <div class="stat-label">Trực tuyến</div>
                                    </div>
                                </div>
                                <div class="col-md-2 col-6">
                                    <div class="stat-item">
                                        <div class="stat-number text-info">@statistics.StudentsOffline.ToString("N0")</div>
                                        <div class="stat-label">Ngoại tuyến</div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Đang tải thống kê...</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Pagination -->
        @if (pagination != null && pagination.TotalPages > 1)
        {
            <div class="row mt-4">
                <div class="col-12">
                    <nav aria-label="Phân trang">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(pagination.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" href="#" @onclick="() => GoToPage(currentPage - 1)" @onclick:preventDefault="true">Trước</a>
                            </li>
                            
                            @{
                                int startPage = Math.Max(1, currentPage - 2);
                                int endPage = Math.Min(pagination.TotalPages, currentPage + 2);
                            }
                            
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                int pageNum = i; // Capture the loop variable
                                <li class="page-item @(pageNum == currentPage ? "active" : "")">
                                    <a class="page-link" href="#" @onclick="() => GoToPage(pageNum)" @onclick:preventDefault="true">@pageNum</a>
                                </li>
                            }
                            
                            <li class="page-item @(pagination.HasNextPage ? "" : "disabled")">
                                <a class="page-link" href="#" @onclick="() => GoToPage(currentPage + 1)" @onclick:preventDefault="true">Sau</a>
                            </li>
                        </ul>
                    </nav>
                    <div class="text-center mt-2">
                        <small class="text-muted">
                            Hiển thị @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, pagination.TotalCount) 
                            trong tổng số @pagination.TotalCount sinh viên
                        </small>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<StudentInfoDto> students = new();
    private StudentsPaginationInfo? pagination;
    private StudentStatisticsDto? statistics;
    private bool isLoading = false;
    private string searchTerm = "";
    private string filterType = "all";
    private int currentPage = 1;
    private int pageSize = 12;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
        await LoadStatistics();
    }

    private async Task LoadStudents()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var includeInactive = filterType == "all" || filterType == "inactive";
            var response = await StudentApiClient.GetAllStudentsAsync(currentPage, pageSize, searchTerm, includeInactive);

            if (response.IsSuccess && response.Data != null)
            {
                students = response.Data.Students ?? new List<StudentInfoDto>();
                pagination = response.Data.Pagination;
                
                // Cập nhật StatusString cho từng student
              
            }
            else
            {
                students = new List<StudentInfoDto>();
                // Log error hoặc hiển thị thông báo lỗi
                Console.WriteLine($"Error loading students: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception loading students: {ex.Message}");
            students = new List<StudentInfoDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            var response = await StudentApiClient.GetStudentStatisticsAsync();
            if (response.IsSuccess && response.Data != null)
            {
                statistics = response.Data;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception loading statistics: {ex.Message}");
        }
    }

    private async Task OnSearchChanged()
    {
        currentPage = 1; // Reset về trang đầu khi search
        await Task.Delay(500); // Debounce
        await LoadStudents();
    }

    private async Task OnFilterChanged()
    {
        currentPage = 1; // Reset về trang đầu khi filter
        await LoadStudents();
    }

    private async Task GoToPage(int page)
    {
        if (page < 1 || pagination == null || page > pagination.TotalPages || page == currentPage)
        {
            return; // Không làm gì nếu trang không hợp lệ hoặc đã ở trang hiện tại
        }

        currentPage = page;
        await LoadStudents();
    }

    private async Task DeleteStudent(string studentId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc chắn muốn xóa sinh viên {studentId}?");
        if (confirmed)
        {
            try
            {
                var response = await StudentApiClient.DeleteStudentAsync(studentId);
                if (response.IsSuccess)
                {
                    await LoadStudents(); // Reload danh sách
                    await LoadStatistics(); // Reload thống kê
                }
                else
                {
                    // Hiển thị thông báo lỗi
                    Console.WriteLine($"Error deleting student: {response.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception deleting student: {ex.Message}");
            }
        }
    }

    private string GetStatusCardClass(short status)
    {
        return status switch
        {
            1 => "bg-success", // Đang học
            0 => "bg-warning", // Tạm nghỉ
            2 => "bg-info", // Đã tốt nghiệp
            -1 => "bg-danger", // Bị đình chỉ
            _ => "bg-secondary"
        };
    }

    private string GetStatusBadgeClass(short status)
    {
        return status switch
        {
            1 => "bg-success", // Đang học
            0 => "bg-warning", // Tạm nghỉ
            2 => "bg-info", // Đã tốt nghiệp
            -1 => "bg-danger", // Bị đình chỉ
            _ => "bg-secondary"
        };
    }

    // private string GetStatusText(short status)
    // {
    //     return status switch
    //     {
    //         1 => "Đang học",
    //         0 => "Tạm nghỉ",
    //         2 => "Đã tốt nghiệp",
    //         -1 => "Bị đình chỉ",
    //         _ => "Không xác định"
    //     };
    // }

    private string GetAvatarClass(string? gender)
    {
        return gender?.ToLower() switch
        {
            "male" => "bg-primary",
            "female" => "bg-info",
            _ => "bg-secondary"
        };
    }
}
