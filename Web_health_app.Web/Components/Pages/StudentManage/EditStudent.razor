@page "/studentmanage/edit/{studentId}"
@using Microsoft.AspNetCore.Authorization
@using Web_health_app.Web.Components.Layout
@using Web_health_app.Models.Models
@using Web_health_app.Web.ApiClients
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject StudentApiClient StudentApiClient
@inject UserApiClient UserApiClient
@inject DepartmentApiClient DepartmentApiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@layout EmptyLayout
@attribute [Authorize(Roles = "ACCESS.EditStudent")]

<link href="/css/StudentManage/edit-student.css" rel="stylesheet" />

<div class="edit-student-container">
    <div class="edit-student-card">
        <!-- Header -->
        <div class="card-header">
            <div class="header-content">
                <div class="header-icon">
                    <i class="fas fa-user-edit"></i>
                </div>
                <div class="header-text">
                    <h2>Chỉnh Sửa Thông Tin Sinh Viên</h2>
                    <p>Cập nhật thông tin sinh viên trong hệ thống</p>
                </div>
            </div>
            <button type="button" class="btn-close" @onclick="NavigateToMainView">
                <i class="fas fa-times"></i>
            </button>
        </div>

        @if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Đang tải...</span>
                </div>
                <p class="mt-2">Đang tải thông tin sinh viên...</p>
            </div>
        }
        else if (currentStudent == null)
        {
            <div class="error-container">
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    Không tìm thấy thông tin sinh viên
                </div>
                <button class="btn btn-secondary" @onclick="NavigateToMainView">
                    Quay lại danh sách
                </button>
            </div>
        }
        else
        {
            <!-- Form Body -->
            <div class="card-body">
                <EditForm Model="updateStudentDto" OnValidSubmit="HandleValidSubmit" FormName="EditStudentForm">
                    <DataAnnotationsValidator />

                    <!-- Current Student Info Section -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-info-circle"></i>
                            Thông Tin Hiện Tại
                        </h3>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-hashtag"></i>
                                    Mã Sinh Viên
                                </label>
                                <div class="info-display">
                                    <i class="fas fa-id-badge"></i>
                                    @currentStudent.StudentId
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-calendar"></i>
                                    Ngày Tạo Hồ Sơ
                                </label>
                                <div class="info-display">
                                    <i class="fas fa-clock"></i>
                                    @currentStudent.CreatedAt.ToString("dd/MM/yyyy")
                                </div>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-toggle-on"></i>
                                    Trạng Thái Hiện Tại
                                </label>
                                <div class="status-badge @GetStatusClass(currentStudent.Status)">
                                    <i class="fas @GetStatusIcon(currentStudent.Status)"></i>
                                    @currentStudent.StatusString
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-edit"></i>
                                    Lần Cập Nhật Cuối
                                </label>
                                <div class="info-display">
                                    <i class="fas fa-history"></i>
                                    @(currentStudent.UpdateAt?.ToString("dd/MM/yyyy HH:mm") ?? "Chưa cập nhật")
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(currentStudent.CreatedByName))
                        {
                            <div class="form-row">
                                <div class="form-group">
                                    <label class="form-label">
                                        <i class="fas fa-user-plus"></i>
                                        Người Tạo Hồ Sơ
                                    </label>
                                    <div class="info-display">
                                        <i class="fas fa-user"></i>
                                        @currentStudent.CreatedByName
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(currentStudent.ManageByName))
                                {
                                    <div class="form-group">
                                        <label class="form-label">
                                            <i class="fas fa-user-tie"></i>
                                            Người Quản Lý Hiện Tại
                                        </label>
                                        <div class="info-display">
                                            <i class="fas fa-user-cog"></i>
                                            @currentStudent.ManageByName
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <!-- Basic Student Information Section -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-user"></i>
                            Thông Tin Cơ Bản
                        </h3>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-user"></i>
                                    Họ và Tên <span class="required">*</span>
                                </label>
                                <InputText class="form-control" @bind-Value="updateStudentDto.Name"
                                    placeholder="Nhập họ và tên đầy đủ" maxlength="100" />
                                <ValidationMessage For="@(() => updateStudentDto.Name)" class="validation-message" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-venus-mars"></i>
                                    Giới Tính
                                </label>
                                <InputSelect class="form-select" @bind-Value="updateStudentDto.Gender">
                                    <option value="">-- Chọn giới tính --</option>
                                    <option value="Male">Nam</option>
                                    <option value="Female">Nữ</option>
                                    <option value="Other">Khác</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => updateStudentDto.Gender)" class="validation-message" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-calendar-alt"></i>
                                    Ngày Sinh
                                </label>
                                <InputDate class="form-control" @bind-Value="dobDate"
                                    max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                                <ValidationMessage For="@(() => updateStudentDto.Dob)" class="validation-message" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-phone"></i>
                                    Số Điện Thoại
                                </label>
                                <InputText class="form-control" @bind-Value="updateStudentDto.Phone"
                                    placeholder="Nhập số điện thoại" maxlength="15" />
                                <ValidationMessage For="@(() => updateStudentDto.Phone)" class="validation-message" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="fas fa-envelope"></i>
                                    Email
                                </label>
                                <InputText type="email" class="form-control" @bind-Value="updateStudentDto.Email"
                                    placeholder="Nhập địa chỉ email" maxlength="100" />
                                <ValidationMessage For="@(() => updateStudentDto.Email)" class="validation-message" />
                            </div>
                        </div>
                    </div>

                    <!-- Academic Information Section -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-graduation-cap"></i>
                            Thông Tin Học Vụ
                        </h3>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-building"></i>
                                    Khoa/Viện
                                </label>
                                @if (isLoadingDepartments)
                                {
                                    <select class="form-select" disabled>
                                        <option>Đang tải danh sách khoa/viện...</option>
                                    </select>
                                }
                                else
                                {
                                    <InputSelect class="form-select" @bind-Value="updateStudentDto.Department"
                                        @bind-Value:after="OnDepartmentChanged">
                                        <option value="">-- Chọn khoa/viện --</option>
                                        @foreach (var department in availableDepartments)
                                        {
                                            <option value="@department.DepartmentCode">
                                                @department.DisplayName
                                            </option>
                                        }
                                    </InputSelect>
                                }
                                <ValidationMessage For="@(() => updateStudentDto.Department)" class="validation-message" />
                                @if (!string.IsNullOrEmpty(selectedDepartmentInfo))
                                {
                                    <small class="department-info">
                                        <i class="fas fa-info-circle"></i>
                                        @selectedDepartmentInfo
                                    </small>
                                }
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-info-circle"></i>
                                    Trạng Thái <span class="required">*</span>
                                </label>
                                <InputSelect class="form-select" @bind-Value="updateStudentDto.Status">
                                    <option value="0">Do user tạo ra</option>
                                    <option value="1">Có dữ liệu đồng bộ với Atlas</option>

                                    <option value="-1">Tạm xóa</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => updateStudentDto.Status)" class="validation-message" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="fas fa-user-tie"></i>
                                    Người Quản Lý
                                </label>
                                @if (isLoadingManagers)
                                {
                                    <select class="form-select" disabled>
                                        <option>Đang tải danh sách...</option>
                                    </select>
                                }
                                else
                                {
                                    <InputSelect class="form-select" @bind-Value="selectedManagerId"
                                        @bind-Value:after="OnManagerChanged">
                                        <option value="">-- Chọn người quản lý --</option>
                                        @foreach (var manager in availableManagers)
                                        {
                                            <option value="@manager.UserId.ToString()">
                                                @manager.UserName - @manager.FullName
                                            </option>
                                        }
                                    </InputSelect>
                                }
                                @if (!string.IsNullOrEmpty(selectedManagerInfo))
                                {
                                    <small class="manager-info">
                                        <i class="fas fa-info-circle"></i>
                                        @selectedManagerInfo
                                    </small>
                                }
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>

            <!-- Footer Actions -->
            <div class="card-footer">
                <div class="action-buttons">
                    <button type="button" class="btn btn-reset" @onclick="ResetForm">
                        <i class="fas fa-undo"></i>
                        Khôi Phục
                    </button>
                    <button type="button" class="btn btn-cancel" @onclick="NavigateToMainView">
                        <i class="fas fa-times"></i>
                        Hủy Bỏ
                    </button>
                    <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                            <span>Đang cập nhật...</span>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                            <span>Cập Nhật</span>
                        }
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(alertMessage))
{
    <div class="alert-container">
        <div class="alert @(alertType == "success" ? "alert-success" : "alert-danger")">
            <i class="fas @(alertType == "success" ? "fa-check-circle" : "fa-exclamation-triangle")"></i>
            @alertMessage
            <button type="button" class="alert-close" @onclick="() => alertMessage = string.Empty">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
}

@code {
    [Parameter] public string StudentId { get; set; } = string.Empty;

    private StudentInfoDto? currentStudent;
    private UpdateStudentDto updateStudentDto = new UpdateStudentDto();
    private List<UserInfoDto> availableManagers = new List<UserInfoDto>();
    private List<DepartmentInfoDto> availableDepartments = new List<DepartmentInfoDto>();

    private bool isLoading = false;
    private bool isLoadingManagers = false;
    private bool isLoadingDepartments = false;
    private bool isSubmitting = false;

    private string selectedManagerId = string.Empty;
    private string selectedManagerInfo = string.Empty;
    private string selectedDepartmentInfo = string.Empty;
    private DateTime? dobDate;
    private string alertMessage = string.Empty;
    private string alertType = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(StudentId))
        {
            Navigation.NavigateTo("/studentmanage/mainviewstudent");
            return;
        }

        await LoadStudentData();
        await Task.WhenAll(LoadManagers(), LoadDepartments());
    }

    private async Task LoadStudentData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await StudentApiClient.GetStudentByIdAsync(StudentId);
            if (response.IsSuccess && response.Data != null)
            {
                currentStudent = response.Data;

                // Populate UpdateStudentDto với dữ liệu hiện tại
                updateStudentDto.Name = currentStudent.Name;
                updateStudentDto.Dob = currentStudent.Dob;
                updateStudentDto.Gender = currentStudent.Gender;
                updateStudentDto.Phone = currentStudent.Phone;
                updateStudentDto.Email = currentStudent.Email;
                updateStudentDto.Status = currentStudent.Status;
                updateStudentDto.Department = currentStudent.Department;
                updateStudentDto.ManageBy = currentStudent.ManageBy;

                // Set selected manager
                if (currentStudent.ManageBy.HasValue)
                {
                    selectedManagerId = currentStudent.ManageBy.Value.ToString();
                }

                // Parse date of birth
                if (!string.IsNullOrEmpty(currentStudent.Dob))
                {
                    if (DateTime.TryParse(currentStudent.Dob, out DateTime parsedDate))
                    {
                        dobDate = parsedDate;
                    }
                }
            }
            else
            {
                currentStudent = null;
                ShowAlert("Không tìm thấy thông tin sinh viên", "error");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading student: {ex.Message}");
            ShowAlert("Có lỗi xảy ra khi tải thông tin sinh viên", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadManagers()
    {
        isLoadingManagers = true;
        StateHasChanged();

        try
        {
            var response = await UserApiClient.GetAllUsersAsync(1, 100);
            if (response.IsSuccess && response.Data != null)
            {
                // Filter users who can be managers (you might want to add role checking here)
                availableManagers = response.Data.Users.Where(u => !string.IsNullOrEmpty(u.FullName)).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading managers: {ex.Message}");
        }
        finally
        {
            isLoadingManagers = false;
            StateHasChanged();
        }
    }

    private async Task LoadDepartments()
    {
        isLoadingDepartments = true;
        StateHasChanged();

        try
        {
            var response = await DepartmentApiClient.GetAllDepartmentsAsync();
            if (response.IsSuccess && response.Data != null)
            {
                availableDepartments = response.Data.Departments;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
        }
        finally
        {
            isLoadingDepartments = false;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (currentStudent == null || isSubmitting) return;

        isSubmitting = true;
        StateHasChanged();

        try
        {
            // Update date of birth
            if (dobDate.HasValue)
            {
                updateStudentDto.Dob = dobDate.Value.ToString("yyyy-MM-dd");
            }

            // Update manager
            if (!string.IsNullOrEmpty(selectedManagerId) && Guid.TryParse(selectedManagerId, out Guid managerId))
            {
                updateStudentDto.ManageBy = managerId;
            }
            else
            {
                updateStudentDto.ManageBy = null;
            }

            var response = await StudentApiClient.UpdateStudentAsync(currentStudent.StudentId, updateStudentDto);

            if (response.IsSuccess)
            {
                ShowAlert("Cập nhật thông tin sinh viên thành công!", "success");

                // Reload student data to show updated information
                await LoadStudentData();
            }
            else
            {
                ShowAlert($"Cập nhật thất bại: {response.Message}", "error");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating student: {ex.Message}");
            ShowAlert("Có lỗi xảy ra khi cập nhật thông tin sinh viên", "error");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        if (currentStudent != null)
        {
            // Reset form to original values
            updateStudentDto.Name = currentStudent.Name;
            updateStudentDto.Dob = currentStudent.Dob;
            updateStudentDto.Gender = currentStudent.Gender;
            updateStudentDto.Phone = currentStudent.Phone;
            updateStudentDto.Email = currentStudent.Email;
            updateStudentDto.Status = currentStudent.Status;
            updateStudentDto.Department = currentStudent.Department;
            updateStudentDto.ManageBy = currentStudent.ManageBy;

            if (currentStudent.ManageBy.HasValue)
            {
                selectedManagerId = currentStudent.ManageBy.Value.ToString();
            }
            else
            {
                selectedManagerId = string.Empty;
            }

            if (!string.IsNullOrEmpty(currentStudent.Dob))
            {
                if (DateTime.TryParse(currentStudent.Dob, out DateTime parsedDate))
                {
                    dobDate = parsedDate;
                }
            }
            else
            {
                dobDate = null;
            }

            selectedManagerInfo = string.Empty;
            selectedDepartmentInfo = string.Empty;
            StateHasChanged();
        }
    }

    private void OnManagerChanged()
    {
        if (!string.IsNullOrEmpty(selectedManagerId) && Guid.TryParse(selectedManagerId, out Guid managerId))
        {
            var manager = availableManagers.FirstOrDefault(m => m.UserId == managerId);
            if (manager != null)
            {
                selectedManagerInfo = $"Bộ phận: {manager.Department ?? "Chưa xác định"}";
            }
            else
            {
                selectedManagerInfo = string.Empty;
            }
        }
        else
        {
            selectedManagerInfo = string.Empty;
        }
        StateHasChanged();
    }

    private void OnDepartmentChanged()
    {
        if (!string.IsNullOrEmpty(updateStudentDto.Department))
        {
            var department = availableDepartments.FirstOrDefault(d => d.DepartmentCode == updateStudentDto.Department);
            if (department != null)
            {
                selectedDepartmentInfo = $"Mô tả: {department.FullDescription}";
            }
            else
            {
                selectedDepartmentInfo = string.Empty;
            }
        }
        else
        {
            selectedDepartmentInfo = string.Empty;
        }
        StateHasChanged();
    }

    private void NavigateToMainView()
    {
        Navigation.NavigateTo("/studentmanage/mainviewstudent");
    }

    private void ShowAlert(string message, string type)
    {
        alertMessage = message;
        alertType = type;
        StateHasChanged();

        // Auto hide alert after 5 seconds
        _ = Task.Delay(5000).ContinueWith(t =>
        {
            InvokeAsync(() =>
    {
            if (alertMessage == message) // Only clear if it's the same message
            {
                alertMessage = string.Empty;
                StateHasChanged();
            }
        });
        });
    }

    // Helper methods for status display
    private string GetStatusClass(short status)
    {
        return status switch
        {
            1 => "active", // Đang học
            0 => "pending", // Do user tạo ra
            2 => "graduated", // Đã tốt nghiệp
            -1 => "inactive", // Tạm xóa
            _ => "unknown"
        };
    }

    private string GetStatusIcon(short status)
    {
        return status switch
        {
            1 => "fa-check-circle", // Đang học
            0 => "fa-clock", // Do user tạo ra
            2 => "fa-graduation-cap", // Đã tốt nghiệp
            -1 => "fa-ban", // Tạm xóa
            _ => "fa-question-circle"
        };
    }
}