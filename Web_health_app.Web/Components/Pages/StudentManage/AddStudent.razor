@page "/studentmanage/add"
@using Microsoft.AspNetCore.Authorization
@using Web_health_app.Web.Components.Layout
@using Web_health_app.Models.Models
@using Web_health_app.Web.ApiClients
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject StudentApiClient StudentApiClient
@inject UserApiClient UserApiClient
@inject DepartmentApiClient DepartmentApiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@layout EmptyLayout
@attribute [Authorize(Roles = "ACCESS.AddStudent")]

<link href="/css/StudentManage/AddStudent.css" rel="stylesheet" />

<div class="add-student-container">
    <div class="add-student-card">
        <!-- Header -->
        <div class="card-header">
            <div class="header-content">
                <div class="header-icon">
                    <i class="fas fa-user-graduate"></i>
                </div>
                <div class="header-text">
                    <h2>Thêm Sinh Viên Mới</h2>
                    <p>Tạo hồ sơ sinh viên trong hệ thống quản lý</p>
                </div>
            </div>
            <button type="button" class="btn-close" @onclick="NavigateToMainView">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <!-- Form Body -->
        <div class="card-body">
            <EditForm Model="createStudentDto" OnValidSubmit="HandleValidSubmit" FormName="AddStudentForm">
                <DataAnnotationsValidator />

                <!-- Basic Student Information Section -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-id-card"></i>
                        Thông Tin Cơ Bản
                    </h3>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-user"></i>
                                Họ và Tên <span class="required">*</span>
                            </label>
                            <InputText class="form-control" @bind-Value="createStudentDto.Name"
                                placeholder="Nhập họ và tên đầy đủ" maxlength="100" />
                            <ValidationMessage For="@(() => createStudentDto.Name)" class="validation-message" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-venus-mars"></i>
                                Giới Tính
                            </label>
                            <InputSelect class="form-select" @bind-Value="createStudentDto.Gender">
                                <option value="">-- Chọn giới tính --</option>
                                <option value="Male">Nam</option>
                                <option value="Female">Nữ</option>
                                <option value="Other">Khác</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => createStudentDto.Gender)" class="validation-message" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-calendar-alt"></i>
                                Ngày Sinh
                            </label>
                            <InputDate class="form-control" @bind-Value="dobDate"
                                max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                            <ValidationMessage For="@(() => createStudentDto.Dob)" class="validation-message" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-phone"></i>
                                Số Điện Thoại
                            </label>
                            <InputText class="form-control" @bind-Value="createStudentDto.Phone"
                                placeholder="Nhập số điện thoại" maxlength="15" />
                            <ValidationMessage For="@(() => createStudentDto.Phone)" class="validation-message" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group full-width">
                            <label class="form-label">
                                <i class="fas fa-envelope"></i>
                                Email
                            </label>
                            <InputText type="email" class="form-control" @bind-Value="createStudentDto.Email"
                                placeholder="Nhập địa chỉ email" maxlength="100" />
                            <ValidationMessage For="@(() => createStudentDto.Email)" class="validation-message" />
                        </div>
                    </div>
                </div>

                <!-- Academic Information Section -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-graduation-cap"></i>
                        Thông Tin Học Vụ
                    </h3>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-building"></i>
                                Khoa/Viện
                            </label>
                            @if (isLoadingDepartments)
                            {
                                <select class="form-select" disabled>
                                    <option>Đang tải danh sách khoa/viện...</option>
                                </select>
                            }
                            else
                            {
                                <InputSelect class="form-select" @bind-Value="createStudentDto.Department"
                                    @bind-Value:after="OnDepartmentChanged">
                                    <option value="">-- Chọn khoa/viện --</option>
                                    @foreach (var department in availableDepartments)
                                    {
                                        <option value="@department.DepartmentCode">
                                            @department.DisplayName
                                        </option>
                                    }
                                </InputSelect>
                            }
                            <ValidationMessage For="@(() => createStudentDto.Department)" class="validation-message" />
                            @if (!string.IsNullOrEmpty(selectedDepartmentInfo))
                            {
                                <small class="department-info">
                                    <i class="fas fa-info-circle"></i>
                                    @selectedDepartmentInfo
                                </small>
                            }
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-info-circle"></i>
                                Trạng Thái <span class="required">*</span>
                            </label>
                            <InputSelect class="form-select" @bind-Value="createStudentDto.Status">

                                <option value="0">Do user tạo ra</option>

                                <option value="-1">Tạm xóa</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => createStudentDto.Status)" class="validation-message" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group full-width">
                            <label class="form-label">
                                <i class="fas fa-user-tie"></i>
                                Người Quản Lý
                            </label>
                            @if (isLoadingManagers)
                            {
                                <select class="form-select" disabled>
                                    <option>Đang tải danh sách...</option>
                                </select>
                            }
                            else
                            {
                                <InputSelect class="form-select" @bind-Value="selectedManagerId"
                                    @bind-Value:after="OnManagerChanged">
                                    <option value="">-- Chọn người quản lý --</option>
                                    @foreach (var manager in availableManagers)
                                    {
                                        <option value="@manager.UserId.ToString()">
                                            @manager.UserName - @manager.FullName
                                        </option>
                                    }
                                </InputSelect>
                            }
                            @if (!string.IsNullOrEmpty(selectedManagerInfo))
                            {
                                <small class="manager-info">
                                    <i class="fas fa-info-circle"></i>
                                    @selectedManagerInfo
                                </small>
                            }
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>

        <!-- Footer Actions -->
        <div class="card-footer">
            <div class="action-buttons">
                <button type="button" class="btn btn-reset" @onclick="ResetForm">
                    <i class="fas fa-redo"></i>
                    Làm Mới
                </button>
                <button type="button" class="btn btn-cancel" @onclick="NavigateToMainView">
                    <i class="fas fa-times"></i>
                    Hủy Bỏ
                </button>
                <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                        <span>Đang lưu...</span>
                    }
                    else
                    {
                        <i class="fas fa-save"></i>
                        <span>Lưu Sinh Viên</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(alertMessage))
{
    <div class="alert-container">
        <div class="alert @(alertType == "success" ? "alert-success" : "alert-danger")">
            <i class="fas @(alertType == "success" ? "fa-check-circle" : "fa-exclamation-triangle")"></i>
            @alertMessage
            <button type="button" class="alert-close" @onclick="() => alertMessage = string.Empty">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
}

@code {
    private CreateStudentDto createStudentDto = new CreateStudentDto();
    private List<UserInfoDto> availableManagers = new List<UserInfoDto>();
    private List<DepartmentInfoDto> availableDepartments = new List<DepartmentInfoDto>();
    private bool isLoadingManagers = false;
    private bool isLoadingDepartments = false;
    private bool isSubmitting = false;
    private string selectedManagerId = string.Empty;
    private string selectedManagerInfo = string.Empty;
    private string selectedDepartmentInfo = string.Empty;
    private DateTime? dobDate;
    private string alertMessage = string.Empty;
    private string alertType = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadManagers(), LoadDepartments());

        // Set default values
        createStudentDto.Status = 0; // Đang học
         // TODO: Replace with actual current user ID from authentication
    }

    private void NavigateToMainView()
    {
        Navigation.NavigateTo("/studentmanage/mainviewstudent");
    }

    private async Task LoadDepartments()
    {
        isLoadingDepartments = true;
        StateHasChanged();

        try
        {
            var response = await DepartmentApiClient.GetAllDepartmentsSimpleAsync();
            if (response.IsSuccess && response.Data != null)
            {
                availableDepartments = response.Data;
            }
            else
            {
                ShowAlert("Không thể tải danh sách khoa/viện: " + response.Message, "error");
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Lỗi khi tải danh sách khoa/viện: " + ex.Message, "error");
        }
        finally
        {
            isLoadingDepartments = false;
            StateHasChanged();
        }
    }

    private void OnDepartmentChanged()
    {
        if (!string.IsNullOrEmpty(createStudentDto.Department))
        {
            var selectedDepartment = availableDepartments.FirstOrDefault(d => d.DepartmentCode == createStudentDto.Department);
            if (selectedDepartment != null)
            {
                selectedDepartmentInfo = selectedDepartment.FullDescription;
            }
        }
        else
        {
            selectedDepartmentInfo = string.Empty;
        }
        StateHasChanged();
    }

    private async Task LoadManagers()
    {
        isLoadingManagers = true;
        StateHasChanged();

        try
        {
            var response = await UserApiClient.GetAllUsersAsync(1, 100, "");
            if (response.IsSuccess && response.Data != null)
            {
                // Filter to get only users with manager roles or permissions
                availableManagers = response.Data.Users ?? new List<UserInfoDto>();
            }
            else
            {
                ShowAlert("Không thể tải danh sách người quản lý: " + response.Message, "error");
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Lỗi khi tải danh sách người quản lý: " + ex.Message, "error");
        }
        finally
        {
            isLoadingManagers = false;
            StateHasChanged();
        }
    }

    private void OnManagerChanged()
    {
        if (!string.IsNullOrEmpty(selectedManagerId) && Guid.TryParse(selectedManagerId, out var managerId))
        {
            createStudentDto.ManageBy = managerId;

            var selectedManager = availableManagers.FirstOrDefault(m => m.UserId == managerId);
            if (selectedManager != null)
            {
                selectedManagerInfo = $"Họ tên: {selectedManager.FullName ?? "N/A"}";
                if (!string.IsNullOrEmpty(selectedManager.Department))
                {
                    selectedManagerInfo += $" | Khoa: {selectedManager.Department}";
                }
                selectedManagerInfo += $" | Cấp bảo mật: {selectedManager.LevelSecurity}";
            }
        }
        else
        {
            createStudentDto.ManageBy = null;
            selectedManagerInfo = string.Empty;
        }
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        StateHasChanged();

        try
        {
            // Convert date to string format if provided
            if (dobDate.HasValue)
            {
                createStudentDto.Dob = dobDate.Value.ToString("yyyy-MM-dd");
            }
            var curenUser = await UserApiClient.GetCurrentUserAsync();
            if (curenUser?.Data != null)
            {
                createStudentDto.CreatedBy = curenUser.Data.UserId;
            }

            var response = await StudentApiClient.CreateStudentAsync(createStudentDto);

            if (response.IsSuccess && response.Data != null)
            {
                ShowAlert($"Tạo sinh viên thành công! Mã sinh viên: {response.Data.StudentId}", "success");

                // Wait for user to see the message then navigate
                await Task.Delay(2000);
                Navigation.NavigateTo("/studentmanage/mainviewstudent");
            }
            else
            {
                ShowAlert("Không thể tạo sinh viên: " + response.Message, "error");
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Lỗi khi tạo sinh viên: " + ex.Message, "error");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        var currentCreatedBy = createStudentDto.CreatedBy; // Keep the current user ID
        createStudentDto = new CreateStudentDto
        {
            Status = 1,
            CreatedBy = currentCreatedBy
        };
        selectedManagerId = string.Empty;
        selectedManagerInfo = string.Empty;
        dobDate = null;
        alertMessage = string.Empty;
        StateHasChanged();
    }

    private void ShowAlert(string message, string type)
    {
        alertMessage = message;
        alertType = type;
        StateHasChanged();

        // Auto-hide after 5 seconds
        Task.Delay(5000).ContinueWith(_ =>
        {
            alertMessage = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }
}
