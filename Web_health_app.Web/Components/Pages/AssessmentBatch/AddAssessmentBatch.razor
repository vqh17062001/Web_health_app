@page "/assessmentbatch/add"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using Web_health_app.Web.Components.Layout
@using Web_health_app.Models.Models
@using Web_health_app.Web.ApiClients
@using System.Globalization
@using System.Text
@inject AssessmentBatchApiClient AssessmentBatchApiClient
@inject UserApiClient UserApiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

@layout EmptyLayout
@attribute [Authorize(Roles = "CREATE.AssessmentBatch")]

<link href="/css/AssessmentBatch/add-assessment-batch.css" rel="stylesheet" />
<link href="/css/AssessmentBatch/add-assessment-batch-new.css" rel="stylesheet" />
<script src="/js/assessment-batch.js"></script>

<div class="add-assessment-container">
    <div class="add-assessment-card">
        <!-- Header -->
        <div class="card-header">
            <div class="header-content">
                <div class="header-icon">
                    <i class="fas fa-plus-circle"></i>
                </div>
                <div class="header-text">
                    <h2>Tạo Đợt Kiểm Tra Thể Lực</h2>
                    <p>Thiết lập và cấu hình đợt kiểm tra sức khỏe thể chất mới</p>
                </div>
            </div>
            <button type="button" class="btn-close" onclick="window.history.back()">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <!-- Form Body -->
        <div class="card-body">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    @successMessage
                    <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                </div>
            }

            <EditForm id="assessment-form" Model="createAssessmentBatch" OnValidSubmit="HandleSubmit"
                class="add-assessment-form">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <!-- Basic Information Section -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-info-circle"></i>
                        Thông Tin Cơ Bản
                    </h3>

                    <div class="form-row">
                        <div class="form-group full-width">
                            <label class="form-label">
                                <i class="fas fa-tag"></i>
                                Mã đợt kiểm tra <span class="required">*</span>
                            </label>
                            <InputText @bind-Value="createAssessmentBatch.CodeName" class="form-control"
                                placeholder="Nhập tên đợt kiểm tra (VD:Kiem tra the luc thang 5 nam 2025)"
                                maxlength="100" />
                            <ValidationMessage For="@(() => createAssessmentBatch.CodeName)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group full-width">
                            <label class="form-label">
                                <i class="fas fa-align-left"></i>
                                Mô Tả Chi Tiết
                            </label>
                            <InputTextArea @bind-Value="createAssessmentBatch.Description" class="form-control" rows="4"
                                placeholder="Mô tả mục đích, nội dung và yêu cầu của đợt kiểm tra..." />
                            <ValidationMessage For="@(() => createAssessmentBatch.Description)" />
                        </div>
                    </div>
                </div>

                <!-- Schedule Information Section -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-calendar-alt"></i>
                        Lịch Trình Và Người Thực Hiện
                    </h3>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-play-circle"></i>
                                Ngày Bắt Đầu <span class="required">*</span>
                            </label>
                            <InputDate @bind-Value="createAssessmentBatch.StartDate" class="form-control" />
                            <ValidationMessage For="@(() => createAssessmentBatch.StartDate)" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-user-tie"></i>
                                Người Quản Lý <span class="required">*</span>
                            </label>
                            @if (availableManagers.Any())
                            {
                                <InputSelect @bind-Value="createAssessmentBatch.ManagerBy" class="form-select">
                                    <option value="">-- Chọn người quản lý --</option>
                                    @foreach (var manager in availableManagers)
                                    {
                                        <option value="@manager.UserId">
                                            @if (!string.IsNullOrEmpty(manager.FullName))
                                            {
                                                @($"{manager.FullName} ({manager.UserName})")
                                            }
                                            else
                                            {
                                                @manager.UserName
                                            }
                                        </option>
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <div class="loading-placeholder">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    Đang tải danh sách người quản lý...
                                </div>
                            }
                            <ValidationMessage For="@(() => createAssessmentBatch.ManagerBy)" />
                        </div>
                    </div>
                </div>

                <!-- Status Section -->
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-cogs"></i>
                        Trạng Thái
                    </h3>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-toggle-on"></i>
                                Trạng Thái Ban Đầu <span class="required">*</span>
                            </label>
                            <InputSelect @bind-Value="createAssessmentBatch.Status" class="form-select">
                                <option value="0">Nháp</option>
                                <option value="1">Đã được phê duyệt</option>

                            </InputSelect>
                            <ValidationMessage For="@(() => createAssessmentBatch.Status)" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-info-circle"></i>
                                Trạng Thái Hiện Tại
                            </label>
                            <div class="status-display">
                                <span class="badge @GetStatusClass(createAssessmentBatch.Status)">
                                    @GetStatusText(createAssessmentBatch.Status)
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>

        <!-- Footer Actions -->
        <div class="card-footer">
            <div class="action-buttons">
                <button type="button" class="btn btn-draft" @onclick="SaveDraft" disabled="@isSubmitting">
                    @if (isSubmitting && isDraftSave)
                    {
                        <i class="fas fa-spinner fa-spin"></i>
                    }
                    else
                    {
                        <i class="fas fa-save"></i>
                    }
                    Lưu Nháp
                </button>
                <button type="button" class="btn btn-preview" @onclick="PreviewAssessment" disabled="@isSubmitting">
                    <i class="fas fa-eye"></i>
                    Xem Trước
                </button>
                <button type="button" class="btn btn-cancel" @onclick="CancelAndGoBack" disabled="@isSubmitting">
                    <i class="fas fa-times"></i>
                    Hủy Bỏ
                </button>
                <button type="submit" form="assessment-form" class="btn btn-primary" disabled="@isSubmitting"
                    @onclick="SubmitForm">
                    @if (isSubmitting && !isDraftSave)
                    {
                        <i class="fas fa-spinner fa-spin"></i>
                    }
                    else
                    {
                        <i class="fas fa-paper-plane"></i>
                    }
                    Tạo Đợt Kiểm Tra Và Thêm Học Viên Kiểm Tra 
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    // Form model

    private CreateAssessmentBatchDto createAssessmentBatch = new CreateAssessmentBatchDto();

    // State variables
    private bool isSubmitting = false;
    private bool isDraftSave = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // Data for dropdowns
    private List<UserInfoDto> availableManagers = new List<UserInfoDto>();

    protected override async Task OnInitializedAsync()
    {
        // Set default values
        createAssessmentBatch.StartDate = DateTime.Today.AddDays(1);
        createAssessmentBatch.EndDate = DateTime.Today.AddDays(7);
        createAssessmentBatch.Status = 0; // draw by default

        // Load available managers
        await LoadAvailableManagers();

        // Get current user ID (this should be implemented properly with authentication)
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var userIdClaim = authState.User.FindFirst("sub") ?? authState.User.FindFirst("id");
                if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out var userId))
                {
                    createAssessmentBatch.CreatedBy = userId;
                }
                else
                {
                    createAssessmentBatch.CreatedBy = Guid.NewGuid(); // Fallback
                }
            }
        }
        catch
        {
            createAssessmentBatch.CreatedBy = Guid.NewGuid(); // Fallback
        }
    }

    private async Task LoadAvailableManagers()
    {
        try
        {
            var response = await UserApiClient.GetAllUsersAsync(1, 50);
            if (response?.IsSuccess == true && response.Data?.Users != null)
            {
                availableManagers = response.Data.Users.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading managers: {ex.Message}");
            errorMessage = "Không thể tải danh sách người quản lý.";
        }
    }

    private async Task HandleSubmit()
    {
        await SubmitForm();
    }

    private async Task SubmitForm()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            isDraftSave = false;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Validate data
            if (createAssessmentBatch.StartDate < DateTime.Today)
            {
                errorMessage = "Ngày bắt đầu không thể trong quá khứ.";
                return;
            }

            if (!createAssessmentBatch.ManagerBy.HasValue)
            {
                errorMessage = "Vui lòng chọn người quản lý.";
                return;
            }

            if (createAssessmentBatch.CodeName != null)

            {

                createAssessmentBatch.CodeName = WithoutDiacritics(createAssessmentBatch.CodeName);

            }
            // Set EndDate same as StartDate if not provided (for compatibility)
            if (createAssessmentBatch.EndDate == DateTime.MinValue)
            {
                createAssessmentBatch.EndDate = createAssessmentBatch.StartDate.AddDays(30); // Default 30 days duration
            }

            // Call API to create assessment batch
            var result = await AssessmentBatchApiClient.CreateAssessmentBatchAsync(createAssessmentBatch);

            if (result != null)
            {
                successMessage = "Đợt kiểm tra đã được tạo thành công!";
                await JSRuntime.InvokeVoidAsync("showSuccessToast", "Tạo đợt kiểm tra thành công!");

                // Redirect to assessment batch list after a short delay
                await Task.Delay(500);
                Navigation.NavigateTo($"/assessmentbatch/{result.AssessmentBatchId}/students");
            }
            else
            {
                errorMessage = "Có lỗi xảy ra khi tạo đợt kiểm tra. Vui lòng thử lại.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task SaveDraft()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            isDraftSave = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Set status to draft
            var originalStatus = createAssessmentBatch.Status;
            createAssessmentBatch.Status = 0; // Draft

            var result = await AssessmentBatchApiClient.CreateAssessmentBatchAsync(createAssessmentBatch);

            if (result != null)
            {
                successMessage = "Đã lưu nháp thành công!";
                await JSRuntime.InvokeVoidAsync("showSuccessToast", "Lưu nháp thành công!");
            }
            else
            {
                errorMessage = "Có lỗi xảy ra khi lưu nháp. Vui lòng thử lại.";
                createAssessmentBatch.Status = originalStatus; // Restore original status
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi lưu nháp: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            isDraftSave = false;
        }
    }

    private async Task PreviewAssessment()
    {
        // Implement preview functionality - could open a modal or navigate to preview page
        await JSRuntime.InvokeVoidAsync("showInfoToast", "Tính năng xem trước đang được phát triển");
    }

    private async Task CancelAndGoBack()
    {
        // Show confirmation dialog before going back
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn hủy? Mọi thay đổi sẽ bị mất.");

        if (confirmed)
        {
            Navigation.NavigateTo("/assessmentbatch");
        }
    }

    // Helper method to get status text
    private string GetStatusText(short status)
    {
        return status switch
        {
            0 => "Nháp",
            1 => "Hoạt động",
            2 => "Tạm dừng",
            3 => "Hoàn thành",
            _ => "Không xác định"
        };
    }

    // Helper method to get status CSS class
    private string GetStatusClass(short status)
    {
        return status switch
        {
            0 => "status-draft",
            1 => "status-active",
            2 => "status-paused",
            3 => "status-completed",
            _ => "status-unknown"
        };
    }
    private string WithoutDiacritics( string? s)
    {
        if (string.IsNullOrEmpty(s)) return s ?? string.Empty;

        
        string normalized = s.Normalize(NormalizationForm.FormD);
        var sb = new StringBuilder(normalized.Length);

        foreach (var ch in normalized)
        {
            var uc = CharUnicodeInfo.GetUnicodeCategory(ch);
           
            if (uc != UnicodeCategory.NonSpacingMark &&
                uc != UnicodeCategory.SpacingCombiningMark &&
                uc != UnicodeCategory.EnclosingMark)
            {
                sb.Append(ch);
            }
        }

        
        string result = sb.ToString().Normalize(NormalizationForm.FormC);
        result = result.Replace('đ', 'd').Replace('Đ', 'D');
        return result;
    }
}
