@page "/assessmentbatch/{AssessmentBatchId}/students"
@using Web_health_app.Models.Models
@using Web_health_app.Web.ApiClients
@using Microsoft.AspNetCore.Components.Web
@using Web_health_app.Web.Components.Layout

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@inject StudentApiClient StudentApiClient
@inject AssessmentBatchApiClient AssessmentBatchApiClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@layout EmptyLayout
@attribute [Authorize(Roles = "ACCESS.MainViewAssBath")]
<link rel="stylesheet" href="css/AssessmentBatch/assessment-batch-students.css" />

<PageTitle>Quản lý học sinh - Đợt kiểm tra @AssessmentBatchId</PageTitle>

<div class="students-management-page container-fluid">
    <!-- Header Section -->
    <div class="page-header">
        <div class="header-content">
            <div class="header-icon">
                <i class="fas fa-users-cog"></i>
            </div>
            <div class="header-text">
                <h2>Quản lý học sinh</h2>
                <p>Quản lý danh sách học sinh trong đợt kiểm tra</p>
                <span class="batch-id">ID: @AssessmentBatchId</span>

            </div>
        </div>
        <div class="header-actions">
            <button class="btn btn-outline-light" @onclick="GoBack">
                <i class="fas fa-arrow-left"></i> Quay lại
            </button>
            <button class="btn btn-outline-light" @onclick="RefreshData">
                <i class="fas fa-sync-alt"></i> Làm mới
            </button>
            <button class="btn btn-light" @onclick="ShowAddStudentsModal">
                <i class="fas fa-plus"></i> Thêm học sinh
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner-wrapper">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Đang tải...</span>
                </div>
                <p class="loading-text">Đang tải danh sách học sinh...</p>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-state">
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-triangle"></i>
                @errorMessage
            </div>
        </div>
    }
    else
    {
        <!-- Statistics Cards -->
        <div class="stats-section">
            <div class="row">
                <div class="col-md-3">
                    <div class="stat-card total">
                        <div class="stat-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="stat-content">
                            <h3>@GetTotalStudentsCount()</h3>
                            <p>Tổng số học sinh</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card active">
                        <div class="stat-icon">
                            <i class="fas fa-user-check"></i>
                        </div>
                        <div class="stat-content">
                            <h3>@GetActiveStudentsCount()</h3>
                            <p>Học sinh hoạt động</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card completed">
                        <div class="stat-icon">
                            <i class="fas fa-graduation-cap"></i>
                        </div>
                        <div class="stat-content">
                            <h3>@GetCompletedCount()</h3>
                            <p>Đã hoàn thành</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card pending">
                        <div class="stat-icon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="stat-content">
                            <h3>@GetPendingCount()</h3>
                            <p>Đang chờ</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filter Card -->
        <div class="card filter-card mb-4">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="search-box">
                            <input type="text" class="form-control" placeholder="Tìm kiếm theo tên, mã số, email..."
                                   @bind="searchQuery" @onkeypress="OnSearchKeyPress" />
                            <i class="fas fa-search search-icon"></i>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-outline-primary" @onclick="SearchStudents">
                                <i class="fas fa-search"></i> Tìm kiếm
                            </button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="ClearSearch">
                                <i class="fas fa-times"></i> Xóa bộ lọc
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bulk Actions Bar -->
        @if (selectedStudentIds.Count > 0)
        {
            <div class="bulk-actions-bar">
                <div class="selected-info">
                    <i class="fas fa-check-circle"></i>
                    Đã chọn @selectedStudentIds.Count học sinh
                </div>
                <div class="bulk-actions">
                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="RemoveSelectedStudents">
                        <i class="fas fa-trash"></i> Xóa khỏi đợt kiểm tra
                    </button>
                </div>
            </div>
        }

        <!-- Students Table -->
        @if (students?.Any() == true)
        {
            <div class="students-grid">
                <table class="students-table table table-hover mb-0">
                    <thead>
                        <tr>
                            <th style="width: 50px;">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" 
                                           @onchange="OnSelectAllChanged" 
                                           checked="@isAllSelected" />
                                </div>
                            </th>
                            <th>Thông tin học sinh</th>
                            <th>Liên hệ</th>
                            <th>Khoa</th>
                        
                            <th>Ngày tham gia</th>
                            <th style="width: 120px;">Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in GetFilteredStudents())
                        {
                            <tr class="@(selectedStudentIds.Contains(student.StudentId) ? "selected" : "")">
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" 
                                               @onchange="(e) => OnStudentSelectionChanged(student.StudentId, (bool)e.Value!)" 
                                               checked="@selectedStudentIds.Contains(student.StudentId)" />
                                    </div>
                                </td>
                                <td>
                                    <div class="student-info">
                                        <div class="student-avatar">
                                            @GetStudentInitials(student.Name)
                                        </div>
                                        <div class="student-details">
                                            <div class="student-name">@student.Name</div>
                                            <div class="student-id">@student.StudentId</div>
                                            <div class="student-dob">
                                                <i class="fas fa-birthday-cake"></i>
                                                @(student.Dob ?? "N/A")
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="contact-info">
                                        <div class="contact-item">
                                            <i class="fas fa-envelope"></i>
                                            <a href="mailto:@student.Email">@student.Email</a>
                                        </div>
                                        <div class="contact-item">
                                            <i class="fas fa-phone"></i>
                                            <span>@(student.Phone ?? "N/A")</span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="department-badge">@(student.Department ?? "N/A")</span>
                                </td>
                               
                                <td>
                                    <div class="date-info">
                                        <i class="fas fa-calendar-plus"></i>
                                        @(DateTime.Now.ToString("dd/MM/yyyy"))
                                    </div>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button type="button" class="btn btn-sm btn-outline-info" 
                                                @onclick="() => ShowStudentDetails(student)">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        @if (currentAssessmentBatch.Status == 2 )
                                        {

                                            <button type="button" class="btn btn-sm btn-outline-success"
                                                    @onclick="() => RecordStudentResult(student.StudentId,currentAssessmentBatch.AssessmentBatchId)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        
                                        
                                        }
                                      
                                        <button type="button" class="btn btn-sm btn-outline-danger"
                                                @onclick="() => RemoveStudentFromBatch(student.StudentId)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    @* <div class="pagination-wrapper">
                        <nav aria-label="Student pagination">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                        <i class="fas fa-chevron-left"></i>
                                    </button>
                                </li>

                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                    </li>
                                }

                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                        <i class="fas fa-chevron-right"></i>
                                    </button>
                                </li>
                            </ul>
                        </nav>
                        <div class="pagination-info">
                            Hiển thị @((currentPage - 1) * pageSize + 1) - @(Math.Min(currentPage * pageSize, totalCount)) 
                            trong tổng số @totalCount học sinh
                        </div>
                    </div> *@

                    <div class="row mt-4">
                        <div class="pagination-wrapper">
                            <nav aria-label="Phân trang">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <a class="page-link" href="#" @onclick="() => ChangePage(currentPage - 1)" @onclick:preventDefault="true">Trước</a>
                                      

                                    </li>

                                    @{
                                        int startPage = Math.Max(1, currentPage - 2);
                                        int endPage = Math.Min(totalPages, currentPage + 2);
                                    }

                                    @for (int i = startPage; i <= endPage; i++)
                                    {
                                        int pageNum = i; // Capture the loop variable
                                                         <li class="page-item @(pageNum == currentPage ? "active" : "")">
                                                             <a class="page-link" href="#" @onclick="() => ChangePage(pageNum)" @onclick:preventDefault="true">@pageNum</a>
                                                         </li>
                                    }

                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <a class="page-link" href="#" @onclick="() => ChangePage(currentPage + 1)" @onclick:preventDefault="true">Sau</a>
                                        

                                    </li>
                                </ul>
                            </nav>
                            <div class="pagination-info justify-content-center">
                                Hiển thị @((currentPage - 1) * pageSize + 1) - @(Math.Min(currentPage * pageSize, totalCount))
                                trong tổng số @totalCount học sinh
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-users"></i>
                </div>
                <h4>Chưa có học sinh nào</h4>
                <p>Chưa có học sinh nào trong đợt kiểm tra này. Hãy thêm học sinh để bắt đầu quản lý.</p>
                <button type="button" class="btn btn-primary" @onclick="ShowAddStudentsModal">
                    <i class="fas fa-plus"></i> Thêm học sinh đầu tiên
                </button>
            </div>
        }
    }

    <!-- Quick Actions -->
    <div class="quick-actions">
        <button type="button" class="btn-floating" @onclick="ShowAddStudentsModal" title="Thêm học sinh">
            <i class="fas fa-plus"></i>
        </button>
    </div>
</div>

<!-- Add Students Modal -->
<div class="modal fade @(showAddModal ? "show d-block" : "")" tabindex="-1" style="@(showAddModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-plus"></i> Thêm học sinh vào đợt kiểm tra
                </h5>
                <button type="button" class="btn-close" @onclick="HideAddStudentsModal"></button>
            </div>
            <div class="modal-body">
                @if (isLoadingAvailableStudents)
                {
                    <div class="loading-state">
                        <div class="spinner-wrapper">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                            <p class="loading-text">Đang tải danh sách học sinh có thể thêm...</p>
                        </div>
                    </div>
                }
                else if (availableStudents?.Any() == true)
                {
                    <div class="mb-3">
                        <div class="search-box">
                            <input type="text" class="form-control" placeholder="Tìm kiếm học sinh để thêm..."
                                   @bind="availableStudentsSearchQuery" @onkeypress="OnAvailableStudentsSearchKeyPress" />
                            <i class="fas fa-search search-icon"></i>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">
                                    <i class="fas fa-building me-1"></i>Lọc theo khoa:
                                </label>
                                <select class="form-select" @bind="selectedDepartmentFilter">
                                    <option value="">Tất cả khoa</option>
                                    @foreach (var dept in GetAvailableDepartments())
                                    {
                                        <option value="@dept">@dept</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-6 d-flex align-items-end">
                                <button type="button" class="btn btn-outline-secondary" @onclick="ClearDepartmentFilter">
                                    <i class="fas fa-times"></i> Xóa bộ lọc
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="SelectAllAvailableStudents">
                            <i class="fas fa-check-square"></i> Chọn tất cả
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-secondary ms-2" @onclick="DeselectAllAvailableStudents">
                            <i class="fas fa-square"></i> Bỏ chọn tất cả
                        </button>
                        @if (selectedAvailableStudentIds.Count > 0)
                        {
                            <span class="badge bg-primary ms-2">@selectedAvailableStudentIds.Count đã chọn</span>
                        }
                        <span class="text-muted ms-2">
                            <i class="fas fa-info-circle"></i> 
                            Hiển thị @GetFilteredAvailableStudents().Count / @availableStudents.Count học sinh
                        </span>
                    </div>

                    <div class="available-students-list">
                        @foreach (var student in GetFilteredAvailableStudents())
                        {
                            <div class="available-student-item @(selectedAvailableStudentIds.Contains(student.StudentId) ? "selected" : "")">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" 
                                           @onchange="(e) => OnAvailableStudentSelectionChanged(student.StudentId, (bool)e.Value!)" 
                                           checked="@selectedAvailableStudentIds.Contains(student.StudentId)" 
                                           id="available-student-@student.StudentId" />
                                    <label class="form-check-label" for="available-student-@student.StudentId">
                                        <div class="student-card">
                                            <div class="student-avatar">
                                                @GetStudentInitials(student.Name)
                                            </div>
                                            <div class="student-info">
                                                <div class="student-name">@student.Name</div>
                                                <div class="student-details">
                                                    <span class="student-id">@student.StudentId</span>
                                                    <span class="student-department">@student.Department</span>
                                                </div>
                                                <div class="student-email">@student.Email</div>
                                            </div>
                                        </div>
                                    </label>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">
                            <i class="fas fa-users-slash"></i>
                        </div>
                        <h5>Không có học sinh nào để thêm</h5>
                        <p>Tất cả học sinh đã được thêm vào đợt kiểm tra này hoặc không có học sinh nào trong hệ thống.</p>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideAddStudentsModal">
                    <i class="fas fa-times"></i> Hủy
                </button>
                <button type="button" class="btn btn-primary" @onclick="AddSelectedStudents" disabled="@(selectedAvailableStudentIds.Count == 0)">
                    <i class="fas fa-plus"></i> Thêm @selectedAvailableStudentIds.Count học sinh
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Student Details Modal -->
<div class="modal fade @(showDetailsModal ? "show d-block" : "")" tabindex="-1" style="@(showDetailsModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-circle"></i> Chi tiết học sinh
                </h5>
                <button type="button" class="btn-close" @onclick="HideStudentDetailsModal"></button>
            </div>
            <div class="modal-body">
                @if (selectedStudentForDetails != null)
                {
                    <div class="student-detail-view">
                        <!-- Student Avatar and Basic Info -->
                        <div class="text-center mb-4">
                            <div class="student-avatar-large">
                                @GetStudentInitials(selectedStudentForDetails.Name)
                            </div>
                            <h4 class="mt-3 mb-1">@selectedStudentForDetails.Name</h4>
                            <p class="text-muted">@selectedStudentForDetails.StudentId</p>
                        </div>

                        <!-- Personal Information -->
                        <div class="detail-section">
                            <h6><i class="fas fa-user me-2"></i>Thông tin cá nhân</h6>
                            <div class="detail-grid">
                                <div class="detail-item">
                                    <label>Mã số học sinh:</label>
                                    <span>@selectedStudentForDetails.StudentId</span>
                                </div>
                                <div class="detail-item">
                                    <label>Họ và tên:</label>
                                    <span>@selectedStudentForDetails.Name</span>
                                </div>
                                <div class="detail-item">
                                    <label>Ngày sinh:</label>
                                    <span>@(selectedStudentForDetails.Dob ?? "N/A")</span>
                                </div>
                                <div class="detail-item">
                                    <label>Khoa:</label>
                                    <span>@(selectedStudentForDetails.Department ?? "N/A")</span>
                                </div>
                            </div>
                        </div>

                        <!-- Contact Information -->
                        <div class="detail-section">
                            <h6><i class="fas fa-address-book me-2"></i>Thông tin liên hệ</h6>
                            <div class="detail-grid">
                                <div class="detail-item">
                                    <label>Email:</label>
                                    <span>@selectedStudentForDetails.Email</span>
                                </div>
                                <div class="detail-item">
                                    <label>Số điện thoại:</label>
                                    <span>@(selectedStudentForDetails.Phone ?? "N/A")</span>
                                </div>
                            </div>
                        </div>

                        <!-- Status Information -->
                        <div class="detail-section">
                            <h6><i class="fas fa-info-circle me-2"></i>Trạng thái và thông tin hệ thống</h6>
                            <div class="detail-grid">
                                <div class="detail-item">
                                    <label>Trạng thái:</label>
                                    <span>
                                        @if (selectedStudentForDetails.Status == 1)
                                        {
                                            <span class="status-badge active">Hoạt động</span>
                                        }
                                        else
                                        {
                                            <span class="status-badge inactive">Không hoạt động</span>
                                        }
                                    </span>
                                </div>
                                <div class="detail-item">
                                    <label>Ngày tạo:</label>
                                    <span>@selectedStudentForDetails.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                                </div>
                                <div class="detail-item">
                                    <label>Cập nhật lần cuối:</label>
                                    <span>@(selectedStudentForDetails.UpdateAt?.ToString("dd/MM/yyyy HH:mm") ?? "Chưa cập nhật")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideStudentDetailsModal">
                    <i class="fas fa-times"></i> Đóng
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string AssessmentBatchId { get; set; } = string.Empty;

    // Data properties
    private List<StudentInfoDto> students = new();
    private List<StudentInfoDto> availableStudents = new();
    private StudentInfoDto? selectedStudentForDetails;

    // UI state
    private bool isLoading = true;
    private bool isLoadingAvailableStudents = false;
    private string errorMessage = string.Empty;
    private bool showAddModal = false;
    private bool showDetailsModal = false;

    // Search and filter
    private string searchQuery = string.Empty;
    private string availableStudentsSearchQuery = string.Empty;
    private string selectedDepartmentFilter = string.Empty;

    // Selection
    private HashSet<string> selectedStudentIds = new();
    private HashSet<string> selectedAvailableStudentIds = new();
    private bool isAllSelected = false;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    private int totalPages = 0;

    AssessmentBatchInfoDto currentAssessmentBatch = new AssessmentBatchInfoDto();

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
        currentAssessmentBatch = await AssessmentBatchApiClient.GetAssessmentBatchByIdAsync(AssessmentBatchId);

    }

    private async Task LoadStudents()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // Load students in this assessment batch
            var response = await AssessmentBatchApiClient.GetStudentsInAssessmentBatchAsync(AssessmentBatchId, currentPage, pageSize);

            if (response != null)
            {
                students = response.Students ?? new List<StudentInfoDto>();
                totalCount = response.Pagination?.TotalCount ?? 0;
                totalPages = response.Pagination?.TotalPages ?? 0;
            }
            else
            {
                students = new List<StudentInfoDto>();
                Console.WriteLine("Error loading students: No data returned");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableStudents()
    {
        try
        {
            isLoadingAvailableStudents = true;

            // Get all students
            var response = await StudentApiClient.GetAllStudentsAsync(1, 100);

            if (response.IsSuccess && response.Data != null)
            {
                // Filter out students already in the batch
                var currentStudentIds = students.Select(s => s.StudentId).ToHashSet();
                availableStudents = response.Data.Students?
                    .Where(s => !currentStudentIds.Contains(s.StudentId))
                    .ToList() ?? new List<StudentInfoDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading available students: {ex.Message}");
        }
        finally
        {
            isLoadingAvailableStudents = false;
            StateHasChanged();
        }
    }

    // Event handlers
    private async Task RefreshData()
    {
        currentPage = 1;
        await LoadStudents();
    }

    private async Task SearchStudents()
    {
        currentPage = 1;
        await LoadStudents();
    }

    private async Task ClearSearch()
    {
        searchQuery = string.Empty;
        currentPage = 1;
        await LoadStudents();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchStudents();
        }
    }

    private void OnAvailableStudentsSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            StateHasChanged();
        }
    }

    private async Task ChangePage(int newPage)
    {
        if (newPage >= 1 && newPage <= totalPages)
        {
            currentPage = newPage;
            await LoadStudents();
        }
    }

    // Selection handlers
    private void OnStudentSelectionChanged(string studentId, bool isSelected)
    {
        if (isSelected)
        {
            selectedStudentIds.Add(studentId);
        }
        else
        {
            selectedStudentIds.Remove(studentId);
        }

        UpdateSelectAllState();
        StateHasChanged();
    }

    private void OnSelectAllChanged(ChangeEventArgs e)
    {
        var isSelected = (bool)e.Value!;
        selectedStudentIds.Clear();

        if (isSelected)
        {
            foreach (var student in GetFilteredStudents())
            {
                selectedStudentIds.Add(student.StudentId);
            }
        }

        UpdateSelectAllState();
        StateHasChanged();
    }

    private void UpdateSelectAllState()
    {
        var visibleStudents = GetFilteredStudents();
        isAllSelected = visibleStudents.Any() && visibleStudents.All(s => selectedStudentIds.Contains(s.StudentId));
    }

    private void OnAvailableStudentSelectionChanged(string studentId, bool isSelected)
    {
        if (isSelected)
        {
            selectedAvailableStudentIds.Add(studentId);
        }
        else
        {
            selectedAvailableStudentIds.Remove(studentId);
        }
        StateHasChanged();
    }

    private void SelectAllAvailableStudents()
    {
        selectedAvailableStudentIds.Clear();
        foreach (var student in GetFilteredAvailableStudents())
        {
            selectedAvailableStudentIds.Add(student.StudentId);
        }
        StateHasChanged();
    }

    private void DeselectAllAvailableStudents()
    {
        selectedAvailableStudentIds.Clear();
        StateHasChanged();
    }

    // Modal handlers
    private async Task ShowAddStudentsModal()
    {
        await LoadAvailableStudents();
        showAddModal = true;
        StateHasChanged();
    }

    private void HideAddStudentsModal()
    {
        showAddModal = false;
        selectedAvailableStudentIds.Clear();
        availableStudentsSearchQuery = string.Empty;
        selectedDepartmentFilter = string.Empty;
        StateHasChanged();
    }

    private void ShowStudentDetails(StudentInfoDto student)
    {
        selectedStudentForDetails = student;
        showDetailsModal = true;
        StateHasChanged();
    }

    private void HideStudentDetailsModal()
    {
        showDetailsModal = false;
        selectedStudentForDetails = null;
        StateHasChanged();
    }

    // CRUD operations
    private async Task AddSelectedStudents()
    {
        try
        {
            // Call API to add students to assessment batch
            var studentIdsToAdd = selectedAvailableStudentIds.ToList();
            var result = await AssessmentBatchApiClient.AddStudentsToAssessmentBatchAsync(AssessmentBatchId, studentIdsToAdd);

            if (result.IsSuccess)
            {
                HideAddStudentsModal();
                await RefreshData();

                await JSRuntime.InvokeVoidAsync("alert", $"Đã thêm {studentIdsToAdd.Count} học sinh vào đợt kiểm tra");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Lỗi khi thêm học sinh: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Lỗi khi thêm học sinh: {ex.Message}");
        }
    }

    private async Task RemoveStudentFromBatch(string studentId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa học sinh này khỏi đợt kiểm tra?");
            if (confirmed)
            {
                // Call API to remove student from assessment batch
                var result = await AssessmentBatchApiClient.RemoveStudentsFromAssessmentBatchAsync(AssessmentBatchId, new List<string> { studentId });

                if (result.IsSuccess)
                {
                    selectedStudentIds.Remove(studentId);
                    await RefreshData();
                    await JSRuntime.InvokeVoidAsync("alert", "Đã xóa học sinh khỏi đợt kiểm tra");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Lỗi khi xóa học sinh: {result.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Lỗi khi xóa học sinh: {ex.Message}");
        }
    }

    private async Task RemoveSelectedStudents()
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Bạn có chắc chắn muốn xóa {selectedStudentIds.Count} học sinh đã chọn khỏi đợt kiểm tra?");

            if (confirmed)
            {
                // Call API to remove multiple students from assessment batch
                var studentIdsToRemove = selectedStudentIds.ToList();
                var result = await AssessmentBatchApiClient.RemoveStudentsFromAssessmentBatchAsync(AssessmentBatchId, studentIdsToRemove);

                if (result.IsSuccess)
                {
                    selectedStudentIds.Clear();
                    await RefreshData();
                    await JSRuntime.InvokeVoidAsync("alert", $"Đã xóa {studentIdsToRemove.Count} học sinh khỏi đợt kiểm tra");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Lỗi khi xóa học sinh: {result.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Lỗi khi xóa học sinh: {ex.Message}");
        }
    }

    // Navigation
    private void GoBack()
    {
        Navigation.NavigateTo("/assessmentbatch");
    }

    private async Task RecordStudentResult(string studentId, string assessmentBatchId)
    {
        string ABS_ID = studentId + "_" + assessmentBatchId;
        try
        {
            Navigation.NavigateTo($"/assessmentbatch/testresult/{ABS_ID}");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error viewing details: {ex.Message}");
        }
        
        

    }

    // Helper methods
    private List<StudentInfoDto> GetFilteredStudents()
    {
        var filteredStudents = students.AsEnumerable();
        
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var query = searchQuery.ToLower();
            filteredStudents = filteredStudents.Where(s => 
                s.Name.ToLower().Contains(query) ||
                s.StudentId.ToLower().Contains(query) ||
                (s.Email?.ToLower().Contains(query) ?? false));
        }
        
        return filteredStudents.ToList();
    }

    private List<StudentInfoDto> GetFilteredAvailableStudents()
    {
        var filteredStudents = availableStudents.AsEnumerable();
        
        // Filter by search query
        if (!string.IsNullOrWhiteSpace(availableStudentsSearchQuery))
        {
            var query = availableStudentsSearchQuery.ToLower();
            filteredStudents = filteredStudents.Where(s => 
                s.Name.ToLower().Contains(query) ||
                s.StudentId.ToLower().Contains(query) ||
                (s.Email?.ToLower().Contains(query) ?? false));
        }
        
        // Filter by department
        if (!string.IsNullOrWhiteSpace(selectedDepartmentFilter))
        {
            filteredStudents = filteredStudents.Where(s => 
                s.Department != null && s.Department.Equals(selectedDepartmentFilter, StringComparison.OrdinalIgnoreCase));
        }
        
        return filteredStudents.ToList();
    }

    private List<string> GetAvailableDepartments()
    {
        return availableStudents
            .Where(s => !string.IsNullOrWhiteSpace(s.Department))
            .Select(s => s.Department!)
            .Distinct()
            .OrderBy(d => d)
            .ToList();
    }

    private void ClearDepartmentFilter()
    {
        selectedDepartmentFilter = string.Empty;
        StateHasChanged();
    }

    private string GetStudentInitials(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
            return "?";

        var words = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (words.Length == 1)
            return words[0].Substring(0, Math.Min(2, words[0].Length)).ToUpper();
        
        return $"{words[0][0]}{words[words.Length - 1][0]}".ToUpper();
    }

    // Statistics methods
    private int GetTotalStudentsCount()
    {
        return students?.Count ?? 0;
    }

    private int GetActiveStudentsCount()
    {
        return students?.Count(s => s.Status == 1) ?? 0;
    }

    private int GetCompletedCount()
    {
        // Placeholder - implement based on your business logic
        return students?.Count(s => s.Status == 2) ?? 0;
    }

    private int GetPendingCount()
    {
        // Placeholder - implement based on your business logic
        return students?.Count(s => s.Status == 0) ?? 0;
    }
}
