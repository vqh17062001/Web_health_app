@page "/assessment-batch"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Web_health_app.Models.Models
@using Web_health_app.Web.ApiClients
@inject AssessmentBatchApiClient AssessmentBatchApiClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "ACCESS.MainViewAssBath")]

<PageTitle>Quản lý Kiểm tra Thể lực</PageTitle>

<link href="/css/AssessmentBatch/assessment-batch.css" rel="stylesheet" />

<div class="assessment-batch-page">
    <div class="container-fluid">
        <!-- Header Section -->
        <div class="page-header">
            <div class="header-content">
                <div class="header-icon">
                    <i class="fas fa-clipboard-check"></i>
                </div>
                <div class="header-text">
                    <h2>Quản lý Kiểm tra Thể lực</h2>
                    <p>Tạo, quản lý và theo dõi các đợt kiểm tra sức khỏe thể chất của học sinh</p>
                </div>
            </div>
            <div class="header-actions">
                <button type="button" class="btn btn-primary" @onclick="ShowCreateAssessmentModal">
                    <i class="fas fa-plus"></i>
                    Tạo đợt kiểm tra
                </button>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="stats-section mb-4">
            <div class="row g-3">
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-icon total">
                            <i class="fas fa-list-check"></i>
                        </div>
                        <div class="stat-content">
                            <h3>@totalAssessments</h3>
                            <p>Tổng số đợt</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-icon active">
                            <i class="fas fa-play-circle"></i>
                        </div>
                        <div class="stat-content">
                            <h3>@activeAssessments</h3>
                            <p>Đang tiến hành</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-icon completed">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <div class="stat-content">
                            <h3>@completedAssessments</h3>
                            <p>Đã hoàn thành</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-icon participants">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="stat-content">
                            <h3>@totalParticipants</h3>
                            <p>Học sinh tham gia</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filter and Search Section -->
        <div class="card filter-card mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Tìm kiếm</label>
                        <div class="search-box">
                            <input type="text" class="form-control" placeholder="Tên đợt kiểm tra..." @bind="searchText"
                                @onkeyup="SearchAssessments">
                            <i class="fas fa-search search-icon"></i>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Trạng thái</label>
                        <select class="form-select" @bind="selectedStatus" @bind:event="onchange">
                            <option value="">Tất cả</option>
                            <option value="0">Nháp</option>
                            <option value="1">Đã được phê duyệt</option>

                            <option value="2">Đang tiến hành</option>
                            <option value="3">Hoàn thành</option>
                            <option value="-1">Đã hủy</option>
                        </select>
                    </div>
                    @* <div class="col-md-2">
                        <label class="form-label">Loại kiểm tra</label>
                        <select class="form-select" @bind="selectedType" @bind:event="onchange">
                            <option value="">Tất cả</option>
                            <option value="physical">Thể lực</option>
                            <option value="health">Sức khỏe</option>
                            <option value="comprehensive">Toàn diện</option>
                        </select>
                    </div> *@
                    <div class="col-md-2">
                        <label class="form-label">Từ ngày</label>
                        <input type="date" class="form-control" @bind="fromDate" @bind:event="onchange">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Đến ngày</label>
                        <input type="date" class="form-control" @bind="toDate" @bind:event="onchange">
                    </div>
                    <div class="col-md-1">
                        <label class="form-label">&nbsp;</label>
                        <div class="d-grid">
                            <button type="button" class="btn btn-outline-secondary" @onclick="ClearFilters">
                                <i class="fas fa-refresh"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Error Message -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mb-4" role="alert">
                <i class="fas fa-exclamation-triangle"></i>
                @errorMessage
                <button type="button" class="btn btn-link p-0 ms-2" @onclick="() => LoadData()">
                    <i class="fas fa-redo"></i> Thử lại
                </button>
            </div>
        }

        <!-- Assessment Batches List -->
        <div class="assessment-list">
            @if (isLoading)
            {
                <div class="loading-state">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Đang tải...</span>
                        </div>
                    </div>
                    <p class="text-center mt-2">Đang tải dữ liệu...</p>
                </div>
            }
            else if (assessments == null || !assessments.Any())
            {
                <div class="empty-state">
                    <div class="empty-icon">
                        <i class="fas fa-clipboard-list"></i>
                    </div>
                    <h4>Chưa có đợt kiểm tra nào</h4>
                    <p>Bắt đầu tạo đợt kiểm tra thể lực đầu tiên của bạn</p>
                    <button type="button" class="btn btn-primary" @onclick="ShowCreateAssessmentModal">
                        <i class="fas fa-plus"></i>
                        Tạo đợt kiểm tra mới
                    </button>
                </div>
            }
            else
            {
                <div class="row g-4">
                    @foreach (var assessment in assessments)
                    {
                        <div class="col-md-6 col-lg-4">
                            <div class="assessment-card">
                                <div class="card-header">
                                    <div class="assessment-status">
                                        <span class="badge @GetStatusBadgeClass(assessment.Status)">
                                            @GetStatusText(assessment.Status)
                                        </span>
                                    </div>
                                    <div class="dropdown">
                                        <button class="btn btn-link dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="#" @onclick="() => ViewDetails(assessment.AssessmentBatchId)">
                                                    <i class="fas fa-eye"></i> Chi tiết
                                                </a></li>
                                            <li><a class="dropdown-item" href="#"
                                                    @onclick="() => EditAssessment(assessment.AssessmentBatchId)">
                                                    <i class="fas fa-edit"></i> Chỉnh sửa
                                                </a></li>
                                            <li><a class="dropdown-item" href="#"
                                                    @onclick="() => ManageParticipants(assessment.AssessmentBatchId)">
                                                    <i class="fas fa-users"></i> Quản lý HS
                                                </a></li>
                                            <li>
                                                <hr class="dropdown-divider">
                                            </li>
                                            <li><a class="dropdown-item text-danger" 
                                                    @onclick="() => DeleteAssessment(assessment.AssessmentBatchId)">
                                                    <i class="fas fa-trash"></i> Xóa
                                                </a></li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <h5 class="assessment-title">@assessment.CodeName</h5>
                                    <p class="assessment-description">@assessment.Description</p>

                                    <div class="assessment-info">
                                        <div class="info-item">
                                            <i class="fas fa-calendar"></i>
                                            <span>@assessment.StartDate.ToString("dd/MM/yyyy") -
                                                @assessment.EndDate.ToString("dd/MM/yyyy")</span>
                                        </div>
                                        <div class="info-item">
                                            <i class="fas fa-users"></i>
                                            <span>@assessment.StudentCount học sinh</span>
                                        </div>
                                        <div class="info-item">
                                            <i class="fas fa-chart-line"></i>
                                            <span>@(GetCompletionPercentage(assessment))% hoàn thành</span>
                                        </div>
                                    </div>

                                    <div class="progress-section">
                                        <div class="progress-info">
                                            <span>Tiến độ</span>
                                            <span>@assessment.CompletedCount/@assessment.StudentCount</span>
                                        </div>
                                        <div class="progress">
                                            <div class="progress-bar" style="width: @(GetCompletionPercentage(assessment))%"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <button class="btn btn-primary btn-sm" @onclick="() => ViewDetails(assessment.AssessmentBatchId)">
                                        <i class="fas fa-eye"></i>
                                        Xem chi tiết
                                    </button>
                                    @if (assessment.Status == 1)
                                    {
                                        <button class="btn btn-success btn-sm" @onclick="() => ManageParticipants(assessment.AssessmentBatchId)">
                                            <i class="fas fa-users"></i>
                                            Quản lý HS
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination -->
                <div class="pagination-section mt-4">
                    <nav aria-label="Assessment pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                            </li>
                            @for (int i = 1; i <= totalPages; i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>

    <!-- Quick Actions Float Button -->
    <div class="quick-actions">
        <button type="button" class="btn btn-primary btn-floating" @onclick="ShowCreateAssessmentModal"
            title="Tạo đợt kiểm tra mới">
            <i class="fas fa-plus"></i>
        </button>
    </div>
</div>

@code {
    // API Data
    private List<AssessmentBatchInfoDto> assessments = new();
    private AssessmentBatchStatisticsDto? statistics;
    private bool isLoading = true;
    private string? errorMessage;

    // Filter properties
    private string searchText = "";
    private string _selectedStatus = "";
    private string _selectedType = "";
    private DateTime? _fromDate;
    private DateTime? _toDate;

    private string selectedStatus
    {
        get => _selectedStatus;
        set
        {
            _selectedStatus = value;
            _ = FilterAssessments();
        }
    }

    // private string selectedType
    // {
    //     get => _selectedType;
    //     set
    //     {
    //         _selectedType = value;
    //         _ = FilterAssessments();
    //     }
    // }

    private DateTime? fromDate
    {
        get => _fromDate;
        set
        {
            _fromDate = value;
            _ = FilterAssessments();
        }
    }

    private DateTime? toDate
    {
        get => _toDate;
        set
        {
            _toDate = value;
            _ = FilterAssessments();
        }
    }

    // Pagination properties
    private int currentPage = 1;
    private int pageSize = 9;
    private int totalPages = 1;
    private int totalAssessments = 0;

    // Statistics from API
    private int activeAssessments => statistics?.ActiveBatches ?? 0;
    private int completedAssessments => statistics?.CompletedBatches ?? 0;
    private int totalParticipants => statistics?.TotalStudentsInBatches ?? 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Load statistics
            statistics = await AssessmentBatchApiClient.GetAssessmentBatchStatisticsAsync();
            
            // Load assessment batches
            await LoadAssessmentBatches();
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAssessmentBatches()
    {
        try
        {
            AssessmentBatchesApiResponse? response;

            // Check if we need to use search/filter
            if (HasActiveFilters())
            {
                var searchDto = new AssessmentBatchSearchDto
                {
                    Page = currentPage,
                    PageSize = pageSize,
                    SearchTerm = string.IsNullOrWhiteSpace(searchText) ? null : searchText,
                    StartDateFrom = _fromDate,
                    StartDateTo = _toDate,
                    CreatedFrom = _fromDate,
                    CreatedTo = _toDate
                };

                // Parse status if provided
                if (!string.IsNullOrWhiteSpace(_selectedStatus) && short.TryParse(_selectedStatus, out var statusValue))
                {
                    searchDto.Status = statusValue;
                }

                response = await AssessmentBatchApiClient.SearchAssessmentBatchesAsync(searchDto);
            }
            else
            {
                // Use basic get all
                response = await AssessmentBatchApiClient.GetAllAssessmentBatchesAsync(
                    currentPage, 
                    pageSize, 
                    string.IsNullOrWhiteSpace(searchText) ? null : searchText, 
                    false
                );
            }

            if (response != null)
            {
                assessments = response.AssessmentBatches ?? new List<AssessmentBatchInfoDto>();
                totalAssessments = response.Pagination?.TotalCount ?? 0;
                totalPages = response.Pagination?.TotalPages ?? 1;
                currentPage = response.Pagination?.CurrentPage ?? 1;
            }
            else
            {
                assessments = new List<AssessmentBatchInfoDto>();
                totalAssessments = 0;
                totalPages = 1;
                currentPage = 1;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải danh sách kiểm tra: {ex.Message}";
            Console.WriteLine($"Error loading assessment batches: {ex.Message}");
        }
    }

    private bool HasActiveFilters()
    {
        return !string.IsNullOrWhiteSpace(_selectedStatus) ||
               !string.IsNullOrWhiteSpace(_selectedType) ||
               _fromDate.HasValue ||
               _toDate.HasValue;
    }

    private async Task FilterAssessments()
    {
        currentPage = 1; // Reset to first page when filtering
        await LoadAssessmentBatches();
        StateHasChanged();
    }

    private async Task SearchAssessments(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await FilterAssessments();
        }
    }

    private async Task ClearFilters()
    {
        searchText = "";
        _selectedStatus = "";
        _selectedType = "";
        _fromDate = null;
        _toDate = null;
        currentPage = 1;
        await LoadAssessmentBatches();
        StateHasChanged();
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadAssessmentBatches();
            StateHasChanged();
        }
    }

    private string GetStatusText(short status) => status switch
    {
        0 => "Nháp",
        1 => "Đang tiến hành", 
        2 => "Hoàn thành",
        3 => "Đã hủy",
        -1 => "Vô hiệu hóa",
        _ => "Không xác định"
    };

    private string GetStatusBadgeClass(short status) => status switch
    {
        0 => "bg-secondary",      // Nháp
        1 => "bg-primary",        // Đang tiến hành
        2 => "bg-success",        // Hoàn thành
        3 => "bg-danger",         // Đã hủy
        -1 => "bg-dark",          // Vô hiệu hóa
        _ => "bg-warning"
    };

    private string GetTypeText(string type) => type switch
    {
        "physical" => "Thể lực",
        "health" => "Sức khỏe",
        "comprehensive" => "Toàn diện",
        _ => "Khác"
    };

    private double GetCompletionPercentage(AssessmentBatchInfoDto assessment)
    {
        if (assessment.StudentCount == 0) return 0;
        return Math.Round((double)assessment.CompletedCount / assessment.StudentCount * 100, 1);
    }

    private async Task ShowCreateAssessmentModal()
    {
        try
        {
            Navigation.NavigateTo("/assessmentbatch/add");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error showing create modal: {ex.Message}");
        }
    }

    private async Task ViewDetails(string AssessmentBatchId)
    {
        try
        {
            Navigation.NavigateTo($"/assessmentbatch/edit/{AssessmentBatchId}");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error viewing details: {ex.Message}");
        }
    }

    private async Task EditAssessment(string AssessmentBatchId)
    {
        try
        {
            Navigation.NavigateTo($"/assessmentbatch/edit/{AssessmentBatchId}");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing assessment: {ex.Message}");
        }
    }

    private async Task ManageParticipants(string AssessmentBatchId)
    {
        try
        {
            Navigation.NavigateTo($"/assessment-batch/{AssessmentBatchId}/students");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error managing participants: {ex.Message}");
        }
    }

    private async Task DeleteAssessment(string id)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc chắn muốn xóa đợt kiểm tra này?");
            if (confirmed)
            {
                var success = await AssessmentBatchApiClient.SoftDeleteAssessmentBatchAsync(id);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Xóa thành công!");
                    await LoadData(); // Refresh data
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi xóa!");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting assessment: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi xóa!");
        }
    }

    // Legacy class for compatibility - can be removed later
    public class AssessmentBatch
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Type { get; set; } = "";
        public string Status { get; set; } = "";
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int ParticipantCount { get; set; }
        public int CompletedCount { get; set; }
        public int CompletionRate { get; set; }
    }
}

                                       
                                                           
                                                           
                                                
                                            
                                                           
                                               
           
       