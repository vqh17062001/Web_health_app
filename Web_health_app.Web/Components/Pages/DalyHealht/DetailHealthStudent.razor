@page "/dalyhealth/detailhealthstudent/{studentUserId}"
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using Web_health_app.Web.ApiClients.Atlas
@using Web_health_app.ApiService.Entities.NonSQLTable
@using Web_health_app.Models.Models.NonSqlDTO
@using System.Text.Json
@attribute [Authorize(Roles = "ACCESS.DetailHealthStudent")]

@using Web_health_app.Web.Components.Layout

@inject AtlasApiClient AtlasApi
@inject NavigationManager Navigation

@layout EmptyLayout

<link href="/css/DalyHealth/detail-health-student.css" rel="stylesheet" />

<style>
    .status-icon.connected {
        color: #28a745;
    }
    
    .status-icon.disconnected {
        color: #dc3545;
    }
    
    .sync-status.success {
        color: #28a745;
    }
    
    .sync-status.warning {
        color: #ffc107;
    }
    
    .sync-details h6 {
        margin-bottom: 1rem;
        color: #495057;
        font-weight: 600;
    }
    
    .device-info {
        background: #f8f9fa;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    /* Health Statistics Styles */
    .stats-comparison-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-comparison-card {
        background: #fff;
        border: 1px solid #e3e6f0;
        border-radius: 0.75rem;
        padding: 1.5rem;
        box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
        transition: all 0.3s;
    }

    .stat-comparison-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 0.25rem 2rem 0 rgba(58, 59, 69, 0.2);
    }

    .stat-header {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
    }

    .stat-header i {
        font-size: 1.5rem;
        margin-right: 0.75rem;
        width: 2rem;
        text-align: center;
    }

    .stat-comparison-card.steps .stat-header i { color: #5e72e4; }
    .stat-comparison-card.heart-rate .stat-header i { color: #f5365c; }
    .stat-comparison-card.calories .stat-header i { color: #fb6340; }
    .stat-comparison-card.sleep .stat-header i { color: #11cdef; }

    .stat-header h5 {
        margin: 0;
        font-weight: 600;
        color: #5a5c69;
    }

    .stat-values {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .current-value, .average-value {
        text-align: center;
    }

    .current-value .label, .average-value .label {
        display: block;
        font-size: 0.875rem;
        color: #6e707e;
        margin-bottom: 0.25rem;
    }

    .current-value .value, .average-value .value {
        display: block;
        font-size: 1.5rem;
        font-weight: 700;
        color: #5a5c69;
    }

    .trend-indicator {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .trend-indicator i {
        font-size: 1.25rem;
        margin-bottom: 0.25rem;
    }

    .trend-indicator span {
        font-size: 0.875rem;
        font-weight: 600;
    }

    .progress-bar-comparison .progress-item {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .progress-bar-comparison .progress-item span {
        min-width: 80px;
        font-size: 0.875rem;
        color: #6e707e;
    }

    .progress-bar-comparison .progress {
        flex: 1;
        height: 0.5rem;
        margin-left: 1rem;
    }

    .heart-rate-ranges, .sleep-quality-comparison {
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #e3e6f0;
    }

    .range-item, .quality-item {
        display: flex;
        justify-content: space-between;
        font-size: 0.875rem;
        color: #6e707e;
    }

    .period-summary {
        background: #f8f9fa;
        border-radius: 0.5rem;
        padding: 1.5rem;
        border-left: 4px solid #5e72e4;
    }

    .period-summary h5 {
        color: #5a5c69;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .summary-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
    }

    .summary-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem;
        background: white;
        border-radius: 0.375rem;
        border: 1px solid #e3e6f0;
    }

    .summary-item .label {
        color: #6e707e;
        font-weight: 500;
    }

    .summary-item .value {
        color: #5a5c69;
        font-weight: 600;
    }

    .daily-breakdown {
        background: #fff;
        border-radius: 0.5rem;
        padding: 1.5rem;
        border: 1px solid #e3e6f0;
    }

    .daily-breakdown h5 {
        color: #5a5c69;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .breakdown-table {
        overflow-x: auto;
    }

    .table-header, .table-row {
        display: grid;
        grid-template-columns: 80px 100px 100px 100px 80px 120px;
        gap: 1rem;
        padding: 0.75rem;
        align-items: center;
    }

    .table-header {
        background: #f8f9fa;
        border-radius: 0.375rem;
        font-weight: 600;
        color: #5a5c69;
        border-bottom: 2px solid #e3e6f0;
    }

    .table-row {
        border-bottom: 1px solid #e3e6f0;
        transition: background-color 0.2s;
    }

    .table-row:hover {
        background: #f8f9fa;
    }

    .table-row:last-child {
        border-bottom: none;
    }

    .table-row .date {
        font-weight: 600;
        color: #5a5c69;
    }

    .table-row .steps, .table-row .calories, .table-row .heart-rate, .table-row .sleep {
        font-weight: 500;
        color: #6e707e;
    }

    .table-row .status {
        display: flex;
        align-items: center;
        font-weight: 500;
    }

    .table-row .status i {
        margin-right: 0.5rem;
    }

    /* Media queries for responsive design */
    .media-responsive {
        /* Placeholder for responsive styles */
    }
</style>

<div class="detail-health-page">
    <!-- Page Header -->
    <div class="page-header">
        <div class="container-fluid">
            <div class="header-content">
                <div class="back-button">
                    <button class="btn btn-outline-secondary" @onclick="GoBack">
                        <i class="fas fa-arrow-left"></i>
                        Quay lại
                    </button>
                </div>
                <div class="header-info">
                    <div class="student-avatar-large">
                        <div class="avatar-fallback">
                            <i class="fas fa-user"></i>
                        </div>
                    </div>
                    @if (student != null)
                    {
                        <div class="student-details">
                            <h2>@student.FullName</h2>
                            <p class="student-info">@student.Department - @student.Role</p>
                            <div class="sync-info">
                                @{
                                    var deviceStatus = GetDeviceStatus();
                                }
                                @if (deviceStatus.IsOnline)
                                {
                                    <span class="sync-status">
                                        <i class="fas fa-check-circle text-success"></i>
                                        Đang hoạt động
                                    </span>
                                    <span class="last-sync">Cập nhật lần cuối: @deviceStatus.LastSync</span>
                                }
                                else if (deviceStatus.HasDevices)
                                {
                                    <span class="sync-status">
                                        <i class="fas fa-exclamation-triangle text-warning"></i>
                                        Offline
                                    </span>
                                    <span class="last-sync">Cập nhật lần cuối: @deviceStatus.LastSync</span>
                                }
                                else
                                {
                                    <span class="sync-status">
                                        <i class="fas fa-times-circle text-danger"></i>
                                        Chưa kết nối thiết bị
                                    </span>
                                    <span class="last-sync">Chưa có dữ liệu đồng bộ</span>
                                }
                            </div>
                        </div>
                    }
                    else if (isLoading)
                    {
                        <div class="student-details">
                            <h2>Đang tải...</h2>
                            <p class="student-info">Đang lấy thông tin học sinh</p>
                        </div>
                    }
                    else
                    {
                        <div class="student-details">
                            <h2>Không tìm thấy</h2>
                            <p class="student-info">Không tìm thấy thông tin học sinh</p>
                        </div>
                    }
                </div>
                <div class="header-actions">
                    <button class="btn btn-outline-primary" @onclick="RefreshData" disabled="@isLoading">
                        <i class="fas fa-sync-alt @(isLoading ? "fa-spin" : "")"></i>
                        @(isLoading ? "Đang tải..." : "Đồng bộ lại")
                    </button>
                    <button class="btn btn-primary" disabled="@(student == null)">
                        <i class="fas fa-download"></i>
                        Xuất báo cáo
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Error Message / Debug Info -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="container-fluid mt-3">
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-triangle"></i>
                @errorMessage
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="container-fluid mt-3">
            <div class="alert alert-info" role="alert">
                <i class="fas fa-spinner fa-spin"></i>
                Đang tải dữ liệu...
            </div>
        </div>
    }

    <!-- Debug Info (only show when there's data) -->
    @if (!isLoading && student != null)
    {
        <div class="container-fluid mt-3">
            <div class="alert alert-info" role="alert">
                <strong>Debug Info:</strong><br />
                - Student: @student.FullName (@student.Id)<br />
                - Sensor Readings: @sensorReadings.Count records<br />
                - Device Status: @(deviceStatus != null ? $"{deviceStatus.TotalDevices} devices" : "No device data")<br />
                @{
                    var debugHealthMetrics = GetHealthMetrics();
                    var sensorTypes = sensorReadings.Select(r => r.Metadata.SensorType).Where(s =>
                    !string.IsNullOrEmpty(s)).Distinct().ToList();
                }
                - Health Data: HR=@debugHealthMetrics.HeartRate, Steps=@debugHealthMetrics.Steps,
                Sleep=@debugHealthMetrics.Sleep, Calories=@debugHealthMetrics.Calories<br />
                - Sensor Types Available: @string.Join(", ", sensorTypes)<br />
                - Data Readings Count: HR=@debugHealthMetrics.HeartRateReadings.Count,
                Steps=@debugHealthMetrics.StepsReadings.Count, Sleep=@debugHealthMetrics.SleepReadings.Count,
                Calories=@debugHealthMetrics.CalorieReadings.Count<br />
                @if (deviceStatus != null)
                {
                    <text><strong>Device Details:</strong><br /></text>
                    <text>- Total Devices: @deviceStatus.TotalDevices<br /></text>
                    <text>- Online Devices: @deviceStatus.OnlineDevices<br /></text>
                    <text>- Offline Devices: @deviceStatus.OfflineDevices<br /></text>
                    @if (deviceStatus.Devices != null && deviceStatus.Devices.Any())
                    {
                        @foreach (var device in deviceStatus.Devices)
                        {
                            <span>- Device: @device.Model (@device.DeviceId)</span><br />
                            <span>&nbsp;&nbsp;Status: @device.Status | IsOnline: @device.IsOnline</span><br />
                            <span>&nbsp;&nbsp;OS: @device.OsVersion | SDK: @device.SdkVersion</span><br />
                            <span>&nbsp;&nbsp;LastSync: @device.LastSyncAt</span><br />
                            <span>&nbsp;&nbsp;Registered: @device.RegisteredAt</span><br />
                        }
                    }
                    else
                    {
                        <span>- No devices found in collection</span><br />
                    }
                }
                else
                {
                    <span>- Device Status is null</span><br />
                }
                <br />
                <button class="btn btn-sm btn-outline-primary mt-2" @onclick="RefreshData">
                    <i class="fas fa-refresh"></i>
                    Debug Refresh
                </button>
            </div>
        </div>
    }

    <!-- Health Overview Cards -->
    @if (!isLoading && student != null)
    {
        <div class="container-fluid">
            <div class="overview-section">
                <div class="row g-4">
                    @{
                        var healthMetrics = GetHealthMetrics();
                    }

                    <div class="col-lg-3 col-md-6">
                        <div class="health-overview-card steps">
                            <div class="card-icon">
                                <i class="fas fa-walking"></i>
                            </div>
                            <div class="card-content">
                                @if (healthMetrics.Steps > 0)
                                {
                                    <h3>@healthMetrics.Steps.ToString("#,0")</h3>
                                    <p>Bước chân hôm nay</p>
                                    <div class="progress-container">
                                        @{
                                            var stepsGoal = 6000;
                                            var stepsProgress = stepsGoal > 0 ? Math.Min(100, (healthMetrics.Steps * 100) / stepsGoal) : 0;
                                        }
                                        <div class="progress-bar">
                                            <div class="progress-fill" style="width: @(stepsProgress)%"></div>
                                        </div>
                                        <small>Mục tiêu: @stepsGoal.ToString("#,0") bước</small>
                                    </div>
                                }
                                else
                                {
                                    <h3>--</h3>
                                    <p>Chưa có dữ liệu bước chân</p>
                                    <div class="progress-container">
                                        <div class="progress-bar">
                                            <div class="progress-fill" style="width: 0%"></div>
                                        </div>
                                        <small>Mục tiêu: 6,000 bước</small>
                                    </div>
                                }
                            </div>
                            <div class="trend-indicator @(GetStepsStatus(healthMetrics.Steps))">
                                <i class="fas fa-@(healthMetrics.Steps > 0 ? "walking" : "times")"></i>
                                @GetStepsStatusText(healthMetrics.Steps)
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-3 col-md-6">
                        <div class="health-overview-card calories">
                            <div class="card-icon">
                                <i class="fas fa-fire"></i>
                            </div>
                            <div class="card-content">
                                @if (healthMetrics.Calories > 0)
                                {
                                    <h3>@healthMetrics.Calories.ToString("#,0")</h3>
                                    <p>Calories đã đốt</p>
                                    <div class="progress-container">
                                        @{
                                            var caloriesGoal = 2400;
                                            var caloriesProgress = caloriesGoal > 0 ? Math.Min(100, (healthMetrics.Calories * 100) / caloriesGoal) : 0;
                                        }
                                        <div class="progress-bar">
                                            <div class="progress-fill" style="width: @(caloriesProgress)%"></div>
                                        </div>
                                        <small>Mục tiêu: @caloriesGoal.ToString("#,0") calories</small>
                                    </div>
                                }
                                else
                                {
                                    <h3>--</h3>
                                    <p>Chưa có dữ liệu calories</p>
                                    <div class="progress-container">
                                        <div class="progress-bar">
                                            <div class="progress-fill" style="width: 0%"></div>
                                        </div>
                                        <small>Mục tiêu: 2,400 calories</small>
                                    </div>
                                }
                            </div>
                            <div class="trend-indicator @(GetCaloriesStatus(healthMetrics.Calories))">
                                <i class="fas fa-@(healthMetrics.Calories > 0 ? "fire" : "times")"></i>
                                @GetCaloriesStatusText(healthMetrics.Calories)
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-3 col-md-6">
                        <div class="health-overview-card heart-rate">
                            <div class="card-icon">
                                <i class="fas fa-heart"></i>
                            </div>
                            <div class="card-content">
                                @if (healthMetrics.HeartRate > 0)
                                {
                                    <h3>@healthMetrics.HeartRate.ToString("F0") BPM</h3>
                                    <p>Nhịp tim trung bình</p>
                                    <div class="heart-rate-zones">
                                        <div class="zone-item">
                                            <span class="zone-label">Nghỉ ngơi:</span>
                                            <span class="zone-value">60-100 BPM</span>
                                        </div>
                                        <div class="zone-item">
                                            <span class="zone-label">Tập luyện:</span>
                                            <span class="zone-value">120-140 BPM</span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <h3>-- BPM</h3>
                                    <p>Chưa có dữ liệu nhịp tim</p>
                                    <div class="heart-rate-zones">
                                        <div class="zone-item">
                                            <span class="zone-label">Nghỉ ngơi:</span>
                                            <span class="zone-value">60-100 BPM</span>
                                        </div>
                                        <div class="zone-item">
                                            <span class="zone-label">Tập luyện:</span>
                                            <span class="zone-value">120-140 BPM</span>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="trend-indicator @(GetHeartRateStatus(healthMetrics.HeartRate))">
                                <i class="fas fa-@(healthMetrics.HeartRate > 0 ? "heartbeat" : "times")"></i>
                                @GetHeartRateStatusText(healthMetrics.HeartRate)
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-3 col-md-6">
                        <div class="health-overview-card sleep">
                            <div class="card-icon">
                                <i class="fas fa-bed"></i>
                            </div>
                            <div class="card-content">
                                @if (healthMetrics.Sleep > 0)
                                {
                                    var hours = (int)healthMetrics.Sleep;
                                    var minutes = (int)((healthMetrics.Sleep - hours) * 60);
                                    <h3>@(hours)h @(minutes)m</h3>
                                    <p>Giấc ngủ đêm qua</p>
                                    <div class="sleep-quality">
                                        <div class="quality-score @(GetSleepStatus(healthMetrics.Sleep))">
                                            <span class="score">@(GetSleepQualityScore(healthMetrics.Sleep))%</span>
                                            <span class="label">@GetSleepStatusText(healthMetrics.Sleep)</span>
                                        </div>
                                        <div class="sleep-stages">
                                            <small>Tổng thời gian: @(hours)h @(minutes)m</small>
                                            <small>Chất lượng: @GetSleepQuality(healthMetrics.Sleep)</small>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <h3>-- h --m</h3>
                                    <p>Chưa có dữ liệu giấc ngủ</p>
                                    <div class="sleep-quality">
                                        <div class="quality-score no-data">
                                            <span class="score">--%</span>
                                            <span class="label">Chưa có dữ liệu</span>
                                        </div>
                                        <div class="sleep-stages">
                                            <small>Mục tiêu: 7-9 giờ</small>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="trend-indicator @(GetSleepStatus(healthMetrics.Sleep))">
                                <i class="fas fa-@(healthMetrics.Sleep > 0 ? "moon" : "times")"></i>
                                @GetSleepStatusText(healthMetrics.Sleep)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Detailed Charts Section -->
            <div class="charts-section">
                <div class="row g-4">
                    <!-- Health Statistics Overview -->
                    <div class="col-12">
                        <div class="chart-card">
                            <div class="chart-header">
                                <h4>
                                    <i class="fas fa-chart-bar"></i>
                                    Thống kê chỉ số sức khỏe
                                </h4>
                                <div class="chart-controls">
                                    <button class="btn btn-sm btn-outline-secondary @(selectedPeriod == "today" ? "active" : "")" 
                                            @onclick="@(() => ChangePeriod("today"))">Hôm nay</button>
                                    <button class="btn btn-sm btn-outline-secondary @(selectedPeriod == "week" ? "active" : "")" 
                                            @onclick="@(() => ChangePeriod("week"))">7 ngày</button>
                                    <button class="btn btn-sm btn-outline-secondary @(selectedPeriod == "2weeks" ? "active" : "")" 
                                            @onclick="@(() => ChangePeriod("2weeks"))">2 tuần</button>
                                    <button class="btn btn-sm btn-outline-secondary @(selectedPeriod == "month" ? "active" : "")" 
                                            @onclick="@(() => ChangePeriod("month"))">30 ngày</button>
                                </div>
                            </div>
                            <div class="chart-content">
                                @{
                                    var periodStats = GetHealthStatsByPeriod(selectedPeriod);
                                }
                                
                                <!-- Current vs Average Comparison -->
                                <div class="stats-comparison-grid">
                                    <!-- Steps Comparison -->
                                    <div class="stat-comparison-card steps">
                                        <div class="stat-header">
                                            <i class="fas fa-walking"></i>
                                            <h5>Bước chân</h5>
                                        </div>
                                        <div class="stat-values">
                                            <div class="current-value">
                                                <span class="label">Hiện tại</span>
                                                <span class="value">@periodStats.CurrentSteps.ToString("#,0")</span>
                                            </div>
                                            <div class="average-value">
                                                <span class="label">Trung bình @GetPeriodLabel(selectedPeriod)</span>
                                                <span class="value">@periodStats.AvgSteps.ToString("#,0")</span>
                                            </div>
                                            <div class="trend-indicator">
                                                @{
                                                    var stepsTrend = periodStats.CurrentSteps - periodStats.AvgSteps;
                                                }
                                                <i class="fas fa-@(stepsTrend > 0 ? "arrow-up text-success" : stepsTrend < 0 ? "arrow-down text-danger" : "minus text-muted")"></i>
                                                <span class="@(stepsTrend > 0 ? "text-success" : stepsTrend < 0 ? "text-danger" : "text-muted")">
                                                    @(stepsTrend != 0 ? Math.Abs(stepsTrend).ToString("#,0") : "Không đổi")
                                                </span>
                                            </div>
                                        </div>
                                        <div class="progress-bar-comparison">
                                            <div class="progress-item">
                                                <span>Hiện tại</span>
                                                <div class="progress">
                                                    <div class="progress-bar bg-primary" style="width: @Math.Min(100, (periodStats.CurrentSteps * 100.0 / 10000))%"></div>
                                                </div>
                                            </div>
                                            <div class="progress-item">
                                                <span>Trung bình</span>
                                                <div class="progress">
                                                    <div class="progress-bar bg-secondary" style="width: @Math.Min(100, (periodStats.AvgSteps * 100.0 / 10000))%"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Heart Rate Comparison -->
                                    <div class="stat-comparison-card heart-rate">
                                        <div class="stat-header">
                                            <i class="fas fa-heart"></i>
                                            <h5>Nhịp tim (BPM)</h5>
                                        </div>
                                        <div class="stat-values">
                                            <div class="current-value">
                                                <span class="label">Hiện tại</span>
                                                <span class="value">@periodStats.CurrentHeartRate.ToString("F0")</span>
                                            </div>
                                            <div class="average-value">
                                                <span class="label">Trung bình @GetPeriodLabel(selectedPeriod)</span>
                                                <span class="value">@periodStats.AvgHeartRate.ToString("F0")</span>
                                            </div>
                                            <div class="trend-indicator">
                                                @{
                                                    var hrTrend = periodStats.CurrentHeartRate - periodStats.AvgHeartRate;
                                                }
                                                <i class="fas fa-@(hrTrend > 0 ? "arrow-up text-warning" : hrTrend < 0 ? "arrow-down text-success" : "minus text-muted")"></i>
                                                <span class="@(hrTrend > 0 ? "text-warning" : hrTrend < 0 ? "text-success" : "text-muted")">
                                                    @(hrTrend != 0 ? Math.Abs(hrTrend).ToString("F0") : "Không đổi")
                                                </span>
                                            </div>
                                        </div>
                                        <div class="heart-rate-ranges">
                                            <div class="range-item">
                                                <span>Min: @periodStats.MinHeartRate.ToString("F0") BPM</span>
                                                <span>Max: @periodStats.MaxHeartRate.ToString("F0") BPM</span>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Calories Comparison -->
                                    <div class="stat-comparison-card calories">
                                        <div class="stat-header">
                                            <i class="fas fa-fire"></i>
                                            <h5>Calories</h5>
                                        </div>
                                        <div class="stat-values">
                                            <div class="current-value">
                                                <span class="label">Hiện tại</span>
                                                <span class="value">@periodStats.CurrentCalories.ToString("#,0")</span>
                                            </div>
                                            <div class="average-value">
                                                <span class="label">Trung bình @GetPeriodLabel(selectedPeriod)</span>
                                                <span class="value">@periodStats.AvgCalories.ToString("#,0")</span>
                                            </div>
                                            <div class="trend-indicator">
                                                @{
                                                    var caloriesTrend = periodStats.CurrentCalories - periodStats.AvgCalories;
                                                }
                                                <i class="fas fa-@(caloriesTrend > 0 ? "arrow-up text-success" : caloriesTrend < 0 ? "arrow-down text-danger" : "minus text-muted")"></i>
                                                <span class="@(caloriesTrend > 0 ? "text-success" : caloriesTrend < 0 ? "text-danger" : "text-muted")">
                                                    @(caloriesTrend != 0 ? Math.Abs(caloriesTrend).ToString("#,0") : "Không đổi")
                                                </span>
                                            </div>
                                        </div>
                                        <div class="progress-bar-comparison">
                                            <div class="progress-item">
                                                <span>Hiện tại</span>
                                                <div class="progress">
                                                    <div class="progress-bar bg-warning" style="width: @Math.Min(100, (periodStats.CurrentCalories * 100.0 / 2400))%"></div>
                                                </div>
                                            </div>
                                            <div class="progress-item">
                                                <span>Trung bình</span>
                                                <div class="progress">
                                                    <div class="progress-bar bg-secondary" style="width: @Math.Min(100, (periodStats.AvgCalories * 100.0 / 2400))%"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Sleep Comparison -->
                                    <div class="stat-comparison-card sleep">
                                        <div class="stat-header">
                                            <i class="fas fa-bed"></i>
                                            <h5>Giấc ngủ (giờ)</h5>
                                        </div>
                                        <div class="stat-values">
                                            <div class="current-value">
                                                <span class="label">Hiện tại</span>
                                                <span class="value">@periodStats.CurrentSleep.ToString("F1")h</span>
                                            </div>
                                            <div class="average-value">
                                                <span class="label">Trung bình @GetPeriodLabel(selectedPeriod)</span>
                                                <span class="value">@periodStats.AvgSleep.ToString("F1")h</span>
                                            </div>
                                            <div class="trend-indicator">
                                                @{
                                                    var sleepTrend = periodStats.CurrentSleep - periodStats.AvgSleep;
                                                }
                                                <i class="fas fa-@(sleepTrend > 0 ? "arrow-up text-success" : sleepTrend < 0 ? "arrow-down text-warning" : "minus text-muted")"></i>
                                                <span class="@(sleepTrend > 0 ? "text-success" : sleepTrend < 0 ? "text-warning" : "text-muted")">
                                                    @(sleepTrend != 0 ? Math.Abs(sleepTrend).ToString("F1") + "h" : "Không đổi")
                                                </span>
                                            </div>
                                        </div>
                                        <div class="sleep-quality-comparison">
                                            <div class="quality-item">
                                                <span>Chất lượng: @GetSleepQuality(periodStats.CurrentSleep)</span>
                                                <span>Điểm: @GetSleepQualityScore(periodStats.CurrentSleep)/100</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Period Summary -->
                                <div class="period-summary mt-4">
                                    <h5><i class="fas fa-chart-line"></i> Tóm tắt @GetPeriodLabel(selectedPeriod)</h5>
                                    <div class="summary-grid">
                                        <div class="summary-item">
                                            <span class="label">Tổng số ngày có dữ liệu:</span>
                                            <span class="value">@periodStats.DaysWithData/@GetPeriodDays(selectedPeriod) ngày</span>
                                        </div>
                                        <div class="summary-item">
                                            <span class="label">Ngày hoàn thành mục tiêu bước chân:</span>
                                            <span class="value">@periodStats.DaysWithStepsGoal/@periodStats.DaysWithData ngày</span>
                                        </div>
                                        <div class="summary-item">
                                            <span class="label">Tổng bước chân:</span>
                                            <span class="value">@periodStats.TotalSteps.ToString("#,0") bước</span>
                                        </div>
                                        <div class="summary-item">
                                            <span class="label">Tổng calories đốt cháy:</span>
                                            <span class="value">@periodStats.TotalCalories.ToString("#,0") cal</span>
                                        </div>
                                        <div class="summary-item">
                                            <span class="label">Thời gian ngủ trung bình:</span>
                                            <span class="value">@periodStats.AvgSleep.ToString("F1") giờ/đêm</span>
                                        </div>
                                        <div class="summary-item">
                                            <span class="label">Nhịp tim nghỉ ngơi trung bình:</span>
                                            <span class="value">@periodStats.AvgRestingHeartRate.ToString("F0") BPM</span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Daily Breakdown (for weekly/monthly view) -->
                                @if (selectedPeriod != "today")
                                {
                                    <div class="daily-breakdown mt-4">
                                        <h5><i class="fas fa-calendar-alt"></i> Phân tích theo ngày</h5>
                                        <div class="breakdown-table">
                                            <div class="table-header">
                                                <span>Ngày</span>
                                                <span>Bước chân</span>
                                                <span>Calories</span>
                                                <span>Nhịp tim TB</span>
                                                <span>Giờ ngủ</span>
                                                <span>Trạng thái</span>
                                            </div>
                                            @foreach (var day in GetDailyBreakdown(selectedPeriod))
                                            {
                                                <div class="table-row">
                                                    <span class="date">@day.Date.ToString("dd/MM")</span>
                                                    <span class="steps">@day.Steps.ToString("#,0")</span>
                                                    <span class="calories">@day.Calories.ToString("#,0")</span>
                                                    <span class="heart-rate">@day.HeartRate.ToString("F0")</span>
                                                    <span class="sleep">@day.Sleep.ToString("F1")h</span>
                                                    <span class="status">
                                                        <i class="fas fa-circle @(day.IsGoodDay ? "text-success" : "text-warning")"></i>
                                                        @(day.IsGoodDay ? "Tốt" : "Cần cải thiện")
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Health Insights Section -->
            <div class="insights-section">
                <div class="row g-4">
                    <div class="col-lg-6">
                        <div class="insights-card">
                            <div class="card-header">
                                <h4>
                                    <i class="fas fa-lightbulb"></i>
                                    Nhận xét sức khỏe
                                </h4>
                            </div>
                            <div class="chart-content">
                                <div class="weekly-stats">
                                    <div class="stat-item">
                                        <div class="stat-icon steps">
                                            <i class="fas fa-walking"></i>
                                        </div>
                                        <div class="stat-data">
                                            <h5>65,234</h5>
                                            <p>Tổng bước chân</p>
                                            <div class="stat-change positive">
                                                <i class="fas fa-arrow-up"></i>
                                                +8% so với tuần trước
                                            </div>
                                        </div>
                                    </div>

                                    <div class="stat-item">
                                        <div class="stat-icon calories">
                                            <i class="fas fa-fire"></i>
                                        </div>
                                        <div class="stat-data">
                                            <h5>12,845</h5>
                                            <p>Tổng calories</p>
                                            <div class="stat-change positive">
                                                <i class="fas fa-arrow-up"></i>
                                                +12% so với tuần trước
                                            </div>
                                        </div>
                                    </div>

                                    <div class="stat-item">
                                        <div class="stat-icon heart-rate">
                                            <i class="fas fa-heart"></i>
                                        </div>
                                        <div class="stat-data">
                                            <h5>72 BPM</h5>
                                            <p>Nhịp tim TB</p>
                                            <div class="stat-change neutral">
                                                <i class="fas fa-minus"></i>
                                                Không đổi
                                            </div>
                                        </div>
                                    </div>

                                    <div class="stat-item">
                                        <div class="stat-icon sleep">
                                            <i class="fas fa-bed"></i>
                                        </div>
                                        <div class="stat-data">
                                            <h5>7h 32m</h5>
                                            <p>Giấc ngủ TB</p>
                                            <div class="stat-change positive">
                                                <i class="fas fa-arrow-up"></i>
                                                +20 phút
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Health Insights Section -->
            <div class="insights-section">
                <div class="row g-4">
                    <div class="col-lg-6">
                        <div class="insights-card">
                            <div class="card-header">
                                <h4>
                                    <i class="fas fa-lightbulb"></i>
                                    Nhận xét sức khỏe
                                </h4>
                            </div>
                            <div class="card-body">
                                <div class="insight-item positive">
                                    <div class="insight-icon">
                                        <i class="fas fa-thumbs-up"></i>
                                    </div>
                                    <div class="insight-content">
                                        <h5>Hoạt động tốt</h5>
                                        <p>Học sinh đã đạt mục tiêu bước chân 5/7 ngày trong tuần qua. Hãy tiếp tục duy trì!
                                        </p>
                                    </div>
                                </div>

                                <div class="insight-item warning">
                                    <div class="insight-icon">
                                        <i class="fas fa-exclamation-triangle"></i>
                                    </div>
                                    <div class="insight-content">
                                        <h5>Cần cải thiện giấc ngủ</h5>
                                        <p>Thời gian ngủ có xu hướng giảm trong 3 ngày qua. Khuyến nghị đi ngủ sớm hơn 30
                                            phút.</p>
                                    </div>
                                </div>

                                <div class="insight-item info">
                                    <div class="insight-icon">
                                        <i class="fas fa-info-circle"></i>
                                    </div>
                                    <div class="insight-content">
                                        <h5>Nhịp tim ổn định</h5>
                                        <p>Nhịp tim nghỉ ngơi trong khoảng bình thường. Có thể tăng cường bài tập cardio.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-6">
                        <div class="goals-card">
                            <div class="card-header">
                                <h4>
                                    <i class="fas fa-bullseye"></i>
                                    Mục tiêu sức khỏe
                                </h4>
                            </div>
                            <div class="card-body">
                                <div class="goal-item">
                                    <div class="goal-header">
                                        <span class="goal-title">Bước chân hàng ngày</span>
                                        <span class="goal-progress">82%</span>
                                    </div>
                                    <div class="goal-bar">
                                        <div class="goal-fill" style="width: 82%"></div>
                                    </div>
                                    <div class="goal-details">
                                        <span>8,234 / 10,000 bước</span>
                                        <span class="goal-status achieved">Đã đạt 5/7 ngày</span>
                                    </div>
                                </div>

                                <div class="goal-item">
                                    <div class="goal-header">
                                        <span class="goal-title">Calories đốt cháy</span>
                                        <span class="goal-progress">77%</span>
                                    </div>
                                    <div class="goal-bar">
                                        <div class="goal-fill calories" style="width: 77%"></div>
                                    </div>
                                    <div class="goal-details">
                                        <span>1,845 / 2,400 calories</span>
                                        <span class="goal-status in-progress">Đang tiến bộ</span>
                                    </div>
                                </div>

                                <div class="goal-item">
                                    <div class="goal-header">
                                        <span class="goal-title">Thời gian ngủ</span>
                                        <span class="goal-progress">97%</span>
                                    </div>
                                    <div class="goal-bar">
                                        <div class="goal-fill sleep" style="width: 97%"></div>
                                    </div>
                                    <div class="goal-details">
                                        <span>7h 45m / 8h</span>
                                        <span class="goal-status achieved">Gần đạt mục tiêu</span>
                                    </div>
                                </div>

                                <div class="goal-item">
                                    <div class="goal-header">
                                        <span class="goal-title">Hoạt động tuần</span>
                                        <span class="goal-progress">71%</span>
                                    </div>
                                    <div class="goal-bar">
                                        <div class="goal-fill activity" style="width: 71%"></div>
                                    </div>
                                    <div class="goal-details">
                                        <span>5 / 7 ngày hoạt động</span>
                                        <span class="goal-status in-progress">Cần cải thiện</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Device & Samsung Health Integration Status -->
            <div class="integration-section">
                <div class="integration-card">
                    <div class="card-header">
                        <h4>
                            <i class="fab fa-android"></i>
                            Trạng thái thiết bị & đồng bộ dữ liệu
                        </h4>
                    </div>
                    <div class="card-body">
                        <div class="integration-status">
                            @if (deviceStatus != null && deviceStatus.TotalDevices > 0 && deviceStatus.Devices != null)
                            {
                                @foreach (var device in deviceStatus.Devices)
                                {
                                    <div class="status-item">
                                        <div class="status-icon @(device.IsOnline ? "connected" : "disconnected")">
                                            <i class="fas fa-@(device.IsOnline ? "check-circle" : "times-circle")"></i>
                                        </div>
                                        <div class="status-info">
                                            <h5>
                                                @GetDeviceDisplayName(device.Model)
                                                @if (device.IsOnline)
                                                {
                                                    <span class="badge bg-success ms-2">Online</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger ms-2">Offline</span>
                                                }
                                            </h5>
                                            <p><strong>Device ID:</strong> @device.DeviceId</p>
                                            @if (!string.IsNullOrEmpty(device.OsVersion))
                                            {
                                                <p><strong>Android Version:</strong> @device.OsVersion</p>
                                            }
                                            @if (!string.IsNullOrEmpty(device.SdkVersion))
                                            {
                                                <p><strong>API Level:</strong> @device.SdkVersion</p>
                                            }
                                        </div>
                                        <div class="status-time">
                                            @if (!string.IsNullOrEmpty(device.LastSyncAt))
                                            {
                                                @if (DateTime.TryParse(device.LastSyncAt, null, DateTimeStyles.RoundtripKind, out DateTime lastSync))
                                                {
                                                    // Convert UTC to Vietnam timezone
                                                    var timeZone = TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time");
                                                    var localTime = TimeZoneInfo.ConvertTime(lastSync, timeZone);
                                                    var timeAgo = DateTime.Now - localTime;
                                                    
                                                    <span><strong>Đồng bộ lần cuối:</strong></span><br />
                                                    <span>@localTime.ToString("HH:mm dd/MM/yyyy")</span><br />
                                                    <small class="text-muted">
                                                        @if (timeAgo.TotalMinutes < 1)
                                                        {
                                                            <span>Vừa xong</span>
                                                        }
                                                        else if (timeAgo.TotalHours < 1)
                                                        {
                                                            <span>@((int)timeAgo.TotalMinutes) phút trước</span>
                                                        }
                                                        else if (timeAgo.TotalDays < 1)
                                                        {
                                                            <span>@((int)timeAgo.TotalHours) giờ trước</span>
                                                        }
                                                        else
                                                        {
                                                            <span>@((int)timeAgo.TotalDays) ngày trước</span>
                                                        }
                                                    </small>
                                                }
                                                else
                                                {
                                                    <span><strong>Đồng bộ lần cuối:</strong> @device.LastSyncAt</span>
                                                }
                                            }
                                            else
                                            {
                                                <span>Chưa có thông tin đồng bộ</span>
                                            }
                                            
                                            @if (!string.IsNullOrEmpty(device.RegisteredAt))
                                            {
                                                <br />
                                                @if (DateTime.TryParse(device.RegisteredAt, null, DateTimeStyles.RoundtripKind, out DateTime registered))
                                                {
                                                    var timeZone = TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time");
                                                    var localTime = TimeZoneInfo.ConvertTime(registered, timeZone);
                                                    <small class="text-muted"><strong>Đăng ký:</strong> @localTime.ToString("dd/MM/yyyy")</small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted"><strong>Đăng ký:</strong> @device.RegisteredAt</small>
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="status-item">
                                    <div class="status-icon disconnected">
                                        <i class="fas fa-times-circle"></i>
                                    </div>
                                    <div class="status-info">
                                        <h5>Chưa có thiết bị kết nối</h5>
                                        <p>Học sinh chưa đăng ký thiết bị nào hoặc chưa cài đặt ứng dụng</p>
                                    </div>
                                    <div class="status-time">
                                        <span>Chưa có dữ liệu</span>
                                    </div>
                                </div>
                            }

                            <!-- Sensor Data Sync Status -->
                            @if (sensorReadings.Any())
                            {
                                <div class="sync-details">
                                    <h6>Trạng thái đồng bộ dữ liệu:</h6>
                                    @{
                                        var syncHealthMetrics = GetHealthMetrics();
                                        var sensorTypes = sensorReadings.Select(r => r.Metadata.SensorType).Where(s =>
                                        !string.IsNullOrEmpty(s)).Distinct().ToList();
                                    }
                                    
                                    <div class="sync-item">
                                        <i class="fas fa-walking"></i>
                                        <span>Bước chân</span>
                                        <div class="sync-status @(syncHealthMetrics.Steps > 0 ? "success" : "warning")">
                                            <i class="fas fa-@(syncHealthMetrics.Steps > 0 ? "check" : "exclamation-triangle")"></i>
                                            @(syncHealthMetrics.Steps > 0 ? "Đã đồng bộ" : "Chưa có dữ liệu")
                                        </div>
                                    </div>
                                    <div class="sync-item">
                                        <i class="fas fa-fire"></i>
                                        <span>Calories</span>
                                        <div class="sync-status @(syncHealthMetrics.Calories > 0 ? "success" : "warning")">
                                            <i class="fas fa-@(syncHealthMetrics.Calories > 0 ? "check" : "exclamation-triangle")"></i>
                                            @(syncHealthMetrics.Calories > 0 ? "Đã đồng bộ" : "Chưa có dữ liệu")
                                        </div>
                                    </div>
                                    <div class="sync-item">
                                        <i class="fas fa-heart"></i>
                                        <span>Nhịp tim</span>
                                        <div class="sync-status @(syncHealthMetrics.HeartRate > 0 ? "success" : "warning")">
                                            <i class="fas fa-@(syncHealthMetrics.HeartRate > 0 ? "check" : "exclamation-triangle")"></i>
                                            @(syncHealthMetrics.HeartRate > 0 ? "Đã đồng bộ" : "Chưa có dữ liệu")
                                        </div>
                                    </div>
                                    <div class="sync-item">
                                        <i class="fas fa-bed"></i>
                                        <span>Giấc ngủ</span>
                                        <div class="sync-status @(syncHealthMetrics.Sleep > 0 ? "success" : "warning")">
                                            <i class="fas fa-@(syncHealthMetrics.Sleep > 0 ? "check" : "exclamation-triangle")"></i>
                                            @(syncHealthMetrics.Sleep > 0 ? "Đã đồng bộ" : "Chưa có dữ liệu")
                                        </div>
                                    </div>
                                    
                                    <div class="mt-3">
                                        <small class="text-muted">
                                            Sensor types có sẵn: @string.Join(", ", sensorTypes)
                                        </small>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="sync-details">
                                    <div class="sync-item">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        <span>Không có dữ liệu sensor</span>
                                        <div class="sync-status warning">
                                            <i class="fas fa-times"></i>
                                            Chưa đồng bộ
                                        </div>
                                    </div>
                                </div>
                            }

                            <div class="last-sync-info">
                                <div class="sync-summary">
                                    @{
                                        var deviceSyncStatus = GetDeviceStatus();
                                    }
                                    <span class="sync-time">Lần đồng bộ cuối: @deviceSyncStatus.LastSync</span>
                                    <span class="sync-frequency">
                                        @if (deviceSyncStatus.IsOnline)
                                        {
                                            <span class="text-success">Tự động đồng bộ đang hoạt động</span>
                                        }
                                        else if (deviceSyncStatus.HasDevices)
                                        {
                                            <span class="text-warning">Thiết bị offline - cần kết nối lại</span>
                                        }
                                        else
                                        {
                                            <span class="text-danger">Chưa có thiết bị đăng ký</span>
                                        }
                                    </span>
                                </div>
                                <button class="btn btn-outline-primary btn-sm" @onclick="RefreshData" disabled="@isLoading">
                                    <i class="fas fa-@(isLoading ? "spinner fa-spin" : "sync-alt")"></i>
                                    @(isLoading ? "Đang đồng bộ..." : "Làm mới dữ liệu")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (isLoading)
    {
        <div class="container-fluid">
            <div class="d-flex justify-content-center align-items-center" style="height: 400px;">
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <h5>Đang tải dữ liệu sức khỏe...</h5>
                    <p class="text-muted">Vui lòng đợi trong giây lát</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="container-fluid">
            <div class="alert alert-warning text-center" role="alert">
                <i class="fas fa-exclamation-triangle"></i>
                <h5>Không có dữ liệu</h5>
                <p>Không tìm thấy thông tin sức khỏe cho học sinh này.</p>
                <button class="btn btn-primary" @onclick="RefreshData">
                    <i class="fas fa-refresh"></i>
                    Thử lại
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string StudentUserId { get; set; } = string.Empty;
    [Inject] private AtlasApiClient _atlasApiClient { get; set; } = default!;
    [Inject] private NavigationManager _navigationManager { get; set; } = default!;

    private User? student;
    private DeviceStatusSummary? deviceStatus;
    private List<SensorReadingInfoDto> sensorReadings = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudentData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(StudentUserId))
        {
            await LoadStudentData();
        }
    }

    private async Task LoadStudentData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Check if StudentUserId is provided
            if (string.IsNullOrEmpty(StudentUserId))
            {
                errorMessage = "Student ID không được cung cấp";
                return;
            }

            Console.WriteLine($"Loading data for student: {StudentUserId}");

            // Load student information
            student = await _atlasApiClient.GetUserAsync(StudentUserId);
            if (student == null)
            {
                errorMessage = $"Không tìm thấy thông tin học sinh với ID: {StudentUserId}";
                return;
            }

            Console.WriteLine($"Loaded student: {student.FullName}");

            // Load device status
            var deviceStatusObj = await _atlasApiClient.GetDevicesStatusByUserAsync(StudentUserId);
            if (deviceStatusObj != null)
            {
                try
                {
                    string json;
                    
                    // Handle different types of response objects
                    if (deviceStatusObj is JsonElement jsonElement)
                    {
                        json = jsonElement.GetRawText();
                    }
                    else
                    {
                        json = JsonSerializer.Serialize(deviceStatusObj);
                    }
                    
                    Console.WriteLine($"Raw device status JSON: {json}");
                    
                    // Parse JSON with custom options
                    var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    };
                    
                    deviceStatus = JsonSerializer.Deserialize<DeviceStatusSummary>(json, options);
                    
                    if (deviceStatus != null)
                    {
                        Console.WriteLine($"Loaded device status: {deviceStatus.TotalDevices} total, {deviceStatus.OnlineDevices} online, {deviceStatus.OfflineDevices} offline");
                        
                        if (deviceStatus.Devices != null && deviceStatus.Devices.Any())
                        {
                            foreach (var device in deviceStatus.Devices)
                            {
                                Console.WriteLine($"Device: {device.DeviceId} ({device.Model}) - Status: {device.Status} - LastSync: {device.LastSyncAt}");
                            }
                        }
                        else
                        {
                            Console.WriteLine("No devices found in device status");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Failed to deserialize device status");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error parsing device status: {ex.Message}");
                    deviceStatus = null;
                }
            }
            else
            {
                Console.WriteLine("No device status returned from API");
            }

            // Load sensor readings with date range
            var fromDate = DateTimeOffset.UtcNow.AddDays(-30); // Get last 30 days
            var toDate = DateTimeOffset.UtcNow.AddDays(1);

            var readingsData = await _atlasApiClient.GetSensorReadingsByDateRangeAsync(StudentUserId, fromDate, toDate);
            if (readingsData != null && readingsData.Any())
            {
                sensorReadings = readingsData;
                Console.WriteLine($"Loaded {readingsData.Count} sensor readings from date range");
            }
            else
            {
                // Try to get latest readings if date range returns empty
                var latestReadings = await _atlasApiClient.GetLatestSensorReadingsByUserAsync(StudentUserId, 100);
                if (latestReadings != null && latestReadings.Any())
                {
                    sensorReadings = latestReadings;
                    Console.WriteLine($"Loaded {latestReadings.Count} latest sensor readings");
                }
                else
                {
                    Console.WriteLine("No sensor readings found for user");
                    sensorReadings = new List<SensorReadingInfoDto>();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/dalyhealth/mainview");
    }

    private async Task RefreshData()
    {
        await LoadStudentData();
    }

    private (bool IsOnline, bool HasDevices, string LastSync) GetDeviceStatus()
    {
        if (deviceStatus == null)
        {
            return (false, false, "Chưa có dữ liệu");
        }

        var hasDevices = deviceStatus.TotalDevices > 0;
        if (!hasDevices)
        {
            return (false, false, "Chưa có dữ liệu");
        }

        var isOnline = deviceStatus.OnlineDevices > 0;
        
        // Parse LastSyncAt from ISO 8601 string to DateTime and format
        var lastSyncString = "Chưa đồng bộ";
        var firstDevice = deviceStatus.Devices?.FirstOrDefault();
        if (firstDevice?.LastSyncAt != null && !string.IsNullOrEmpty(firstDevice.LastSyncAt))
        {
            if (DateTime.TryParse(firstDevice.LastSyncAt, out DateTime lastSyncDate))
            {
                // Convert to local time zone (Vietnam)
                var timeZone = TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time");
                var localTime = TimeZoneInfo.ConvertTime(lastSyncDate, timeZone);
                lastSyncString = localTime.ToString("HH:mm dd/MM/yyyy");
            }
            else
            {
                lastSyncString = "Lỗi định dạng thời gian";
            }
        }

        return (isOnline, hasDevices, lastSyncString);
    }

    private HealthMetrics GetHealthMetrics()
    {
        if (!sensorReadings.Any())
        {
            return new HealthMetrics();
        }

        sensorReadings.Sort((a, b) => a.Timestamp.CompareTo(b.Timestamp));

        // Get readings from last 7 days instead of just today for more data


        // Process all readings and extract metrics
        var healthMetrics = new HealthMetrics();
        var heartRateReadings = new List<SensorReadingInfoDto>();
        var stepsReadings = new List<SensorReadingInfoDto>();
        var sleepReadings = new List<SensorReadingInfoDto>();
        var calorieReadings = new List<SensorReadingInfoDto>();

        foreach (var reading in sensorReadings)
        {
            var sensorType = reading.Metadata?.SensorType?.ToLower();

            // Process based on sensor type
            switch (sensorType)
            {
                case "heart_rate":
                case "heart_rate_monitor":
                case "pulse":
                    heartRateReadings.Add(reading);
                    ProcessHeartRateReading(reading, healthMetrics);
                    break;

                case "activity":
                case "step_counter":
                case "step_count":
                case "steps":
                    stepsReadings.Add(reading);
                    ProcessStepsReading(reading, healthMetrics);
                    break;

                case "sleep":
                case "sleep_tracker":
                case "sleep_duration":
                    sleepReadings.Add(reading);
                    ProcessSleepReading(reading, healthMetrics);
                    break;

                case "calories":
                case "calorie_tracker":
                case "calories_burned":
                case "energy":
                    calorieReadings.Add(reading);
                    ProcessCaloriesReading(reading, healthMetrics);
                    break;

                default:
                    // Try to process as generic data
                    ProcessGenericReading(reading, healthMetrics, heartRateReadings, stepsReadings, sleepReadings, calorieReadings);
                    break;
            }
        }

        // Set the readings collections
        healthMetrics.HeartRateReadings = heartRateReadings;
        healthMetrics.StepsReadings = stepsReadings;
        healthMetrics.SleepReadings = sleepReadings;
        healthMetrics.CalorieReadings = calorieReadings;

        return healthMetrics;
    }

    private void ProcessHeartRateReading(SensorReadingInfoDto reading, HealthMetrics healthMetrics)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("heart") == true ||
            data.Key?.ToLower().Contains("bpm") == true ||
            data.Key?.ToLower().Contains("pulse") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0 && value < 300) // Reasonable heart rate range
                {
                    healthMetrics.HeartRate = value;
                    Console.WriteLine($"Found heart rate: {value} from key: {data.Key}");
                }
            }
            break;
        }
    }

    private void ProcessStepsReading(SensorReadingInfoDto reading, HealthMetrics healthMetrics)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("step") == true || data.Key?.ToLower().Contains("count") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0)
                {
                    healthMetrics.Steps = (int)value;
                    Console.WriteLine($"Found steps: {value} from key: {data.Key}");
                }
            }
            break;
        }

    }

    private void ProcessSleepReading(SensorReadingInfoDto reading, HealthMetrics healthMetrics)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("sleep") == true ||
            data.Key?.ToLower().Contains("sleep_duration_minutes") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0)
                {
                    // Convert minutes to hours if needed
                    var hours = Math.Round(value / 60.0, 1);
                    healthMetrics.Sleep = hours;
                    Console.WriteLine($"Found sleep: {hours} hours (original: {value}) from key: {data.Key}");
                }
            }
            break;
        }

    }

    private void ProcessCaloriesReading(SensorReadingInfoDto reading, HealthMetrics healthMetrics)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("calorie") == true || data.Key?.ToLower().Contains("energy") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0)
                {
                    healthMetrics.Calories = (int)value;
                    Console.WriteLine($"Found calories: {value} from key: {data.Key}");
                }
            }
            break;
        }

    }

    private void ProcessGenericReading(SensorReadingInfoDto reading, HealthMetrics healthMetrics,
    List<SensorReadingInfoDto> heartRateReadings, List<SensorReadingInfoDto> stepsReadings,
    List<SensorReadingInfoDto> sleepReadings, List<SensorReadingInfoDto> calorieReadings)
    {
        foreach (var data in reading.Readings)
        {
            var key = data.Key?.ToLower() ?? "";
            var value = GetNumericValue(data.Value);

            if (value <= 0) continue;

            if (key.Contains("step"))
            {
                healthMetrics.Steps = (int)value;
                if (!stepsReadings.Contains(reading)) stepsReadings.Add(reading);
            }
            else if (key.Contains("calorie"))
            {
                healthMetrics.Calories = (int)value;
                if (!calorieReadings.Contains(reading)) calorieReadings.Add(reading);
            }
            else if (key.Contains("heart") || key.Contains("bpm"))
            {
                if (value < 300)
                {
                    healthMetrics.HeartRate = value;
                    if (!heartRateReadings.Contains(reading)) heartRateReadings.Add(reading);
                }
            }
            else if (key.Contains("sleep"))
            {
                var hours = Math.Round(value / 60.0, 1);
                healthMetrics.Sleep = hours;
                if (!sleepReadings.Contains(reading)) sleepReadings.Add(reading);
            }
        }
    }

    private double GetLatestValue(List<SensorReadingInfoDto> readings)
    {
        if (!readings.Any()) return 0;

        // Sort by timestamp to get the latest reading
        var latest = readings.OrderByDescending(r => r.Timestamp).FirstOrDefault();
        if (latest?.Readings.Any() == true)
        {
            // Process each reading to find the best value
            foreach (var data in latest.Readings)
            {
                var key = data.Key?.ToLower() ?? "";
                var value = GetNumericValue(data.Value);

                if (value > 0)
                {
                    // Check for specific key patterns that indicate main values
                    if (key.Contains("step") || key.Contains("count") ||
                    key.Contains("calorie") || key.Contains("energy") ||
                    key.Contains("heart") || key.Contains("bpm") || key.Contains("pulse") ||
                    key.Contains("sleep") || key.Contains("duration") ||
                    key.Equals("value") || key.Equals("val") || key.Equals("data") ||
                    key.Contains("spo2_percentage"))
                    {
                        return value;
                    }
                }
            }

            // If no specific key patterns found, try to get any valid numeric value
            foreach (var data in latest.Readings)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0)
                {
                    return value;
                }
            }
        }
        return 0;
    }

    private double GetNumericValue(object? value)
    {
        if (value == null) return 0;

        try
        {
            if (value is JsonElement jsonElement)
            {
                return jsonElement.ValueKind switch
                {
                    JsonValueKind.Number => jsonElement.GetDouble(),
                    JsonValueKind.String => double.TryParse(jsonElement.GetString(), out var result) ? result : 0,
                    _ => 0
                };
            }
            else if (value is string stringValue)
            {
                return double.TryParse(stringValue, out var result) ? result : 0;
            }
            else
            {
                return Convert.ToDouble(value);
            }
        }
        catch
        {
            return 0;
        }
    }

    private double GetTrend(List<SensorReadingInfoDto> readings)
    {
        if (readings.Count < 2) return 0;

        var first = GetLatestValue(readings.Take(1).ToList());
        var last = GetLatestValue(readings.TakeLast(1).ToList());

        return last - first;
    }

    // Heart Rate Status Methods
    private string GetHeartRateStatus(double heartRate)
    {
        if (heartRate == 0) return "no-data";
        if (heartRate < 60) return "warning";
        if (heartRate > 100) return "danger";
        return "normal";
    }

    private string GetHeartRateStatusText(double heartRate)
    {
        if (heartRate == 0) return "Chưa có dữ liệu";
        if (heartRate < 60) return "Thấp";
        if (heartRate > 100) return "Cao";
        return "Bình thường";
    }

    // Steps Status Methods
    private string GetStepsStatus(int steps)
    {
        if (steps == 0) return "no-data";
        if (steps < 5000) return "warning";
        if (steps >= 10000) return "excellent";
        if (steps >= 7000) return "good";
        return "average";
    }

    private string GetStepsStatusText(int steps)
    {
        if (steps == 0) return "Chưa có dữ liệu";
        if (steps < 5000) return "Cần cải thiện";
        if (steps >= 10000) return "Xuất sắc";
        if (steps >= 7000) return "Tốt";
        return "Trung bình";
    }

    // Sleep Status Methods
    private string GetSleepStatus(double sleep)
    {
        if (sleep == 0) return "no-data";
        if (sleep < 6) return "warning";
        if (sleep > 9) return "warning";
        if (sleep >= 7 && sleep <= 8) return "excellent";
        return "good";
    }

    private string GetSleepStatusText(double sleep)
    {
        if (sleep == 0) return "Chưa có dữ liệu";
        if (sleep < 6) return "Thiếu ngủ";
        if (sleep > 9) return "Ngủ quá nhiều";
        if (sleep >= 7 && sleep <= 8) return "Lý tưởng";
        return "Tốt";
    }

    private string GetSleepQuality(double sleep)
    {
        if (sleep == 0) return "Chưa có dữ liệu";
        if (sleep < 6) return "Kém";
        if (sleep > 9) return "Quá nhiều";
        if (sleep >= 7 && sleep <= 8) return "Tốt";
        return "Khá";
    }

    private int GetSleepQualityScore(double sleep)
    {
        if (sleep == 0) return 0;
        if (sleep < 5) return 40;
        if (sleep < 6) return 60;
        if (sleep >= 7 && sleep <= 8) return 90;
        if (sleep >= 6 && sleep < 7) return 75;
        if (sleep > 8 && sleep <= 9) return 80;
        return 50;
    }

    // Calories Status Methods
    private string GetCaloriesStatus(int calories)
    {
        if (calories == 0) return "no-data";
        if (calories < 1200) return "warning";
        if (calories >= 2000) return "excellent";
        if (calories >= 1500) return "good";
        return "average";
    }

    private string GetCaloriesStatusText(int calories)
    {
        if (calories == 0) return "Chưa có dữ liệu";
        if (calories < 1200) return "Quá thấp";
        if (calories >= 2000) return "Tốt";
        if (calories >= 1500) return "Khá tốt";
        return "Trung bình";
    }

    private string GetDeviceDisplayName(string model)
    {
        if (string.IsNullOrEmpty(model)) return "Unknown Device";
        
        // Common Samsung device mappings
        var deviceMappings = new Dictionary<string, string>
        {
            {"SM-G970F", "Samsung Galaxy S10e"},
            {"SM-G973F", "Samsung Galaxy S10"},
            {"SM-G975F", "Samsung Galaxy S10+"},
            {"SM-G977B", "Samsung Galaxy S10 5G"},
            {"SM-N970F", "Samsung Galaxy Note10"},
            {"SM-N975F", "Samsung Galaxy Note10+"},
            {"SM-G980F", "Samsung Galaxy S20"},
            {"SM-G981B", "Samsung Galaxy S20 5G"},
            {"SM-G985F", "Samsung Galaxy S20+"},
            {"SM-G986B", "Samsung Galaxy S20+ 5G"},
            {"SM-G988B", "Samsung Galaxy S20 Ultra 5G"},
            {"SM-G991B", "Samsung Galaxy S21 5G"},
            {"SM-G996B", "Samsung Galaxy S21+ 5G"},
            {"SM-G998B", "Samsung Galaxy S21 Ultra 5G"},
            {"SM-A515F", "Samsung Galaxy A51"},
            {"SM-A715F", "Samsung Galaxy A71"},
            {"SM-A525F", "Samsung Galaxy A52"},
            {"SM-A725F", "Samsung Galaxy A72"}
        };
        
        if (deviceMappings.TryGetValue(model, out string? displayName))
        {
            return displayName;
        }
        
        // If not found in mappings, try to make it more readable
        if (model.StartsWith("SM-"))
        {
            return $"Samsung {model}";
        }
        
        return model;
    }

    private class HealthMetrics
    {
        public double HeartRate { get; set; }
        public int Steps { get; set; }
        public double Sleep { get; set; }
        public int Calories { get; set; }
        public List<SensorReadingInfoDto> HeartRateReadings { get; set; } = new();
        public List<SensorReadingInfoDto> StepsReadings { get; set; } = new();
        public List<SensorReadingInfoDto> SleepReadings { get; set; } = new();
        public List<SensorReadingInfoDto> CalorieReadings { get; set; } = new();
    }

    private class DeviceStatusSummary
    {
        public string UserId { get; set; } = string.Empty;
        public int TotalDevices { get; set; }
        public int OnlineDevices { get; set; }
        public int OfflineDevices { get; set; }
        public List<DeviceInfo> Devices { get; set; } = new();
    }

    private class DeviceInfo
    {
        public string DeviceId { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public string SdkVersion { get; set; } = string.Empty;
        public string OsVersion { get; set; } = string.Empty;
        public string LastSyncAt { get; set; } = string.Empty; // ISO 8601 string
        public string RegisteredAt { get; set; } = string.Empty; // ISO 8601 string
        public bool IsOnline { get; set; }
    }

    // New properties and methods for health statistics
    private string selectedPeriod = "today";

    private void ChangePeriod(string period)
    {
        selectedPeriod = period;
        StateHasChanged();
    }

    private string GetPeriodLabel(string period)
    {
        return period switch
        {
            "today" => "hôm nay",
            "week" => "7 ngày qua",
            "2weeks" => "2 tuần qua",
            "month" => "30 ngày qua",
            _ => "hôm nay"
        };
    }

    private int GetPeriodDays(string period)
    {
        return period switch
        {
            "today" => 1,
            "week" => 7,
            "2weeks" => 14,
            "month" => 30,
            _ => 1
        };
    }

    private HealthStatistics GetHealthStatsByPeriod(string period)
    {
        var days = GetPeriodDays(period);
        var fromDate = DateTimeOffset.UtcNow.AddDays(-days);
        var toDate = DateTimeOffset.UtcNow;

        // Filter readings by date range
        var periodReadings = sensorReadings.Where(r => r.Timestamp >= fromDate && r.Timestamp <= toDate).ToList();

        if (!periodReadings.Any())
        {
            return new HealthStatistics();
        }

        // Calculate current values (latest readings)
        var currentHealthMetrics = GetHealthMetrics();

        // Calculate averages and statistics
        var dailyStats = GetDailyStatistics(periodReadings, days);

        return new HealthStatistics
        {
            CurrentSteps = currentHealthMetrics.Steps,
            CurrentHeartRate = currentHealthMetrics.HeartRate,
            CurrentCalories = currentHealthMetrics.Calories,
            CurrentSleep = currentHealthMetrics.Sleep,

            AvgSteps = dailyStats.Any() ? (int)dailyStats.Average(d => d.Steps) : 0,
            AvgHeartRate = dailyStats.Any() ? dailyStats.Average(d => d.HeartRate) : 0,
            AvgCalories = dailyStats.Any() ? (int)dailyStats.Average(d => d.Calories) : 0,
            AvgSleep = dailyStats.Where(d => d.Sleep != 0).Any() ? dailyStats.Average(d => d.Sleep) : 0,

            MinHeartRate = dailyStats.Any() ? dailyStats.Min(d => d.HeartRate) : 0,
            MaxHeartRate = dailyStats.Any() ? dailyStats.Max(d => d.HeartRate) : 0,
            AvgRestingHeartRate = dailyStats.Where(d => d.HeartRate > 0).Any() ? dailyStats.DefaultIfEmpty().Average(d => d?.HeartRate ?? 0) : 0,

            TotalSteps = dailyStats.Sum(d => d.Steps),
            TotalCalories = dailyStats.Sum(d => d.Calories),

            DaysWithData = dailyStats.Count(d => d.HasData),
            DaysWithStepsGoal = dailyStats.Count(d => d.Steps >= 6000)
        };
    }

    private List<DailyStat> GetDailyStatistics(List<SensorReadingInfoDto> readings, int days)
    {
        var dailyStats = new List<DailyStat>();
        var startDate = DateTimeOffset.UtcNow.AddDays(-days).Date;

        for (int i = 0; i < days; i++)
        {
            var currentDate = startDate.AddDays(i);
            var dayReadings = readings.Where(r => r.Timestamp.Date == currentDate).ToList();

            var dailyStat = new DailyStat
            {
                Date = currentDate,
                HasData = dayReadings.Any()
            };

            if (dayReadings.Any())
            {
                // Process daily readings
                var dayMetrics = ProcessDayReadings(dayReadings);
                dailyStat.Steps = dayMetrics.Steps;
                dailyStat.HeartRate = dayMetrics.HeartRate;
                dailyStat.Calories = dayMetrics.Calories;
                dailyStat.Sleep = dayMetrics.Sleep;
                dailyStat.IsGoodDay = dayMetrics.Steps >= 6000 && dayMetrics.Sleep >= 6;
            }

            dailyStats.Add(dailyStat);
        }

        return dailyStats;
    }

    private HealthMetrics ProcessDayReadings(List<SensorReadingInfoDto> dayReadings)
    {
        var healthMetrics = new HealthMetrics();

        foreach (var reading in dayReadings)
        {
            var sensorType = reading.Metadata?.SensorType?.ToLower();
            
            switch (sensorType)
            {
                case "heart_rate":
                case "heart_rate_monitor":
                case "pulse":
                    ProcessHeartRateReading(reading, healthMetrics);
                    break;
                case "activity":
                case "step_counter":
                case "step_count":
                case "steps":
                    ProcessStepsReading(reading, healthMetrics);
                    break;
                case "sleep":
                case "sleep_tracker":
                case "sleep_duration":
                    ProcessSleepReading(reading, healthMetrics);
                    break;
                case "calories":
                case "calorie_tracker":
                case "calories_burned":
                case "energy":
                    ProcessCaloriesReading(reading, healthMetrics);
                    break;
                default:
                    ProcessGenericReading(reading, healthMetrics, new(), new(), new(), new());
                    break;
            }
        }

        return healthMetrics;
    }

    private List<DailyStat> GetDailyBreakdown(string period)
    {
        var days = GetPeriodDays(period);
        var fromDate = DateTimeOffset.UtcNow.AddDays(-days);
        var periodReadings = sensorReadings.Where(r => r.Timestamp >= fromDate).ToList();
        
        return GetDailyStatistics(periodReadings, days)
            .Where(d => d.HasData)
            .OrderByDescending(d => d.Date)
            .Take(14) // Limit to last 14 days for display
            .ToList();
    }

    private class HealthStatistics
    {
        public int CurrentSteps { get; set; }
        public double CurrentHeartRate { get; set; }
        public int CurrentCalories { get; set; }
        public double CurrentSleep { get; set; }

        public int AvgSteps { get; set; }
        public double AvgHeartRate { get; set; }
        public int AvgCalories { get; set; }
        public double AvgSleep { get; set; }

        public double MinHeartRate { get; set; }
        public double MaxHeartRate { get; set; }
        public double AvgRestingHeartRate { get; set; }

        public int TotalSteps { get; set; }
        public int TotalCalories { get; set; }

        public int DaysWithData { get; set; }
        public int DaysWithStepsGoal { get; set; }
    }

    private class DailyStat
    {
        public DateTime Date { get; set; }
        public int Steps { get; set; }
        public double HeartRate { get; set; }
        public int Calories { get; set; }
        public double Sleep { get; set; }
        public bool HasData { get; set; }
        public bool IsGoodDay { get; set; }
    }
}