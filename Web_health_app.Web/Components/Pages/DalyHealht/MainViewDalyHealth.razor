@page "/dalyhealth/mainview"
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using Web_health_app.Web.ApiClients.Atlas
@using Web_health_app.ApiService.Entities.NonSQLTable
@using Web_health_app.Models.Models.NonSqlDTO
@using System.Text.Json
@attribute [Authorize(Roles = "ACCESS.MainViewDalyHealth")]
@inject NavigationManager navigation
@inject AtlasApiClient AtlasApi

<link href="/css/DalyHealth/daily-health.css" rel="stylesheet" />

<style>
    .filter-summary {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 12px 16px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
    }

    .filter-info {
        color: #6c757d;
        font-size: 14px;
        font-weight: 500;
    }

    .active-filters {
        display: flex;
        align-items: center;
        gap: 8px;
        flex-wrap: wrap;
    }

    .filter-tag {
        background: #007bff;
        color: white;
        padding: 4px 0px;
        border-radius: 16px;
        font-size: 12px;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

    .filter-tag i {
        font-size: 10px;
    }

    .btn-close-filter {
        background: none;
        border: none;
        color: white;
        padding: 0;
        margin-left: 4px;
        cursor: pointer;
        font-size: 10px;
        opacity: 0.8;
    }

    .btn-close-filter:hover {
        opacity: 1;
    }

    .no-results-message {
        padding: 40px 20px;
        text-align: center;
        color: #6c757d;
    }

    .no-results-message i {
        font-size: 48px;
        margin-bottom: 16px;
        color: #dee2e6;
    }

    .no-results-message h4 {
        margin-bottom: 8px;
        color: #495057;
    }

    .no-results-message p {
        margin-bottom: 20px;
    }

    /* Compact card styles */
    .student-health-card {
        position: relative;
        background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);
        border: 2px solid #dee2e6;
        border-radius: 1rem;
        box-shadow: 0 0.75rem 2rem rgba(58, 59, 69, 0.35);
        transition: all 0.3s ease;
        margin: 0 auto;
        max-width: 320px;
        transform: translateY(0);
        backdrop-filter: blur(10px);
    }

    .student-health-card.compact {
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .student-health-card.compact:hover {
        transform: translateY(-8px);
        box-shadow: 0 1.5rem 3.5rem rgba(58, 59, 69, 0.5);
        border-color: #007bff;
        border-width: 2px;
        background: linear-gradient(145deg, #ffffff 0%, #f1f3f4 100%);
    }

    .student-health-card.compact .health-metrics,
    .student-health-card.compact .additional-metrics {
        display: none;
    }

    .student-health-card.compact.expanded .health-metrics,
    .student-health-card.compact.expanded .additional-metrics {
        display: block;
        animation: slideDown 0.3s ease-out;
    }

    .compact-summary {
        display: block;
        padding: 0.75rem;
        border-top: 2px solid #dee2e6;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 0 0 1rem 1rem;
        transition: all 0.3s ease;
        margin-top: 0.5rem;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
    }

    .student-health-card.expanded .compact-summary {
        display: none;
    }

    .compact-summary .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.15rem;
        padding: 0 0.5rem;
        gap: 0.5rem;
    }

    .compact-summary .summary-row:last-child {
        margin-bottom: 0;
    }

    .compact-summary .spacer {
        display: none;
    }

    .compact-summary .metric-quick {
        display: flex;
        align-items: center;
        gap: 0.4rem;
        font-size: 0.9rem;
        flex: 1;
        padding: 0.3rem 0.5rem;
        min-width: 0;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 0.5rem;
        border: 1px solid rgba(0, 0, 0, 0.1);
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        transition: all 0.2s ease;
    }

    .compact-summary .metric-quick:hover {
        background: rgba(255, 255, 255, 1);
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .compact-summary .metric-quick:first-child {
        justify-content: flex-start;
    }

    .compact-summary .metric-quick:last-child {
        justify-content: flex-end;
    }

    .compact-summary .metric-quick i {
        width: 14px;
        text-align: center;
        opacity: 0.8;
        flex-shrink: 0;
    }

    .compact-summary .metric-quick .value {
        font-weight: 600;
        color: #495057;
        white-space: nowrap;
    }

    opacity: 0.8;
    flex-shrink: 0;
    }

    .compact-summary .metric-quick .value {
        font-weight: 600;
        color: #495057;
        white-space: nowrap;
    }

    .compact-summary .metric-quick.text-muted {
        color: #6c757d !important;
        font-style: italic;
    }

    .expand-indicator {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: #007bff;
        color: white;
        border-radius: 50%;
        width: 18px;
        height: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 10px;
        transition: transform 0.3s ease;
        z-index: 10;
    }

    .student-health-card.expanded .expand-indicator {
        transform: rotate(180deg);
        background: #6c757d;
    }

    /* Align expand indicator with status badges */
    .student-header {
        position: relative;
        padding-right: 4.5rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 1rem;
    }

    .student-info {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        width: 100%;
    }

    .student-info h4 {
        margin: 0.5rem 0 0.25rem 0;
        font-size: 1.2rem;
        font-weight: 700;
        color: #1a202c;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .student-info p {
        margin: 0 0 0.5rem 0;
        color: #4a5568;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .sync-status {
        position: absolute;
        top: 0.5rem;
        right: 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.25rem;
        font-size: 0.75rem;
        z-index: 5;
        width: 3rem;
    }

    .fade-in {
        animation: fadeInAnimation 0.3s ease;
    }

    .card-actions {
        position: relative;
        z-index: 10;
    }

    .card-actions .btn {
        position: relative;
        z-index: 11;
    }
</style>

<div class="daily-health-page">
    <!-- Page Header -->
    <div class="page-header">
        <div class="container-fluid">
            <div class="header-content">
                <div class="header-icon">
                    <i class="fas fa-heartbeat"></i>
                </div>
                <div class="header-text">
                    <h2>Theo Dõi Sức Khỏe Hàng Ngày</h2>
                    <p>Quản lý và theo dõi các chỉ số sức khỏe của học sinh từ Samsung Health</p>
                </div>
            </div>
            <div class="header-actions">
                <button class="btn btn-primary">
                    <i class="fas fa-sync-alt"></i>
                    Đồng Bộ Dữ Liệu
                </button>
                <button class="btn btn-secondary">
                    <i class="fas fa-download"></i>
                    Xuất Báo Cáo
                </button>
            </div>
        </div>
    </div>

    <!-- Health Summary Cards -->
    <div class="container-fluid">


        <!-- Filter and Search Section -->
        <div class="filter-section">
            <div class="row">
                <div class="col-lg-6 col-md-6">
                    <div class="search-container">
                        <div class="search-box">
                            <i class="fas fa-search search-icon"></i>
                            <input type="text" class="form-control" @bind="searchTerm" @oninput="OnSearchChanged"
                                placeholder="Tìm kiếm học sinh theo tên, lớp hoặc mã số..." />
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-md-6">
                    <div class="filter-controls">
                        <select class="form-select" @bind="selectedDepartment" @bind:after="OnDepartmentChanged">
                            <option value="">Tất cả đơn vị</option>
                            @foreach (var dept in availableDepartments)
                            {
                                <option value="@dept">@dept</option>
                            }
                        </select>
                        <select class="form-select" @bind="selectedRole" @bind:after="OnRoleChanged">
                            <option value="">Tất cả vai trò</option>
                            @foreach (var role in availableRoles)
                            {
                                <option value="@role">@role</option>
                            }
                        </select>

                    </div>
                </div>
            </div>

            <!-- Filter Summary -->
            @if (!string.IsNullOrEmpty(selectedDepartment) || !string.IsNullOrEmpty(selectedRole) ||
                        !string.IsNullOrEmpty(searchTerm))
            {
                <div class="row mt-2">
                    <div class="col-12">
                        <div class="filter-summary">
                            <span class="filter-info">
                                Hiển thị @filteredStudents.Count trên @students.Count học sinh
                            </span>
                            <div class="active-filters">
                                @if (!string.IsNullOrEmpty(selectedDepartment))
                                {
                                    <span class="filter-tag">
                                        <i class="fas fa-building"></i>
                                        @selectedDepartment
                                        <button type="button" class="btn-close-filter" @onclick="() => ClearDepartmentFilter()">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </span>
                                }
                                @if (!string.IsNullOrEmpty(selectedRole))
                                {
                                    <span class="filter-tag">
                                        <i class="fas fa-user-tag"></i>
                                        @selectedRole
                                        <button type="button" class="btn-close-filter" @onclick="() => ClearRoleFilter()">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </span>
                                }
                                @if (!string.IsNullOrEmpty(searchTerm))
                                {
                                    <span class="filter-tag">
                                        <i class="fas fa-search"></i>
                                        "@searchTerm"
                                        <button type="button" class="btn-close-filter" @onclick="() => ClearSearchFilter()">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </span>
                                }
                                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ClearAllFilters">
                                    <i class="fas fa-eraser"></i>
                                    Xóa tất cả bộ lọc
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Students Health Data Grid -->
        <div class="students-grid">
            <div class="row">
                @if (isLoading)
                {
                    <div class="col-12 text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Đang tải...</span>
                        </div>
                        <p>Đang tải dữ liệu học sinh...</p>
                    </div>
                }
                else if (filteredStudents == null || !filteredStudents.Any())
                {
                    <div class="col-12 text-center">
                        @if (!string.IsNullOrEmpty(selectedDepartment) || !string.IsNullOrEmpty(selectedRole) ||
                                            !string.IsNullOrEmpty(searchTerm))
                        {
                            <div class="no-results-message">
                                <i class="fas fa-filter"></i>
                                <h4>Không tìm thấy kết quả</h4>
                                <p>Không có học sinh nào phù hợp với bộ lọc hiện tại</p>
                                <button class="btn btn-outline-primary" @onclick="ClearAllFilters">
                                    <i class="fas fa-eraser"></i>
                                    Xóa tất cả bộ lọc
                                </button>
                            </div>
                        }
                        else
                        {
                            <p>Không có dữ liệu học sinh</p>
                        }
                    </div>
                }
                else
                {
                    @foreach (var student in filteredStudents)
                    {
                        <div class="col-xl-4 col-lg-6 col-md-6 mb-4">
                            <div class="student-health-card compact @(expandedCards.Contains(student.Id) ? "expanded" : "")"
                                @onclick="@(() => ToggleCardExpansion(student.Id))">



                                <div class="student-header">



                                    <div class="student-info">
                                        <h4>@student.FullName</h4>
                                        <p>@student.Department - @student.Role</p>
                                        @{
                                            var deviceStatus = GetDeviceStatus(student.Id);
                                        }
                                        @if (deviceStatus.IsOnline)
                                        {
                                            <span class="status-badge active">Online</span>
                                        }
                                        else if (deviceStatus.HasDevices)
                                        {
                                            <span class="status-badge warning">Offline</span>
                                        }
                                        else
                                        {
                                            <span class="status-badge inactive">Chưa kết nối</span>
                                        }
                                    </div>
                                    <div class="sync-status">
                                        @if (deviceStatus.IsOnline)
                                        {
                                            <i class="fas fa-check-circle text-success" title="Đã đồng bộ"></i>
                                            <small>Vừa xong</small>
                                        }
                                        else if (deviceStatus.HasDevices)
                                        {
                                            <i class="fas fa-exclamation-triangle text-warning" title="Mất kết nối"></i>
                                            <small>@deviceStatus.LastSync</small>
                                        }
                                        else
                                        {
                                            <i class="fas fa-times-circle text-danger" title="Chưa kết nối"></i>
                                            <small>Chưa có thiết bị</small>
                                        }
                                    </div>
                                </div>
                                <!-- Expand/Collapse Indicator -->
                                <div class="expand-indicator">
                                    <i class="fas fa-@(expandedCards.Contains(student.Id) ? "chevron-up" : "chevron-down")"></i>
                                </div>

                                @{
                                    var healthData = GetHealthData(student.Id);
                                }

                                <!-- Compact Summary (shown when collapsed) -->
                                @if (!expandedCards.Contains(student.Id))
                                {
                                    @if (healthData.HasData)
                                    {
                                        <div class="compact-summary">
                                            <div class="summary-row">
                                                <div class="metric-quick">
                                                    <i class="fas fa-walking text-primary"></i>
                                                    <span class="value">@healthData.Steps.ToString("#,0")</span>
                                                </div>
                                                <div class="metric-quick">
                                                    <i class="fas fa-heart text-danger"></i>
                                                    <span class="value">@healthData.HeartRate</span>
                                                </div>
                                            </div>
                                            <div class="summary-row">
                                                <div class="metric-quick">
                                                    <i class="fas fa-fire text-warning"></i>
                                                    <span class="value">@healthData.Calories.ToString("#,0")</span>
                                                </div>
                                                <div class="metric-quick">
                                                    <i class="fas fa-moon text-info"></i>
                                                    <span class="value">@healthData.SleepHours.ToString("F1")h</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="compact-summary">
                                            <div class="summary-row">
                                                <div class="metric-quick text-muted">
                                                    <i class="fas fa-mobile-alt"></i>
                                                    <span>Chưa có dữ liệu sức khỏe</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }

                                <!-- Detailed Health Metrics (shown when expanded) -->
                                @if (expandedCards.Contains(student.Id))
                                {
                                    @if (healthData.HasData)
                                    {
                                        <div class="health-metrics fade-in">
                                            <div class="metric-item">
                                                <div class="metric-icon steps-icon">
                                                    <i class="fas fa-walking"></i>
                                                </div>
                                                <div class="metric-data">
                                                    <span class="metric-value">@healthData.Steps / 6000</span>
                                                    <span class="metric-label">Bước chân</span>
                                                    <span class="metric-label"> Last Sync: @FormatHanoi(healthData.lastSyncSteps)</span>

                                                    <div class="progress-bar">
                                                        <div class="progress-fill"
                                                            style='@($"width:{healthData.StepsProgress.ToString(CultureInfo.InvariantCulture)}%");'>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="metric-item">
                                                <div class="metric-icon calories-icon">
                                                    <i class="fas fa-fire"></i>
                                                </div>
                                                <div class="metric-data">
                                                    <span class="metric-value">@healthData.Calories </span>
                                                    <span class="metric-label">Calories</span>
                                                    <span class="metric-label"> Last Sync:
                                                        @FormatHanoi(healthData.lastSyncCalories)</span>

                                                    <div class="progress-bar">
                                                        <div class="progress-fill"
                                                            style='@($"width:{healthData.CaloriesProgress.ToString(CultureInfo.InvariantCulture)}%");'>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>

                                            <div class="metric-item">
                                                <div class="metric-icon heart-icon">
                                                    <i class="fas fa-heart"></i>
                                                </div>
                                                <div class="metric-data">
                                                    <span class="metric-value">@healthData.HeartRate BPM</span>
                                                    <span class="metric-label">Nhịp tim</span>
                                                    <span class="metric-label"> Last Sync:
                                                        @FormatHanoi(healthData.lastSyncHeartRate)</span>

                                                    <div class="heart-rate-status @GetHeartRateQuality(healthData.HeartRate).ToLower()">
                                                        @healthData.HeartRateStatus</div>
                                                </div>
                                            </div>

                                            <div class="metric-item">
                                                <div class="metric-icon heart-icon">
                                                    <i class="fas fa-heart"></i>
                                                </div>
                                                <div class="metric-data">
                                                    <span class="metric-value">@healthData.Spo2Percentage %</span>
                                                    <span class="metric-label">SpO2</span>
                                                    <span class="metric-label"> Last Sync:
                                                        @FormatHanoi(healthData.lastSyncSpo2Percentage)</span>

                                                    <div class="sleep-quality @GetSpo2Quality(healthData.Spo2Percentage).ToLower()">
                                                        @healthData.Spo2PercentageStatus
                                                    </div>
                                                </div>
                                            </div>


                                            <div class="metric-item">
                                                <div class="metric-icon sleep-icon">
                                                    <i class="fas fa-moon"></i>
                                                </div>
                                                <div class="metric-data">
                                                    <span class="metric-value">@healthData.SleepHours h</span>
                                                    <span class="metric-label">Giấc ngủ</span>
                                                    <span class="metric-label"> Last Sync:
                                                        @FormatHanoi(healthData.lastSyncSleepHours)</span>

                                                    <div class="sleep-quality @healthData.SleepQuality.ToLower()">
                                                        @healthData.SleepQualityText</div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="additional-metrics fade-in">
                                            <div class="metric-row">
                                                <div class="metric-col">
                                                    <i class="fas fa-dumbbell"></i>
                                                    <span>@healthData.Exercise phút</span>
                                                    <small>Vận động</small>
                                                </div>
                                                <div class="metric-col">
                                                    <i class="fas fa-glass-water"></i>
                                                    <span>@healthData.Water L</span>
                                                    <small>Nước uống</small>
                                                </div>
                                                <div class="metric-col">
                                                    <i class="fas fa-thermometer-half"></i>
                                                    <span>@healthData.Temperature°C</span>
                                                    <small>Thân nhiệt</small>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="health-metrics no-data fade-in">
                                            <div class="no-data-message">
                                                <i class="fas fa-mobile-alt"></i>
                                                <p>Chưa có dữ liệu sức khỏe</p>
                                                <small>Học sinh chưa có dữ liệu từ thiết bị</small>
                                            </div>
                                        </div>
                                    }

                                    <div class="card-actions fade-in">
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => ViewDetails(student.Id)"
                                            @onclick:stopPropagation="true">
                                            <i class="fas fa-chart-line"></i>
                                            Chi tiết
                                        </button>
                                        @if (healthData.HasData)
                                        {
                                            <button class="btn btn-outline-success btn-sm" @onclick:stopPropagation="true">
                                                <i class="fas fa-dumbbell"></i>

                                                Tập luyện
                                            </button>
                                        }
                                      
                                    </div>
                                }

                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Pagination -->
        <div class="pagination-section">
            <nav aria-label="Student health pagination">
                <ul class="pagination justify-content-center">
                    <li class="page-item disabled">
                        <a class="page-link" href="#" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    <li class="page-item active"><a class="page-link" href="#">1</a></li>

                    <li class="page-item">
                        <a class="page-link" href="#" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private List<User> students = new List<User>();
    private List<User> filteredStudents = new List<User>();
    private Dictionary<string, dynamic> deviceStatuses = new Dictionary<string, dynamic>();
    private Dictionary<string, HealthData> healthDataCache = new Dictionary<string, HealthData>();

    // Filter properties
    private string searchTerm = "";
    private string selectedDepartment = "";
    private string selectedRole = "";

    private List<string> availableDepartments = new List<string>();
    private List<string> availableRoles = new List<string>();

    // Card expansion tracking
    private HashSet<string> expandedCards = new HashSet<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadStudentsData();
        await LoadDeviceStatuses();
        await LoadHealthData();
        PopulateFilterOptions();
        ApplyFilters();
        isLoading = false;
    }

    private async Task LoadStudentsData()
    {
        try
        {
            var users = await AtlasApi.GetAllUsersAsync();
            if (users != null)
            {
                students = users.ToList();
                Console.WriteLine($"Loaded {students.Count} students");
            }
            else
            {
                Console.WriteLine("No users returned from API");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading students: {ex.Message}");
            // You might want to show a user-friendly error message here
        }
    }

    private async Task LoadDeviceStatuses()
    {
        try
        {
            foreach (var student in students)
            {
                var status = await AtlasApi.GetDevicesStatusByUserAsync(student.Id);
                if (status != null)
                {
                    deviceStatuses[student.Id] = status;
                    Console.WriteLine($"Loaded device status for user {student.Id}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading device statuses: {ex.Message}");
        }
    }

    private async Task LoadHealthData()
    {
        try
        {
            foreach (var student in students)
            {
                //List<string> sensorTypes = ["exercise", "heart_rate", "spo2", "sleep", "activity"];


                var readings = await AtlasApi.GetLatestSensorReadingsByUserAsync(student.Id);
                //var reMoveItem = readings.Where(x => x.Timestamp > DateTime.UtcNow.AddHours(-24));
                // "exercise": "heart_rate" "spo2" "sleep" "activity"



                if (readings != null && readings.Any())
                {
                    healthDataCache[student.Id] = ProcessHealthData(readings);
                    Console.WriteLine($"Processed {readings.Count} sensor readings for user {student.Id}");
                }
                else
                {
                    healthDataCache[student.Id] = new HealthData();
                    Console.WriteLine($"No sensor readings found for user {student.Id}");
                }




            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading health data: {ex.Message}");
        }
    }

    private DeviceStatusInfo GetDeviceStatus(string userId)
    {
        if (deviceStatuses.TryGetValue(userId, out var status))
        {
            try
            {
                var statusJson = JsonSerializer.Serialize(status);
                var statusObj = JsonSerializer.Deserialize<JsonElement>(statusJson);

                JsonElement totalProp, onlineProp;
                // Try different property name cases that might be returned from API
                var totalDevices = 0;
                var onlineDevices = 0;

                if (statusObj.TryGetProperty("TotalDevices", out totalProp))
                    totalDevices = totalProp.GetInt32();
                else if (statusObj.TryGetProperty("totalDevices", out totalProp))
                    totalDevices = totalProp.GetInt32();

                if (statusObj.TryGetProperty("OnlineDevices", out onlineProp))
                    onlineDevices = onlineProp.GetInt32();
                else if (statusObj.TryGetProperty("onlineDevices", out onlineProp))
                    onlineDevices = onlineProp.GetInt32();

                return new DeviceStatusInfo
                {
                    IsOnline = onlineDevices > 0,
                    HasDevices = totalDevices > 0,
                    LastSync = onlineDevices > 0 ? "Vừa xong" : "Offline"
                };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing device status: {ex.Message}");
                return new DeviceStatusInfo { IsOnline = false, HasDevices = false, LastSync = "Lỗi dữ liệu" };
            }
        }
        return new DeviceStatusInfo { IsOnline = false, HasDevices = false, LastSync = "Chưa có" };
    }

    private HealthData GetHealthData(string userId)
    {
        return healthDataCache.TryGetValue(userId, out var data) ? data : new HealthData();
    }

    private HealthData ProcessHealthData(List<SensorReadingInfoDto> readings)
    {
        var healthData = new HealthData();

        // Timestamp là DateTime hoặc DateTimeOffset (không nullable)
        readings.Sort((a, b) => a.Timestamp.CompareTo(b.Timestamp)); // tăng dần


        if (!readings.Any())
            return healthData;

        healthData.HasData = true;

        // Process each sensor reading
        foreach (var reading in readings)
        {
            var sensorType = reading.Metadata?.SensorType?.ToLower();

            // Process data based on sensor type
            switch (sensorType)
            {
                case "step_counter":
                case "step_count":
                case "steps":
                    ProcessStepsData(reading, healthData);
                    break;

                case "calories":
                case "calorie_tracker":
                case "calories_burned":
                    ProcessCaloriesData(reading, healthData);
                    break;

                case "heart_rate":
                case "heart_rate_monitor":
                case "pulse":
                    ProcessHeartRateData(reading, healthData);
                    break;

                case "sleep_tracker":
                case "sleep_duration":
                case "sleep":
                    ProcessSleepData(reading, healthData);
                    break;

                case "exercise_tracker":
                case "exercise_duration":
                case "workout":
                    ProcessExerciseData(reading, healthData);
                    break;

                case "hydration":
                case "water_intake":
                case "water":
                    ProcessWaterData(reading, healthData);
                    break;

                case "body_temperature":
                case "temperature":
                case "thermometer":
                    ProcessTemperatureData(reading, healthData);
                    break;

                default:
                    // Try to process generic readings if sensor type is unknown
                    ProcessGenericData(reading, healthData);
                    break;
            }
        }

        return healthData;
    }

    private void ProcessStepsData(SensorReadingInfoDto reading, HealthData healthData)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("step") == true || data.Key?.ToLower().Contains("count") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0)
                {
                    healthData.Steps = Math.Max(healthData.Steps, (int)value);
                    healthData.StepsProgress = Math.Min(100, (healthData.Steps / 100.0)); // Target: 10,000 steps
                }
            }
        }
    }

    private void ProcessCaloriesData(SensorReadingInfoDto reading, HealthData healthData)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("calorie") == true || data.Key?.ToLower().Contains("energy") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0)
                {
                    healthData.Calories = Math.Max(healthData.Calories, (int)value);
                    healthData.CaloriesProgress = Math.Min(100, (healthData.Calories / 25.0)); // Target: 2,500 calories
                }
            }
        }
    }

    private void ProcessHeartRateData(SensorReadingInfoDto reading, HealthData healthData)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("heart") == true || data.Key?.ToLower().Contains("bpm") == true ||
            data.Key?.ToLower().Contains("pulse") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0 && value < 300) // Reasonable heart rate range
                {
                    healthData.HeartRate = (int)value;
                    healthData.lastSyncHeartRate = reading.Timestamp;

                    healthData.HeartRateStatus = GetHeartRateStatus(healthData.HeartRate);
                }
            }
        }
    }

    private void ProcessSleepData(SensorReadingInfoDto reading, HealthData healthData)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("sleep") == true || data.Key?.ToLower().Contains("sleep_duration_minutes") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0)
                {
                    // Assume value is in minutes, convert to hours
                    var hours = Math.Round(value / 60.0, 1);

                    healthData.SleepHours = hours;
                    healthData.lastSyncSleepHours = reading.Timestamp;

                    healthData.SleepQuality = GetSleepQuality(healthData.SleepHours);
                    healthData.SleepQualityText = GetSleepQualityText(healthData.SleepQuality);

                }
            }
        }
    }

    private void ProcessExerciseData(SensorReadingInfoDto reading, HealthData healthData)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("exercise") == true || data.Key?.ToLower().Contains("workout") == true ||
            data.Key?.ToLower().Contains("activity") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0)
                {
                    healthData.Exercise = Math.Max(healthData.Exercise, (int)value);
                }
            }
        }
    }

    private void ProcessWaterData(SensorReadingInfoDto reading, HealthData healthData)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("water") == true || data.Key?.ToLower().Contains("hydration") == true ||
            data.Key?.ToLower().Contains("fluid") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 0)
                {
                    // Convert ml to liters
                    var liters = Math.Round(value / 1000.0, 1);
                    healthData.Water = Math.Max(healthData.Water, liters);
                }
            }
        }
    }

    private void ProcessTemperatureData(SensorReadingInfoDto reading, HealthData healthData)
    {
        foreach (var data in reading.Readings)
        {
            if (data.Key?.ToLower().Contains("temperature") == true || data.Key?.ToLower().Contains("temp") == true)
            {
                var value = GetNumericValue(data.Value);
                if (value > 30 && value < 45) // Reasonable body temperature range in Celsius
                {
                    healthData.Temperature = Math.Round(value, 1);
                }
            }
        }
    }

    private void ProcessGenericData(SensorReadingInfoDto reading, HealthData healthData)
    {
        // Fallback processing for unknown sensor types
        foreach (var data in reading.Readings)
        {
            var key = data.Key?.ToLower() ?? "";
            var value = GetNumericValue(data.Value);

            if (value <= 0) continue;

            if (key.Contains("step"))
            {

                healthData.Steps = (int)value;
                healthData.lastSyncSteps = reading.Timestamp;
                healthData.StepsProgress = Math.Min(100, (healthData.Steps / 60.0));
            }
            else if (key.Contains("calorie"))
            {
                healthData.Calories = (int)value;
                healthData.lastSyncCalories = reading.Timestamp;

                healthData.CaloriesProgress = Math.Min(100, (healthData.Calories / 36));
            }
            else if (key.Contains("heart") || key.Contains("bpm"))
            {
                if (value < 300)
                {
                    healthData.HeartRate = (int)value;
                    healthData.lastSyncHeartRate = reading.Timestamp;

                    healthData.HeartRateStatus = GetHeartRateStatus(healthData.HeartRate);
                }
            }
            else if (key.Contains("spo2_percentage"))
            {
                if (value > 0)
                {
                    healthData.Spo2Percentage = (int)value;
                    healthData.lastSyncSpo2Percentage = reading.Timestamp;

                    healthData.Spo2PercentageStatus = GetSpo2Status(healthData.Spo2Percentage);
                }
            }
        }
    }

    private double GetNumericValue(object? value)
    {
        if (value == null) return 0;

        try
        {
            if (value is JsonElement jsonElement)
            {
                return jsonElement.ValueKind switch
                {
                    JsonValueKind.Number => jsonElement.GetDouble(),
                    JsonValueKind.String => double.TryParse(jsonElement.GetString(), out var result) ? result : 0,
                    _ => 0
                };
            }
            else if (value is string stringValue)
            {
                return double.TryParse(stringValue, out var result) ? result : 0;
            }
            else
            {
                return Convert.ToDouble(value);
            }
        }
        catch
        {
            return 0;
        }
    }

    private string GetHeartRateStatus(int heartRate)
    {
        if (heartRate == 0) return "Không có dữ liệu";
        if (heartRate < 60) return "Thấp";
        if (heartRate <= 100) return "Bình thường";
        if (heartRate <= 120) return "Hơi cao";
        return "Cao";
    }

    private string GetHeartRateQuality(int heartRate)
    {

        if (heartRate == 0) return "poor";
        if (heartRate < 40) return "poor";

        if (heartRate < 60) return "elevated";
        if (heartRate <= 80) return "normal";
        if (heartRate <= 100) return "normal";
        if (heartRate <= 120) return "elevated";
        return "poor";
    }

    private string GetSpo2Status(int spo2)
    {
        if (spo2 < 90) return "Nguy Hiểm!";
        if (spo2 <= 92) return "Suy Hô Hấp!";

        if (93 <= spo2 && spo2 < 95) return "Chỉ số oxy trong máu thấp";
        if (95 <= spo2 && spo2 < 96) return "Chỉ số oxy trong máu trung bình";
        if (96 <= spo2 && spo2 <= 100) return " Chỉ số oxy trong máu tốt";
        return "Lỗi cảm biến!";
    }
    private string GetSpo2Quality(int spo2)
    {

        if (96 <= spo2 && spo2 <= 100) return "excellent";
        if (95 <= spo2 && spo2 < 96) return "average";
        return "poor";
    }

    private string GetSleepQuality(double hours)
    {
        if (hours >= 8) return "excellent";
        if (hours >= 7) return "good";
        if (hours >= 6) return "average";
        return "poor";
    }

    private string GetSleepQualityText(string quality)
    {
        return quality switch
        {
            "excellent" => "Rất tốt",
            "good" => "Tốt",
            "average" => "Trung bình",
            "poor" => "Thiếu ngủ",
            _ => "Không có dữ liệu"
        };
    }

    private void ViewDetails(string studentUserId)
    {
        navigation.NavigateTo($"/dalyhealth/detailhealthstudent/{studentUserId}");
        Console.WriteLine($"Viewing details for user: {studentUserId}");
    }

    private void ToggleCardExpansion(string studentId)
    {
        if (expandedCards.Contains(studentId))
        {
            expandedCards.Remove(studentId);
        }
        else
        {
            expandedCards.Add(studentId);
        }
        StateHasChanged();
    }

    #region Filtering Methods

    private void PopulateFilterOptions()
    {
        // Get unique departments and roles
        availableDepartments = students
        .Where(s => !string.IsNullOrEmpty(s.Department))
        .Select(s => s.Department)
        .Distinct()
        .OrderBy(d => d)
        .ToList();

        availableRoles = students
        .Where(s => !string.IsNullOrEmpty(s.Role))
        .Select(s => s.Role)
        .Distinct()
        .OrderBy(r => r)
        .ToList();
    }

    private void ApplyFilters()
    {
        filteredStudents = students.Where(student =>
        {
            // Search filter
            if (!string.IsNullOrEmpty(searchTerm))
            {
                var searchLower = searchTerm.ToLower();
                if (!(student.FullName?.ToLower().Contains(searchLower) == true ||
        student.Username?.ToLower().Contains(searchLower) == true ||
        student.Department?.ToLower().Contains(searchLower) == true ||
        student.Role?.ToLower().Contains(searchLower) == true))
                {
                    return false;
                }
            }

            // Department filter
            if (!string.IsNullOrEmpty(selectedDepartment) && student.Department != selectedDepartment)
            {
                return false;
            }

            // Role filter
            if (!string.IsNullOrEmpty(selectedRole) && student.Role != selectedRole)
            {
                return false;
            }

            return true;
        }).ToList();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnDepartmentChanged()
    {
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnRoleChanged()
    {
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }



    private async Task ClearDepartmentFilter()
    {
        selectedDepartment = "";
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ClearRoleFilter()
    {
        selectedRole = "";
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ClearSearchFilter()
    {
        searchTerm = "";
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ClearAllFilters()
    {
        searchTerm = "";
        selectedDepartment = "";
        selectedRole = "";
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    // Helper classes
    public class DeviceStatusInfo
    {
        public bool IsOnline { get; set; }
        public bool HasDevices { get; set; }
        public string LastSync { get; set; } = "";
    }

    public class HealthData
    {
        public bool HasData { get; set; }

        public int Steps { get; set; }
        public double StepsProgress { get; set; }
        public DateTimeOffset lastSyncSteps { get; set; }


        public int Calories { get; set; }
        public double CaloriesProgress { get; set; }
        public DateTimeOffset lastSyncCalories { get; set; }


        public int HeartRate { get; set; }
        public string HeartRateStatus { get; set; } = "Không có dữ liệu";
        public DateTimeOffset lastSyncHeartRate { get; set; }


        public double SleepHours { get; set; }
        public DateTimeOffset lastSyncSleepHours { get; set; }

        public string SleepQuality { get; set; } = "average";
        public string SleepQualityText { get; set; } = "Không có dữ liệu";

        public int Exercise { get; set; }
        public double Water { get; set; }
        public double Temperature { get; set; }

        public int Spo2Percentage { get; set; }
        public string Spo2PercentageStatus { get; set; } = "Không có dữ liệu";
        public DateTimeOffset lastSyncSpo2Percentage { get; set; }

    }


    private static readonly TimeZoneInfo HanoiTz = GetHanoiTz();

    private static TimeZoneInfo GetHanoiTz()
    {
        // Windows dùng "SE Asia Standard Time"; Linux/macOS dùng "Asia/Ho_Chi_Minh"
        try { return TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time"); } // Windows
        catch { return TimeZoneInfo.FindSystemTimeZoneById("Asia/Ho_Chi_Minh"); } // Linux/macOS
    }

    private static string FormatHanoi(DateTimeOffset? utc)
    {
        if (utc is null) return "—";
        var local = TimeZoneInfo.ConvertTime(utc.Value, HanoiTz);
        return local.ToString("dd/MM/yyyy HH:mm:ss", new CultureInfo("vi-VN"));
        // Nếu muốn hiển thị offset: "dd/MM/yyyy HH:mm:ss 'GMT'zzz"
    }
}